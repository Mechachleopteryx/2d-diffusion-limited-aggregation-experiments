!function(t){var e={};function s(i){if(e[i])return e[i].exports;var r=e[i]={i:i,l:!1,exports:{}};return t[i].call(r.exports,r,r.exports,s),r.l=!0,r.exports}s.m=t,s.c=e,s.d=function(t,e,i){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},s.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(s.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)s.d(i,r,function(e){return t[e]}.bind(null,r));return i},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="",s(s.s=4)}([function(t,e,s){"use strict";var i={DefaultCircleDiameter:10,ShowClusters:!0,ShowWalkers:!0,MaxWalkers:2e4,WalkerSource:"Random",ReplenishWalkers:!1,Stickiness:.9,BiasTowards:"Center",BiasForce:1,UseFrame:!0,FrameSize:900};const r=[];class n{constructor(){this._bvh_parent=null,this._bvh_branch=!0,this._bvh_left=null,this._bvh_right=null,this._bvh_sort=0,this._bvh_min_x=0,this._bvh_min_y=0,this._bvh_max_x=0,this._bvh_max_y=0}static getBranch(){return r.length?r.pop():new n}static releaseBranch(t){r.push(t)}static sortBranches(t,e){return t.sort>e.sort?-1:1}}class a{constructor(){this._hierarchy=null,this._bodies=[],this._dirty_branches=[]}insert(t,e=!1){if(!e){const e=t._bvh;if(e&&e!==this)throw new Error("Body belongs to another collision system");t._bvh=this,this._bodies.push(t)}const s=t._polygon,i=t.x,r=t.y;s&&(t._dirty_coords||t.x!==t._x||t.y!==t._y||t.angle!==t._angle||t.scale_x!==t._scale_x||t.scale_y!==t._scale_y)&&t._calculateCoords();const a=t._bvh_padding,h=s?0:t.radius*t.scale,o=(s?t._min_x:i-h)-a,_=(s?t._min_y:r-h)-a,l=(s?t._max_x:i+h)+a,c=(s?t._max_y:r+h)+a;t._bvh_min_x=o,t._bvh_min_y=_,t._bvh_max_x=l,t._bvh_max_y=c;let d=this._hierarchy,u=0;if(d)for(;;){if(!d._bvh_branch){const e=d._bvh_parent,s=d._bvh_min_x,i=d._bvh_min_y,r=d._bvh_max_x,a=d._bvh_max_y,h=d._bvh_parent=t._bvh_parent=n.getBranch();h._bvh_parent=e,h._bvh_left=d,h._bvh_right=t,h._bvh_sort=u++,h._bvh_min_x=o<s?o:s,h._bvh_min_y=_<i?_:i,h._bvh_max_x=l>r?l:r,h._bvh_max_y=c>a?c:a,e?e._bvh_left===d?e._bvh_left=h:e._bvh_right=h:this._hierarchy=h;break}{const t=d._bvh_left,e=t._bvh_min_y,s=t._bvh_max_x,i=t._bvh_max_y,r=o<t._bvh_min_x?o:t._bvh_min_x,n=_<e?_:e,a=l>s?l:s,h=c>i?c:i,b=(a-r)*(h-n)-(s-t._bvh_min_x)*(i-e),m=d._bvh_right,g=m._bvh_min_x,p=m._bvh_min_y,y=m._bvh_max_x,f=m._bvh_max_y,v=o<g?o:g,x=_<p?_:p,w=l>y?l:y,k=c>f?c:f,W=(w-v)*(k-x)-(y-g)*(f-p);d._bvh_sort=u++,d._bvh_min_x=r<v?r:v,d._bvh_min_y=n<x?n:x,d._bvh_max_x=a>w?a:w,d._bvh_max_y=h>k?h:k,d=b<=W?t:m}}else this._hierarchy=t}remove(t,e=!1){if(!e){const e=t._bvh;if(e&&e!==this)throw new Error("Body belongs to another collision system");t._bvh=null,this._bodies.splice(this._bodies.indexOf(t),1)}if(this._hierarchy===t)return void(this._hierarchy=null);const s=t._bvh_parent,i=s._bvh_parent,r=s._bvh_left,a=r===t?s._bvh_right:r;if(a._bvh_parent=i,a._bvh_branch&&(a._bvh_sort=s._bvh_sort),i){i._bvh_left===s?i._bvh_left=a:i._bvh_right=a;let t=i;for(;t;){const e=t._bvh_left,s=e._bvh_min_x,i=e._bvh_min_y,r=e._bvh_max_x,n=e._bvh_max_y,a=t._bvh_right,h=a._bvh_min_x,o=a._bvh_min_y,_=a._bvh_max_x,l=a._bvh_max_y;t._bvh_min_x=s<h?s:h,t._bvh_min_y=i<o?i:o,t._bvh_max_x=r>_?r:_,t._bvh_max_y=n>l?n:l,t=t._bvh_parent}}else this._hierarchy=a;n.releaseBranch(s)}update(){const t=this._bodies,e=t.length;for(let s=0;s<e;++s){const e=t[s];let i=!1;if(i||e.padding===e._bvh_padding||(e._bvh_padding=e.padding,i=!0),!i){const t=e._polygon;t&&(e._dirty_coords||e.x!==e._x||e.y!==e._y||e.angle!==e._angle||e.scale_x!==e._scale_x||e.scale_y!==e._scale_y)&&e._calculateCoords();const s=e.x,r=e.y,n=t?0:e.radius*e.scale,a=t?e._min_x:s-n,h=t?e._min_y:r-n,o=t?e._max_x:s+n,_=t?e._max_y:r+n;i=a<e._bvh_min_x||h<e._bvh_min_y||o>e._bvh_max_x||_>e._bvh_max_y}i&&(this.remove(e,!0),this.insert(e,!0))}}potentials(t){const e=[],s=t._bvh_min_x,i=t._bvh_min_y,r=t._bvh_max_x,n=t._bvh_max_y;let a=this._hierarchy,h=!0;if(!a||!a._bvh_branch)return e;for(;a;){if(h){h=!1;let t=a._bvh_branch?a._bvh_left:null;for(;t&&t._bvh_max_x>=s&&t._bvh_max_y>=i&&t._bvh_min_x<=r&&t._bvh_min_y<=n;)t=(a=t)._bvh_branch?a._bvh_left:null}const o=a._bvh_branch,_=o?a._bvh_right:null;if(_&&_._bvh_max_x>s&&_._bvh_max_y>i&&_._bvh_min_x<r&&_._bvh_min_y<n)a=_,h=!0;else{o||a===t||e.push(a);let s=a._bvh_parent;if(!s)break;for(;s&&s._bvh_right===a;)s=(a=s)._bvh_parent;a=s}}return e}draw(t){const e=this._bodies,s=e.length;for(let i=0;i<s;++i)e[i].draw(t)}drawBVH(t){let e=this._hierarchy,s=!0;for(;e;){if(s){s=!1;let t=e._bvh_branch?e._bvh_left:null;for(;t;)t=(e=t)._bvh_branch?e._bvh_left:null}const i=e._bvh_branch,r=e._bvh_min_x,n=e._bvh_min_y,a=e._bvh_max_x,h=e._bvh_max_y,o=i?e._bvh_right:null;if(t.moveTo(r,n),t.lineTo(a,n),t.lineTo(a,h),t.lineTo(r,h),t.lineTo(r,n),o)e=o,s=!0;else{let t=e._bvh_parent;if(!t)break;for(;t&&t._bvh_right===e;)t=(e=t)._bvh_parent;e=t}}}}class h{constructor(){this.collision=!1,this.a=null,this.b=null,this.a_in_b=!1,this.a_in_b=!1,this.overlap=0,this.overlap_x=0,this.overlap_y=0}}function o(t,e,s=null,i=!0){const r=t._polygon,n=e._polygon;let a=!1;return s&&(s.a=t,s.b=e,s.a_in_b=!0,s.b_in_a=!0,s.overlap=null,s.overlap_x=0,s.overlap_y=0),r&&(t._dirty_coords||t.x!==t._x||t.y!==t._y||t.angle!==t._angle||t.scale_x!==t._scale_x||t.scale_y!==t._scale_y)&&t._calculateCoords(),n&&(e._dirty_coords||e.x!==e._x||e.y!==e._y||e.angle!==e._angle||e.scale_x!==e._scale_x||e.scale_y!==e._scale_y)&&e._calculateCoords(),i&&!function(t,e){const s=t._polygon,i=s?0:t.x,r=s?0:t.y,n=s?0:t.radius*t.scale,a=s?t._min_x:i-n,h=s?t._min_y:r-n,o=s?t._max_x:i+n,_=s?t._max_y:r+n,l=e._polygon,c=l?0:e.x,d=l?0:e.y,u=l?0:e.radius*e.scale,b=l?e._min_x:c-u,m=l?e._min_y:d-u,g=l?e._max_x:c+u,p=l?e._max_y:d+u;return a<g&&h<p&&o>b&&_>m}(t,e)||(r&&t._dirty_normals&&t._calculateNormals(),n&&e._dirty_normals&&e._calculateNormals(),a=r&&n?function(t,e,s=null){const i=t._coords.length,r=e._coords.length;if(2===i&&2===r){const i=t._coords,r=e._coords;return s&&(s.overlap=0),i[0]===r[0]&&i[1]===r[1]}const n=t._coords,a=e._coords,h=t._normals,o=e._normals;if(i>2)for(let t=0,e=1;t<i;t+=2,e+=2)if(l(n,a,h[t],h[e],s))return!1;if(r>2)for(let t=0,e=1;t<r;t+=2,e+=2)if(l(n,a,o[t],o[e],s))return!1;return!0}(t,e,s):r?_(t,e,s,!1):n?_(e,t,s,!0):function(t,e,s=null){const i=t.radius*t.scale,r=e.radius*e.scale,n=e.x-t.x,a=e.y-t.y,h=i+r,o=n*n+a*a;if(o>h*h)return!1;if(s){const t=Math.sqrt(o);s.a_in_b=i<=r&&t<=r-i,s.b_in_a=r<=i&&t<=i-r,s.overlap=h-t,s.overlap_x=n/t,s.overlap_y=a/t}return!0}(t,e,s)),s&&(s.collision=a),a}function _(t,e,s=null,i=!1){const r=t._coords,n=t._edges,a=t._normals,h=e.x,o=e.y,_=e.radius*e.scale,l=2*_,c=_*_,d=r.length;let u=!0,b=!0,m=null,g=0,p=0;if(2===d){const t=h-r[0],e=o-r[1],i=t*t+e*e;if(i>c)return!1;if(s){const s=Math.sqrt(i);m=_-s,g=t/s,p=e/s,b=!1}}else for(let t=0,e=1;t<d;t+=2,e+=2){const i=h-r[t],y=o-r[e],f=n[t],v=n[e],x=i*f+y*v,w=x<0?-1:x>f*f+v*v?1:0;let k=!1,W=0,F=0,C=0;if(s&&u&&i*i+y*y>c&&(u=!1),w){const e=-1===w,a=e?0===t?d-2:t-2:t===d-2?0:t+2,l=a+1,u=h-r[a],m=o-r[l],g=n[a],p=n[l],f=u*g+m*p;if((f<0?-1:f>g*g+p*p?1:0)===-w){const t=e?i:u,r=e?y:m,n=t*t+r*r;if(n>c)return!1;if(s){const e=Math.sqrt(n);k=!0,W=_-e,F=t/e,C=r/e,b=!1}}}else{const r=a[t],n=a[e],h=i*r+y*n,o=h<0?-h:h;if(h>0&&o>_)return!1;s&&(k=!0,W=_-h,F=r,C=n,(b&&h>=0||W<l)&&(b=!1))}k&&(null===m||m>W)&&(m=W,g=F,p=C)}return s&&(s.a_in_b=i?b:u,s.b_in_a=i?u:b,s.overlap=m,s.overlap_x=i?-g:g,s.overlap_y=i?-p:p),!0}function l(t,e,s,i,r=null){const n=t.length,a=e.length;if(!n||!a)return!0;let h=null,o=null,_=null,l=null;for(let e=0,r=1;e<n;e+=2,r+=2){const n=t[e]*s+t[r]*i;(null===h||h>n)&&(h=n),(null===o||o<n)&&(o=n)}for(let t=0,r=1;t<a;t+=2,r+=2){const n=e[t]*s+e[r]*i;(null===_||_>n)&&(_=n),(null===l||l<n)&&(l=n)}if(h>l||o<_)return!0;if(r){let t=0;if(h<_)if(r.a_in_b=!1,o<l)t=o-_,r.b_in_a=!1;else{const e=o-_,s=l-h;t=e<s?e:-s}else if(r.b_in_a=!1,o>l)t=h-l,r.a_in_b=!1;else{const e=o-_,s=l-h;t=e<s?e:-s}const e=r.overlap,n=t<0?-t:t;if(null===e||e>n){const e=t<0?-1:1;r.overlap=n,r.overlap_x=s*e,r.overlap_y=i*e}}return!1}class c{constructor(t=0,e=0,s=0){this.x=t,this.y=e,this.padding=s,this._circle=!1,this._polygon=!1,this._point=!1,this._bvh=null,this._bvh_parent=null,this._bvh_branch=!1,this._bvh_padding=s,this._bvh_min_x=0,this._bvh_min_y=0,this._bvh_max_x=0,this._bvh_max_y=0}collides(t,e=null,s=!0){return o(this,t,e,s)}potentials(){const t=this._bvh;if(null===t)throw new Error("Body does not belong to a collision system");return t.potentials(this)}remove(){const t=this._bvh;t&&t.remove(this,!1)}createResult(){return new h}static createResult(){return new h}}class d extends c{constructor(t=0,e=0,s=0,i=1,r=0){super(t,e,r),this.radius=s,this.scale=i}draw(t){const e=this.x,s=this.y,i=this.radius*this.scale;t.moveTo(e+i,s),t.arc(e,s,i,0,2*Math.PI)}}class u extends c{constructor(t=0,e=0,s=[],i=0,r=1,n=1,a=0){super(t,e,a),this.angle=i,this.scale_x=r,this.scale_y=n,this._polygon=!0,this._x=t,this._y=e,this._angle=i,this._scale_x=r,this._scale_y=n,this._min_x=0,this._min_y=0,this._max_x=0,this._max_y=0,this._points=null,this._coords=null,this._edges=null,this._normals=null,this._dirty_coords=!0,this._dirty_normals=!0,u.prototype.setPoints.call(this,s)}draw(t){(this._dirty_coords||this.x!==this._x||this.y!==this._y||this.angle!==this._angle||this.scale_x!==this._scale_x||this.scale_y!==this._scale_y)&&this._calculateCoords();const e=this._coords;if(2===e.length)t.moveTo(e[0],e[1]),t.arc(e[0],e[1],1,0,2*Math.PI);else{t.moveTo(e[0],e[1]);for(let s=2;s<e.length;s+=2)t.lineTo(e[s],e[s+1]);e.length>4&&t.lineTo(e[0],e[1])}}setPoints(t){const e=t.length;this._points=new Float64Array(2*e),this._coords=new Float64Array(2*e),this._edges=new Float64Array(2*e),this._normals=new Float64Array(2*e);const s=this._points;for(let i=0,r=0,n=1;i<e;++i,r+=2,n+=2){const e=t[i];s[r]=e[0],s[n]=e[1]}this._dirty_coords=!0}_calculateCoords(){const t=this.x,e=this.y,s=this.angle,i=this.scale_x,r=this.scale_y,n=this._points,a=this._coords,h=n.length;let o,_,l,c;for(let d=0,u=1;d<h;d+=2,u+=2){let h=n[d]*i,b=n[u]*r;if(s){const t=Math.cos(s),e=Math.sin(s),i=h;h=i*t-b*e,b=i*e+b*t}h+=t,b+=e,a[d]=h,a[u]=b,0===d?(o=_=h,l=c=b):(h<o?o=h:h>_&&(_=h),b<l?l=b:b>c&&(c=b))}this._x=t,this._y=e,this._angle=s,this._scale_x=i,this._scale_y=r,this._min_x=o,this._min_y=l,this._max_x=_,this._max_y=c,this._dirty_coords=!1,this._dirty_normals=!0}_calculateNormals(){const t=this._coords,e=this._edges,s=this._normals,i=t.length;for(let r=0,n=1;r<i;r+=2,n+=2){const a=r+2<i?r+2:0,h=t[a]-t[r],o=t[a+1]-t[n],_=h||o?Math.sqrt(h*h+o*o):0;e[r]=h,e[n]=o,s[r]=_?o/_:0,s[n]=_?-h/_:0}this._dirty_normals=!1}}class b extends u{constructor(t=0,e=0,s=0){super(t,e,[[0,0]],0,1,1,s),this._point=!0}}b.prototype.setPoints=void 0;class m{constructor(){this._bvh=new a}createCircle(t=0,e=0,s=0,i=1,r=0){const n=new d(t,e,s,i,r);return this._bvh.insert(n),n}createPolygon(t=0,e=0,s=[[0,0]],i=0,r=1,n=1,a=0){const h=new u(t,e,s,i,r,n,a);return this._bvh.insert(h),h}createPoint(t=0,e=0,s=0){const i=new b(t,e,s);return this._bvh.insert(i),i}createResult(){return new h}static createResult(){return new h}insert(...t){for(const e of t)this._bvh.insert(e,!1);return this}remove(...t){for(const e of t)this._bvh.remove(e,!1);return this}update(){return this._bvh.update(),this}draw(t){return this._bvh.draw(t)}drawBVH(t){return this._bvh.drawBVH(t)}potentials(t){return this._bvh.potentials(t)}collides(t,e,s=null,i=!0){return o(t,e,s,i)}}e.a=class{constructor(t,e){this.p5=t,this.settings=Object.assign({},i,e),this.paused=!1,this.showWalkers=this.settings.ShowWalkers,this.showClusters=this.settings.ShowClusters,this.numWalkers=0,this.edges={},this.frame={},"number"==typeof this.settings.FrameSize?(this.frame.left=window.innerWidth/2-this.settings.FrameSize/2,this.frame.right=window.innerWidth/2+this.settings.FrameSize/2,this.frame.top=window.innerHeight/2-this.settings.FrameSize/2,this.frame.bottom=window.innerHeight/2+this.settings.FrameSize/2):"object"==typeof this.settings.FrameSize&&(this.frame.left=window.innerWidth/2-this.settings.FrameSize[0]/2,this.frame.right=window.innerWidth/2+this.settings.FrameSize[0]/2,this.frame.top=window.innerHeight/2-this.settings.FrameSize[1]/2,this.frame.bottom=window.innerHeight/2+this.settings.FrameSize[1]/2),this.edges.left=this.settings.UseFrame?this.frame.left:0,this.edges.right=this.settings.UseFrame?this.frame.right:window.innerWidth,this.edges.top=this.settings.UseFrame?this.frame.top:0,this.edges.bottom=this.settings.UseFrame?this.frame.bottom:window.innerHeight,this.maxDistance=this.p5.dist(this.edges.left,this.edges.top,window.innerWidth/2,window.innerHeight/2),this.system=new m,this.bodies=[]}iterate(){this.paused||(this.settings.ReplenishWalkers&&this.numWalkers<this.settings.MaxWalkers&&this.createWalkers(this.settings.MaxWalkers-this.numWalkers),this.moveWalkers(),this.system.update(),this.handleCollisions())}draw(){this.p5.background(255);for(let t of this.bodies)if(t._point);else if(t._circle)this.p5.noStroke(),t.stuck&&this.showClusters?this.p5.fill(120):!t.stuck&&this.showWalkers?this.p5.fill(230):this.p5.noFill(),this.p5.ellipse(t.x,t.y,2*t.radius);else if(t._polygon){this.p5.noStroke(),t.stuck&&this.showClusters?this.p5.fill(120):!t.stuck&&this.showWalkers?this.p5.fill(230):this.p5.noFill(),this.p5.beginShape();for(let e=0;e<t._coords.length-1;e+=2)this.p5.vertex(t._coords[e],t._coords[e+1]);this.p5.endShape()}this.settings.UseFrame&&this.drawFrame()}drawFrame(){this.p5.noFill(),this.p5.stroke(0),"number"==typeof this.settings.FrameSize?this.p5.rect(window.innerWidth/2-this.settings.FrameSize/2-1,window.innerHeight/2-this.settings.FrameSize/2-1,this.settings.FrameSize+2,this.settings.FrameSize+2):"object"==typeof this.settings.FrameSize&&this.p5.rect(window.innerWidth/2-this.settings.FrameSize[0]/2-1,window.innerHeight/2-this.settings.FrameSize[1]/2-1,this.settings.FrameSize[0]+2,this.settings.FrameSize[1]+2)}moveWalkers(){if(this.bodies.length>0)for(let t of this.bodies)if(!t.stuck){let e,s=this.p5.random(-1,1),i=this.p5.random(-1,1);switch(t._point&&(s=Math.round(s),i=Math.round(i)),this.settings.BiasTowards){case"Top":i-=this.settings.BiasForce;break;case"Bottom":i+=this.settings.BiasForce;break;case"Left":s-=this.settings.BiasForce;break;case"Right":s+=this.settings.BiasForce;break;case"Center":s+=(e=this.getDeltasTowards(t.x,t.y,window.innerWidth/2,window.innerHeight/2)).x,i+=e.y;break;case"Edges":s-=(e=this.getDeltasTowards(t.x,t.y,window.innerWidth/2,window.innerHeight/2)).x,i-=e.y;break;case"Equator":t.y<window.innerHeight/2?i+=this.settings.BiasForce:i-=this.settings.BiasForce;break;case"Meridian":t.x<window.innerWidth/2?s+=this.settings.BiasForce:s-=this.settings.BiasForce}t.x+s>this.edges.left&&t.x+s<this.edges.right&&(t.x+=s),t.y+i>this.edges.top&&t.y+i<this.edges.bottom&&(t.y+=i),t.age++}}getDeltasTowards(t,e,s,i){let r=Math.atan2(i-e,s-t);return{x:Math.cos(r)*this.settings.BiasForce,y:Math.sin(r)*this.settings.BiasForce}}handleCollisions(){for(let t of this.bodies){if(t.stuck)continue;const e=t.potentials();for(let s of e)t._point?s.stuck&&(t.stuck=!0,this.walkers--):s.stuck&&t.collides(s)&&(t.stuck=!0,this.numWalkers--)}}createParticle(t){if(void 0===t||"object"!=typeof t)return;let e;if(t.hasOwnProperty("type"))switch(t.type){case"Point":(e=this.system.createPoint(t.x,t.y))._point=!0;break;case"Circle":(e=this.system.createCircle(t.x,t.y,t.diameter/2))._circle=!0;break;case"Polygon":(e=this.system.createPolygon(t.x,t.y,t.polygon,t.hasOwnProperty("rotation")?this.p5.radians(t.rotation):0))._polygon=!0}else{const s=this.settings.hasOwnProperty("CircleDiameter")?this.settings.CircleDiameter:this.settings.DefaultCircleDiameter,i=t.hasOwnProperty("diameter")?t.diameter:s;(e=this.system.createCircle(t.x,t.y,i/2))._circle=!0}e.stuck=!!t.hasOwnProperty("stuck")&&t.stuck,e.age=0,this.bodies.push(e)}createWalker(t){this.createParticle(t),this.numWalkers++}createWalkers(t){for(let e=0;e<t;e++){let t={};switch(this.settings.WalkerSource){case"Edges":switch(Math.round(this.p5.random(1,4))){case 1:t.x=this.p5.random(this.edges.left,this.edges.right),t.y=this.edges.top;break;case 2:t.x=this.edges.right,t.y=this.p5.random(this.edges.top,this.edges.bottom);break;case 3:t.x=this.p5.random(this.edges.left,this.edges.right),t.y=this.edges.bottom;break;case 4:t.x=this.edges.left,t.y=this.p5.random(this.edges.top,this.edges.bottom)}break;case"Circle":let e=50,s=this.p5.random(360);t.x=window.innerWidth/2+e*Math.cos(s*Math.PI/180),t.y=window.innerHeight/2+e*Math.sin(s*Math.PI/180);break;case"Random":t.x=this.p5.random(this.edges.left,this.edges.right),t.y=this.p5.random(this.edges.top,this.edges.bottom);break;case"Random-Circle":let i=this.p5.random(360),r=this.p5.random(5,430);t.x=window.innerWidth/2+r*Math.cos(i*Math.PI/180),t.y=window.innerHeight/2+r*Math.sin(i*Math.PI/180);break;case"Center":t.x=window.innerWidth/2,t.y=window.innerHeight/2}if(this.settings.VaryDiameterByDistance){let e=this.p5.dist(t.x,t.y,window.innerWidth/2,window.innerHeight/2);t.diameter=this.p5.map(e,0,this.maxDistance,this.settings.CircleDiameterRange[0],this.settings.CircleDiameterRange[1])}this.createWalker(t)}}createInitialWalkers(){this.createWalkers(this.settings.MaxWalkers)}createClusterFromParams(t){if(t.length>0)for(let e of t)e.stuck=!0,this.createParticle(e)}removeAll(){for(let t of this.bodies)this.system.remove(t);this.bodies=[],this.numWalkers=0}togglePause(){this.paused=!this.paused}toggleShowWalkers(){this.showWalkers=!this.showWalkers}toggleShowClusters(){this.showClusters=!this.showClusters}pause(){this.paused=!0}unpause(){this.paused=!1}}},,,,function(t,e,s){"use strict";s.r(e);var i={CircleDiameter:5,UseFrame:!0,ShowWalkers:!1},r=s(0);let n,a="Wall";new p5(function(t){function e(){n.removeAll(),n.createInitialWalkers(),s()}function s(){let e=[];switch(a){case"Point":e.push({x:window.innerWidth/2,y:window.innerHeight/2,diameter:i.CircleDiameter});break;case"Ring":let s=100,r=20;for(let t=0;t<r;t++)e.push({x:window.innerWidth/2+s*Math.cos(360/r*t*Math.PI/180),y:window.innerHeight/2+s*Math.sin(360/r*t*Math.PI/180),diameter:i.CircleDiameter});break;case"Random":for(let s=0;s<5;s++)e.push({x:t.random(n.edges.left,n.edges.right),y:t.random(n.edges.top,n.edges.bottom),diameter:i.CircleDiameter});break;case"Wall":switch(n.settings.BiasTowards){case"Top":e=h(n.edges.top);break;case"Bottom":e=h(n.edges.bottom);break;case"Left":e=o(n.edges.left);break;case"Right":e=o(n.edges.right);break;case"Edges":e=(e=(e=(e=e.concat(h(n.edges.top))).concat(h(n.edges.bottom))).concat(o(n.edges.left))).concat(o(n.edges.right));break;case"Equator":e=e.concat(h(window.innerHeight/2));break;case"Meridian":e=e.concat(o(window.innerWidth/2))}}n.createClusterFromParams(e)}function h(t){let e=[],s=i.UseFrame?900:window.innerWidth;for(let r=0;r<=s/i.CircleDiameter;r++)e.push({x:n.edges.left+r*i.CircleDiameter,y:t,diameter:i.CircleDiameter});return e}function o(t){let e=[],s=i.UseFrame?900:window.innerHeight;for(let r=0;r<=s/i.CircleDiameter;r++)e.push({x:t,y:n.edges.top+r*i.CircleDiameter,diameter:i.CircleDiameter});return e}t.setup=function(){t.createCanvas(window.innerWidth,window.innerHeight),t.colorMode(t.HSB,255),t.ellipseMode(t.CENTER),(n=new r.a(t,i)).settings.BiasTowards="Bottom",n.createInitialWalkers(),s()},t.draw=function(){n.iterate(),n.draw()},t.keyReleased=function(){switch(t.key){case" ":n.togglePause();break;case"w":n.toggleShowWalkers();break;case"c":n.toggleShowClusters();break;case"r":e();break;case"1":n.pause(),a="Wall",n.settings.BiasTowards="Bottom",e(),n.unpause();break;case"2":n.pause(),a="Wall",n.settings.BiasTowards="Top",e(),n.unpause();break;case"3":n.pause(),a="Wall",n.settings.BiasTowards="Left",e(),n.unpause();break;case"4":n.pause(),a="Wall",n.settings.BiasTowards="Right",e(),n.unpause();break;case"5":n.pause(),a="Wall",n.settings.BiasTowards="Equator",e(),n.unpause();break;case"6":n.pause(),a="Wall",n.settings.BiasTowards="Meridian",e(),n.unpause();break;case"7":n.pause(),a="Wall",n.settings.BiasTowards="Edges",e(),n.unpause();break;case"8":n.pause(),a="Point",n.settings.BiasTowards="Center",e(),n.unpause()}}})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,