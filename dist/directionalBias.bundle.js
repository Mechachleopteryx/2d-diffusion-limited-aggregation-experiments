!function(t){var e={};function s(i){if(e[i])return e[i].exports;var n=e[i]={i:i,l:!1,exports:{}};return t[i].call(n.exports,n,n.exports,s),n.l=!0,n.exports}s.m=t,s.c=e,s.d=function(t,e,i){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},s.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(s.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)s.d(i,n,function(e){return t[e]}.bind(null,n));return i},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="",s(s.s=2)}([function(t,e,s){"use strict";var i={ShowClusters:!0,ShowWalkers:!0,MaxWalkers:2e4,WalkerSource:"Random",ReplenishWalkers:!1,Stickiness:.9,BiasTowards:"",BiasForce:1,UseFrame:!0,FrameSize:900};const n=[];class r{constructor(){this._bvh_parent=null,this._bvh_branch=!0,this._bvh_left=null,this._bvh_right=null,this._bvh_sort=0,this._bvh_min_x=0,this._bvh_min_y=0,this._bvh_max_x=0,this._bvh_max_y=0}static getBranch(){return n.length?n.pop():new r}static releaseBranch(t){n.push(t)}static sortBranches(t,e){return t.sort>e.sort?-1:1}}class h{constructor(){this._hierarchy=null,this._bodies=[],this._dirty_branches=[]}insert(t,e=!1){if(!e){const e=t._bvh;if(e&&e!==this)throw new Error("Body belongs to another collision system");t._bvh=this,this._bodies.push(t)}const s=t._polygon,i=t.x,n=t.y;s&&(t._dirty_coords||t.x!==t._x||t.y!==t._y||t.angle!==t._angle||t.scale_x!==t._scale_x||t.scale_y!==t._scale_y)&&t._calculateCoords();const h=t._bvh_padding,a=s?0:t.radius*t.scale,_=(s?t._min_x:i-a)-h,o=(s?t._min_y:n-a)-h,l=(s?t._max_x:i+a)+h,c=(s?t._max_y:n+a)+h;t._bvh_min_x=_,t._bvh_min_y=o,t._bvh_max_x=l,t._bvh_max_y=c;let d=this._hierarchy,u=0;if(d)for(;;){if(!d._bvh_branch){const e=d._bvh_parent,s=d._bvh_min_x,i=d._bvh_min_y,n=d._bvh_max_x,h=d._bvh_max_y,a=d._bvh_parent=t._bvh_parent=r.getBranch();a._bvh_parent=e,a._bvh_left=d,a._bvh_right=t,a._bvh_sort=u++,a._bvh_min_x=_<s?_:s,a._bvh_min_y=o<i?o:i,a._bvh_max_x=l>n?l:n,a._bvh_max_y=c>h?c:h,e?e._bvh_left===d?e._bvh_left=a:e._bvh_right=a:this._hierarchy=a;break}{const t=d._bvh_left,e=t._bvh_min_y,s=t._bvh_max_x,i=t._bvh_max_y,n=_<t._bvh_min_x?_:t._bvh_min_x,r=o<e?o:e,h=l>s?l:s,a=c>i?c:i,b=(h-n)*(a-r)-(s-t._bvh_min_x)*(i-e),m=d._bvh_right,g=m._bvh_min_x,v=m._bvh_min_y,p=m._bvh_max_x,f=m._bvh_max_y,y=_<g?_:g,x=o<v?o:v,w=l>p?l:p,k=c>f?c:f,W=(w-y)*(k-x)-(p-g)*(f-v);d._bvh_sort=u++,d._bvh_min_x=n<y?n:y,d._bvh_min_y=r<x?r:x,d._bvh_max_x=h>w?h:w,d._bvh_max_y=a>k?a:k,d=b<=W?t:m}}else this._hierarchy=t}remove(t,e=!1){if(!e){const e=t._bvh;if(e&&e!==this)throw new Error("Body belongs to another collision system");t._bvh=null,this._bodies.splice(this._bodies.indexOf(t),1)}if(this._hierarchy===t)return void(this._hierarchy=null);const s=t._bvh_parent,i=s._bvh_parent,n=s._bvh_left,h=n===t?s._bvh_right:n;if(h._bvh_parent=i,h._bvh_branch&&(h._bvh_sort=s._bvh_sort),i){i._bvh_left===s?i._bvh_left=h:i._bvh_right=h;let t=i;for(;t;){const e=t._bvh_left,s=e._bvh_min_x,i=e._bvh_min_y,n=e._bvh_max_x,r=e._bvh_max_y,h=t._bvh_right,a=h._bvh_min_x,_=h._bvh_min_y,o=h._bvh_max_x,l=h._bvh_max_y;t._bvh_min_x=s<a?s:a,t._bvh_min_y=i<_?i:_,t._bvh_max_x=n>o?n:o,t._bvh_max_y=r>l?r:l,t=t._bvh_parent}}else this._hierarchy=h;r.releaseBranch(s)}update(){const t=this._bodies,e=t.length;for(let s=0;s<e;++s){const e=t[s];let i=!1;if(i||e.padding===e._bvh_padding||(e._bvh_padding=e.padding,i=!0),!i){const t=e._polygon;t&&(e._dirty_coords||e.x!==e._x||e.y!==e._y||e.angle!==e._angle||e.scale_x!==e._scale_x||e.scale_y!==e._scale_y)&&e._calculateCoords();const s=e.x,n=e.y,r=t?0:e.radius*e.scale,h=t?e._min_x:s-r,a=t?e._min_y:n-r,_=t?e._max_x:s+r,o=t?e._max_y:n+r;i=h<e._bvh_min_x||a<e._bvh_min_y||_>e._bvh_max_x||o>e._bvh_max_y}i&&(this.remove(e,!0),this.insert(e,!0))}}potentials(t){const e=[],s=t._bvh_min_x,i=t._bvh_min_y,n=t._bvh_max_x,r=t._bvh_max_y;let h=this._hierarchy,a=!0;if(!h||!h._bvh_branch)return e;for(;h;){if(a){a=!1;let t=h._bvh_branch?h._bvh_left:null;for(;t&&t._bvh_max_x>=s&&t._bvh_max_y>=i&&t._bvh_min_x<=n&&t._bvh_min_y<=r;)t=(h=t)._bvh_branch?h._bvh_left:null}const _=h._bvh_branch,o=_?h._bvh_right:null;if(o&&o._bvh_max_x>s&&o._bvh_max_y>i&&o._bvh_min_x<n&&o._bvh_min_y<r)h=o,a=!0;else{_||h===t||e.push(h);let s=h._bvh_parent;if(!s)break;for(;s&&s._bvh_right===h;)s=(h=s)._bvh_parent;h=s}}return e}draw(t){const e=this._bodies,s=e.length;for(let i=0;i<s;++i)e[i].draw(t)}drawBVH(t){let e=this._hierarchy,s=!0;for(;e;){if(s){s=!1;let t=e._bvh_branch?e._bvh_left:null;for(;t;)t=(e=t)._bvh_branch?e._bvh_left:null}const i=e._bvh_branch,n=e._bvh_min_x,r=e._bvh_min_y,h=e._bvh_max_x,a=e._bvh_max_y,_=i?e._bvh_right:null;if(t.moveTo(n,r),t.lineTo(h,r),t.lineTo(h,a),t.lineTo(n,a),t.lineTo(n,r),_)e=_,s=!0;else{let t=e._bvh_parent;if(!t)break;for(;t&&t._bvh_right===e;)t=(e=t)._bvh_parent;e=t}}}}class a{constructor(){this.collision=!1,this.a=null,this.b=null,this.a_in_b=!1,this.a_in_b=!1,this.overlap=0,this.overlap_x=0,this.overlap_y=0}}function _(t,e,s=null,i=!0){const n=t._polygon,r=e._polygon;let h=!1;return s&&(s.a=t,s.b=e,s.a_in_b=!0,s.b_in_a=!0,s.overlap=null,s.overlap_x=0,s.overlap_y=0),n&&(t._dirty_coords||t.x!==t._x||t.y!==t._y||t.angle!==t._angle||t.scale_x!==t._scale_x||t.scale_y!==t._scale_y)&&t._calculateCoords(),r&&(e._dirty_coords||e.x!==e._x||e.y!==e._y||e.angle!==e._angle||e.scale_x!==e._scale_x||e.scale_y!==e._scale_y)&&e._calculateCoords(),i&&!function(t,e){const s=t._polygon,i=s?0:t.x,n=s?0:t.y,r=s?0:t.radius*t.scale,h=s?t._min_x:i-r,a=s?t._min_y:n-r,_=s?t._max_x:i+r,o=s?t._max_y:n+r,l=e._polygon,c=l?0:e.x,d=l?0:e.y,u=l?0:e.radius*e.scale,b=l?e._min_x:c-u,m=l?e._min_y:d-u,g=l?e._max_x:c+u,v=l?e._max_y:d+u;return h<g&&a<v&&_>b&&o>m}(t,e)||(n&&t._dirty_normals&&t._calculateNormals(),r&&e._dirty_normals&&e._calculateNormals(),h=n&&r?function(t,e,s=null){const i=t._coords.length,n=e._coords.length;if(2===i&&2===n){const i=t._coords,n=e._coords;return s&&(s.overlap=0),i[0]===n[0]&&i[1]===n[1]}const r=t._coords,h=e._coords,a=t._normals,_=e._normals;if(i>2)for(let t=0,e=1;t<i;t+=2,e+=2)if(l(r,h,a[t],a[e],s))return!1;if(n>2)for(let t=0,e=1;t<n;t+=2,e+=2)if(l(r,h,_[t],_[e],s))return!1;return!0}(t,e,s):n?o(t,e,s,!1):r?o(e,t,s,!0):function(t,e,s=null){const i=t.radius*t.scale,n=e.radius*e.scale,r=e.x-t.x,h=e.y-t.y,a=i+n,_=r*r+h*h;if(_>a*a)return!1;if(s){const t=Math.sqrt(_);s.a_in_b=i<=n&&t<=n-i,s.b_in_a=n<=i&&t<=i-n,s.overlap=a-t,s.overlap_x=r/t,s.overlap_y=h/t}return!0}(t,e,s)),s&&(s.collision=h),h}function o(t,e,s=null,i=!1){const n=t._coords,r=t._edges,h=t._normals,a=e.x,_=e.y,o=e.radius*e.scale,l=2*o,c=o*o,d=n.length;let u=!0,b=!0,m=null,g=0,v=0;if(2===d){const t=a-n[0],e=_-n[1],i=t*t+e*e;if(i>c)return!1;if(s){const s=Math.sqrt(i);m=o-s,g=t/s,v=e/s,b=!1}}else for(let t=0,e=1;t<d;t+=2,e+=2){const i=a-n[t],p=_-n[e],f=r[t],y=r[e],x=i*f+p*y,w=x<0?-1:x>f*f+y*y?1:0;let k=!1,W=0,F=0,S=0;if(s&&u&&i*i+p*p>c&&(u=!1),w){const e=-1===w,h=e?0===t?d-2:t-2:t===d-2?0:t+2,l=h+1,u=a-n[h],m=_-n[l],g=r[h],v=r[l],f=u*g+m*v;if((f<0?-1:f>g*g+v*v?1:0)===-w){const t=e?i:u,n=e?p:m,r=t*t+n*n;if(r>c)return!1;if(s){const e=Math.sqrt(r);k=!0,W=o-e,F=t/e,S=n/e,b=!1}}}else{const n=h[t],r=h[e],a=i*n+p*r,_=a<0?-a:a;if(a>0&&_>o)return!1;s&&(k=!0,W=o-a,F=n,S=r,(b&&a>=0||W<l)&&(b=!1))}k&&(null===m||m>W)&&(m=W,g=F,v=S)}return s&&(s.a_in_b=i?b:u,s.b_in_a=i?u:b,s.overlap=m,s.overlap_x=i?-g:g,s.overlap_y=i?-v:v),!0}function l(t,e,s,i,n=null){const r=t.length,h=e.length;if(!r||!h)return!0;let a=null,_=null,o=null,l=null;for(let e=0,n=1;e<r;e+=2,n+=2){const r=t[e]*s+t[n]*i;(null===a||a>r)&&(a=r),(null===_||_<r)&&(_=r)}for(let t=0,n=1;t<h;t+=2,n+=2){const r=e[t]*s+e[n]*i;(null===o||o>r)&&(o=r),(null===l||l<r)&&(l=r)}if(a>l||_<o)return!0;if(n){let t=0;if(a<o)if(n.a_in_b=!1,_<l)t=_-o,n.b_in_a=!1;else{const e=_-o,s=l-a;t=e<s?e:-s}else if(n.b_in_a=!1,_>l)t=a-l,n.a_in_b=!1;else{const e=_-o,s=l-a;t=e<s?e:-s}const e=n.overlap,r=t<0?-t:t;if(null===e||e>r){const e=t<0?-1:1;n.overlap=r,n.overlap_x=s*e,n.overlap_y=i*e}}return!1}class c{constructor(t=0,e=0,s=0){this.x=t,this.y=e,this.padding=s,this._circle=!1,this._polygon=!1,this._point=!1,this._bvh=null,this._bvh_parent=null,this._bvh_branch=!1,this._bvh_padding=s,this._bvh_min_x=0,this._bvh_min_y=0,this._bvh_max_x=0,this._bvh_max_y=0}collides(t,e=null,s=!0){return _(this,t,e,s)}potentials(){const t=this._bvh;if(null===t)throw new Error("Body does not belong to a collision system");return t.potentials(this)}remove(){const t=this._bvh;t&&t.remove(this,!1)}createResult(){return new a}static createResult(){return new a}}class d extends c{constructor(t=0,e=0,s=0,i=1,n=0){super(t,e,n),this.radius=s,this.scale=i}draw(t){const e=this.x,s=this.y,i=this.radius*this.scale;t.moveTo(e+i,s),t.arc(e,s,i,0,2*Math.PI)}}class u extends c{constructor(t=0,e=0,s=[],i=0,n=1,r=1,h=0){super(t,e,h),this.angle=i,this.scale_x=n,this.scale_y=r,this._polygon=!0,this._x=t,this._y=e,this._angle=i,this._scale_x=n,this._scale_y=r,this._min_x=0,this._min_y=0,this._max_x=0,this._max_y=0,this._points=null,this._coords=null,this._edges=null,this._normals=null,this._dirty_coords=!0,this._dirty_normals=!0,u.prototype.setPoints.call(this,s)}draw(t){(this._dirty_coords||this.x!==this._x||this.y!==this._y||this.angle!==this._angle||this.scale_x!==this._scale_x||this.scale_y!==this._scale_y)&&this._calculateCoords();const e=this._coords;if(2===e.length)t.moveTo(e[0],e[1]),t.arc(e[0],e[1],1,0,2*Math.PI);else{t.moveTo(e[0],e[1]);for(let s=2;s<e.length;s+=2)t.lineTo(e[s],e[s+1]);e.length>4&&t.lineTo(e[0],e[1])}}setPoints(t){const e=t.length;this._points=new Float64Array(2*e),this._coords=new Float64Array(2*e),this._edges=new Float64Array(2*e),this._normals=new Float64Array(2*e);const s=this._points;for(let i=0,n=0,r=1;i<e;++i,n+=2,r+=2){const e=t[i];s[n]=e[0],s[r]=e[1]}this._dirty_coords=!0}_calculateCoords(){const t=this.x,e=this.y,s=this.angle,i=this.scale_x,n=this.scale_y,r=this._points,h=this._coords,a=r.length;let _,o,l,c;for(let d=0,u=1;d<a;d+=2,u+=2){let a=r[d]*i,b=r[u]*n;if(s){const t=Math.cos(s),e=Math.sin(s),i=a;a=i*t-b*e,b=i*e+b*t}a+=t,b+=e,h[d]=a,h[u]=b,0===d?(_=o=a,l=c=b):(a<_?_=a:a>o&&(o=a),b<l?l=b:b>c&&(c=b))}this._x=t,this._y=e,this._angle=s,this._scale_x=i,this._scale_y=n,this._min_x=_,this._min_y=l,this._max_x=o,this._max_y=c,this._dirty_coords=!1,this._dirty_normals=!0}_calculateNormals(){const t=this._coords,e=this._edges,s=this._normals,i=t.length;for(let n=0,r=1;n<i;n+=2,r+=2){const h=n+2<i?n+2:0,a=t[h]-t[n],_=t[h+1]-t[r],o=a||_?Math.sqrt(a*a+_*_):0;e[n]=a,e[r]=_,s[n]=o?_/o:0,s[r]=o?-a/o:0}this._dirty_normals=!1}}class b extends u{constructor(t=0,e=0,s=0){super(t,e,[[0,0]],0,1,1,s),this._point=!0}}b.prototype.setPoints=void 0;class m{constructor(){this._bvh=new h}createCircle(t=0,e=0,s=0,i=1,n=0){const r=new d(t,e,s,i,n);return this._bvh.insert(r),r}createPolygon(t=0,e=0,s=[[0,0]],i=0,n=1,r=1,h=0){const a=new u(t,e,s,i,n,r,h);return this._bvh.insert(a),a}createPoint(t=0,e=0,s=0){const i=new b(t,e,s);return this._bvh.insert(i),i}createResult(){return new a}static createResult(){return new a}insert(...t){for(const e of t)this._bvh.insert(e,!1);return this}remove(...t){for(const e of t)this._bvh.remove(e,!1);return this}update(){return this._bvh.update(),this}draw(t){return this._bvh.draw(t)}drawBVH(t){return this._bvh.drawBVH(t)}potentials(t){return this._bvh.potentials(t)}collides(t,e,s=null,i=!0){return _(t,e,s,i)}}e.a=class{constructor(t,e){this.p5=t,this.settings=Object.assign({},i,e),this.paused=!1,this.showWalkers=this.settings.ShowWalkers,this.showClusters=this.settings.ShowClusters,this.numWalkers=0,this.edges={},this.frame={},"number"==typeof this.settings.FrameSize?(this.frame.left=window.innerWidth/2-this.settings.FrameSize/2,this.frame.right=window.innerWidth/2+this.settings.FrameSize/2,this.frame.top=window.innerHeight/2-this.settings.FrameSize/2,this.frame.bottom=window.innerHeight/2+this.settings.FrameSize/2):"object"==typeof this.settings.FrameSize&&(this.frame.left=window.innerWidth/2-this.settings.FrameSize[0]/2,this.frame.right=window.innerWidth/2+this.settings.FrameSize[0]/2,this.frame.top=window.innerHeight/2-this.settings.FrameSize[1]/2,this.frame.bottom=window.innerHeight/2+this.settings.FrameSize[1]/2),this.edges.left=this.settings.UseFrame?this.frame.left:0,this.edges.right=this.settings.UseFrame?this.frame.right:window.innerWidth,this.edges.top=this.settings.UseFrame?this.frame.top:0,this.edges.bottom=this.settings.UseFrame?this.frame.bottom:window.innerHeight,this.system=new m,this.bodies=[],this.createInitialWalkers()}iterate(){this.paused||(this.settings.ReplenishWalkers&&this.numWalkers<this.settings.MaxWalkers&&this.createWalkers(this.settings.MaxWalkers-this.numWalkers),this.moveWalkers(),this.system.update(),this.handleCollisions())}draw(){this.p5.background(255);for(let t of this.bodies)!t.stuck&&this.showWalkers?t._point?(this.p5.stroke(0),this.p5.noFill(),this.p5.point(t.x,t.y)):t._circle&&(this.p5.noStroke(),this.p5.fill(230),this.p5.ellipse(t.x,t.y,this.settings.CircleDiameter)):t.stuck&&this.showClusters&&(t._point?(this.p5.stroke(0),this.p5.noFill(),this.p5.point(t.x,t.y)):t._circle&&(this.p5.noStroke(),this.p5.fill(150),this.p5.ellipse(t.x,t.y,this.settings.CircleDiameter)));this.settings.UseFrame&&this.drawFrame()}drawFrame(){this.p5.noFill(),this.p5.stroke(0),"number"==typeof this.settings.FrameSize?this.p5.rect(window.innerWidth/2-this.settings.FrameSize/2-1,window.innerHeight/2-this.settings.FrameSize/2-1,this.settings.FrameSize+2,this.settings.FrameSize+2):"object"==typeof this.settings.FrameSize&&this.p5.rect(window.innerWidth/2-this.settings.FrameSize[0]/2-1,window.innerHeight/2-this.settings.FrameSize[1]/2-1,this.settings.FrameSize[0]+2,this.settings.FrameSize[1]+2)}moveWalkers(){if(this.bodies.length>0)for(let t of this.bodies)if(!t.stuck){let e,s=this.p5.random(-1,1),i=this.p5.random(-1,1);switch(t._point&&(s=Math.round(s),i=Math.round(i)),this.settings.BiasTowards){case"Top":i-=this.settings.BiasForce;break;case"Bottom":i+=this.settings.BiasForce;break;case"Left":s-=this.settings.BiasForce;break;case"Right":s+=this.settings.BiasForce;break;case"Center":e=Math.atan2(window.innerHeight/2-t.y,window.innerWidth/2-t.x),s+=Math.cos(e)*this.settings.BiasForce,i+=Math.sin(e)*this.settings.BiasForce;break;case"Edges":e=Math.atan2(window.innerHeight/2-t.y,window.innerWidth/2-t.x),s-=Math.cos(e)*this.settings.BiasForce,i-=Math.sin(e)*this.settings.BiasForce}t.x+s>this.edges.left&&t.x+s<this.edges.right&&(t.x+=s),t.y+i>this.edges.top&&t.y+i<this.edges.bottom&&(t.y+=i),t.age++}}handleCollisions(){for(let t of this.bodies){if(t.stuck)continue;const e=t.potentials();for(let s of e)t._point?s.stuck&&(t.stuck=!0,this.walkers--):s.stuck&&t.collides(s)&&(t.stuck=!0,this.numWalkers--)}}createParticle(t,e,s=!1){let i;1==this.settings.CircleDiameter?(i=this.system.createPoint(t,e))._point=!0:(i=this.system.createCircle(t,e,this.settings.CircleDiameter/2))._circle=!0,i.stuck=s,i.age=0,this.bodies.push(i)}createWalker(t,e){this.createParticle(t,e),this.numWalkers++}createWalkers(t){for(let e=0;e<t;e++){let t,e;switch(this.settings.WalkerSource){case"Edges":switch(Math.round(p5.random(1,4))){case 1:t=p5.random(window.innerWidth),e=0;break;case 2:t=window.innerWidth,e=p5.random(window.innerHeight);break;case 3:t=p5.random(window.innerWidth),e=window.innerHeight;break;case 4:t=0,e=p5.random(window.innerHeight)}break;case"Circle":let s=50,i=this.p5.random(360);t=window.innerWidth/2+s*Math.cos(i*Math.PI/180),e=window.innerHeight/2+s*Math.sin(i*Math.PI/180);break;case"Random":t=this.p5.random(this.edges.left,this.edges.right),e=this.p5.random(this.edges.top,this.edges.bottom);break;case"Center":t=window.innerWidth/2,e=window.innerHeight/2}this.createWalker(Math.round(t),Math.round(e))}}createInitialWalkers(){this.createWalkers(this.settings.MaxWalkers)}createClusterFromCoords(t){if(t.length>0)for(let e of t)this.createParticle(e.x,e.y,!0)}removeAll(){for(let t of this.bodies)this.system.remove(t);this.bodies=[],this.numWalkers=0}togglePause(){this.paused=!this.paused}toggleShowWalkers(){this.showWalkers=!this.showWalkers}toggleShowClusters(){this.showClusters=!this.showClusters}pause(){this.paused=!0}unpause(){this.paused=!1}}},,function(t,e,s){"use strict";s.r(e);var i={CircleDiameter:5,UseFrame:!0,ShowWalkers:!1},n=s(0);let r,h="Point";new p5(function(t){function e(){r.removeAll(),r.createInitialWalkers(),s()}function s(){let e=[];switch(h){case"Point":e.push({x:window.innerWidth/2,y:window.innerHeight/2});break;case"Ring":let s=100,i=20;for(let t=0;t<i;t++)e.push({x:window.innerWidth/2+s*Math.cos(360/i*t*Math.PI/180),y:window.innerHeight/2+s*Math.sin(360/i*t*Math.PI/180)});break;case"Random":for(let s=0;s<5;s++)e.push({x:t.random(r.edges.left,r.edges.right),y:t.random(r.edges.top,r.edges.bottom)});break;case"Wall":switch(r.settings.BiasTowards){case"Top":e=a(r.edges.top);break;case"Bottom":e=a(r.edges.bottom);break;case"Left":e=_(r.edges.left);break;case"Right":e=_(r.edges.right);break;case"Edges":e=(e=(e=(e=(e=[]).concat(a(r.edges.top))).concat(a(r.edges.bottom))).concat(_(r.edges.left))).concat(_(r.edges.right))}}r.createClusterFromCoords(e)}function a(t){let e=[],s=i.UseFrame?900:window.innerWidth;for(let n=0;n<=s/i.CircleDiameter;n++)e.push({x:r.edges.left+n*i.CircleDiameter,y:t});return e}function _(t){let e=[],s=i.UseFrame?900:window.innerHeight;for(let n=0;n<=s/i.CircleDiameter;n++)e.push({x:t,y:r.edges.top+n*i.CircleDiameter});return e}t.setup=function(){t.createCanvas(window.innerWidth,window.innerHeight),t.colorMode(t.HSB,255),t.ellipseMode(t.CENTER),(r=new n.a(t,i)).settings.BiasTowards="Center",s()},t.draw=function(){r.iterate(),r.draw()},t.keyReleased=function(){switch(t.key){case" ":r.togglePause();break;case"w":r.toggleShowWalkers();break;case"c":r.toggleShowClusters();break;case"r":e();break;case"1":r.pause(),h="Point",r.settings.BiasTowards="Center",e(),r.unpause();break;case"2":r.pause(),h="Wall",r.settings.BiasTowards="Bottom",e(),r.unpause();break;case"3":r.pause(),h="Wall",r.settings.BiasTowards="Top",e(),r.unpause();break;case"4":r.pause(),h="Wall",r.settings.BiasTowards="Left",e(),r.unpause();break;case"5":r.pause(),h="Wall",r.settings.BiasTowards="Right",e(),r.unpause();break;case"6":r.pause(),h="Wall",r.settings.BiasTowards="Edges",e(),r.unpause()}}})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,