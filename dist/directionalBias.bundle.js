!function(t){var e={};function s(i){if(e[i])return e[i].exports;var r=e[i]={i:i,l:!1,exports:{}};return t[i].call(r.exports,r,r.exports,s),r.l=!0,r.exports}s.m=t,s.c=e,s.d=function(t,e,i){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},s.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(s.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)s.d(i,r,function(e){return t[e]}.bind(null,r));return i},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="",s(s.s=13)}({0:function(t,e,s){(function(s){var i,r,n;r=[],void 0===(n="function"==typeof(i=function(){"use strict";function e(t,e,s){var i=new XMLHttpRequest;i.open("GET",t),i.responseType="blob",i.onload=function(){o(i.response,e,s)},i.onerror=function(){console.error("could not download file")},i.send()}function i(t){var e=new XMLHttpRequest;return e.open("HEAD",t,!1),e.send(),200<=e.status&&299>=e.status}function r(t){try{t.dispatchEvent(new MouseEvent("click"))}catch(s){var e=document.createEvent("MouseEvents");e.initMouseEvent("click",!0,!0,window,0,0,0,80,20,!1,!1,!1,!1,0,null),t.dispatchEvent(e)}}var n="object"==typeof window&&window.window===window?window:"object"==typeof self&&self.self===self?self:"object"==typeof s&&s.global===s?s:void 0,o=n.saveAs||"object"!=typeof window||window!==n?function(){}:"download"in HTMLAnchorElement.prototype?function(t,s,o){var a=n.URL||n.webkitURL,h=document.createElement("a");s=s||t.name||"download",h.download=s,h.rel="noopener","string"==typeof t?(h.href=t,h.origin===location.origin?r(h):i(h.href)?e(t,s,o):r(h,h.target="_blank")):(h.href=a.createObjectURL(t),setTimeout(function(){a.revokeObjectURL(h.href)},4e4),setTimeout(function(){r(h)},0))}:"msSaveOrOpenBlob"in navigator?function(t,s,n){if(s=s||t.name||"download","string"!=typeof t)navigator.msSaveOrOpenBlob(function(t,e){return void 0===e?e={autoBom:!1}:"object"!=typeof e&&(console.warn("Depricated: Expected third argument to be a object"),e={autoBom:!e}),e.autoBom&&/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(t.type)?new Blob(["\ufeff",t],{type:t.type}):t}(t,n),s);else if(i(t))e(t,s,n);else{var o=document.createElement("a");o.href=t,o.target="_blank",setTimeout(function(){r(o)})}}:function(t,s,i,r){if((r=r||open("","_blank"))&&(r.document.title=r.document.body.innerText="downloading..."),"string"==typeof t)return e(t,s,i);var o="application/octet-stream"===t.type,a=/constructor/i.test(n.HTMLElement)||n.safari,h=/CriOS\/[\d]+/.test(navigator.userAgent);if((h||o&&a)&&"object"==typeof FileReader){var l=new FileReader;l.onloadend=function(){var t=l.result;t=h?t:t.replace(/^data:[^;]*;/,"data:attachment/file;"),r?r.location.href=t:location=t,r=null},l.readAsDataURL(t)}else{var c=n.URL||n.webkitURL,_=c.createObjectURL(t);r?r.location=_:location.href=_,r=null,setTimeout(function(){c.revokeObjectURL(_)},4e4)}};n.saveAs=o.saveAs=o,t.exports=o})?i.apply(e,r):i)||(t.exports=n)}).call(this,s(2))},1:function(t,e,s){"use strict";var i={CircleDiameter:5,InitialClusterType:"Random",WalkerSource:"Random",MaxWalkers:5e3,EdgeMargin:0,PruneOldWalkers:!1,MaxAge:30,ReplenishWalkers:!1,PruneDistantWalkers:!1,MaxWanderDistance:20,ShowClusters:!0,ShowWalkers:!0,ShowShapes:!0,BiasTowards:"",BiasForce:1,UsePerWalkerBias:!0,UseFrame:!0,FrameSize:900,CaptureLines:!0,RenderMode:"Shapes",UseStroke:!1,UseColors:!1,BackgroundColor:{h:230,s:20,b:40},WalkerColor:{h:200,s:30,b:44},ClusterColor:{h:30,s:70,b:80},ShapeColor:{h:100,s:50,b:80},LineColor:{h:10,s:70,b:100},FrameColor:{h:0,s:100,b:100}};const r=[];class n{constructor(){this._bvh_parent=null,this._bvh_branch=!0,this._bvh_left=null,this._bvh_right=null,this._bvh_sort=0,this._bvh_min_x=0,this._bvh_min_y=0,this._bvh_max_x=0,this._bvh_max_y=0}static getBranch(){return r.length?r.pop():new n}static releaseBranch(t){r.push(t)}static sortBranches(t,e){return t.sort>e.sort?-1:1}}class o{constructor(){this._hierarchy=null,this._bodies=[],this._dirty_branches=[]}insert(t,e=!1){if(!e){const e=t._bvh;if(e&&e!==this)throw new Error("Body belongs to another collision system");t._bvh=this,this._bodies.push(t)}const s=t._polygon,i=t.x,r=t.y;s&&(t._dirty_coords||t.x!==t._x||t.y!==t._y||t.angle!==t._angle||t.scale_x!==t._scale_x||t.scale_y!==t._scale_y)&&t._calculateCoords();const o=t._bvh_padding,a=s?0:t.radius*t.scale,h=(s?t._min_x:i-a)-o,l=(s?t._min_y:r-a)-o,c=(s?t._max_x:i+a)+o,_=(s?t._max_y:r+a)+o;t._bvh_min_x=h,t._bvh_min_y=l,t._bvh_max_x=c,t._bvh_max_y=_;let u=this._hierarchy,d=0;if(u)for(;;){if(!u._bvh_branch){const e=u._bvh_parent,s=u._bvh_min_x,i=u._bvh_min_y,r=u._bvh_max_x,o=u._bvh_max_y,a=u._bvh_parent=t._bvh_parent=n.getBranch();a._bvh_parent=e,a._bvh_left=u,a._bvh_right=t,a._bvh_sort=d++,a._bvh_min_x=h<s?h:s,a._bvh_min_y=l<i?l:i,a._bvh_max_x=c>r?c:r,a._bvh_max_y=_>o?_:o,e?e._bvh_left===u?e._bvh_left=a:e._bvh_right=a:this._hierarchy=a;break}{const t=u._bvh_left,e=t._bvh_min_y,s=t._bvh_max_x,i=t._bvh_max_y,r=h<t._bvh_min_x?h:t._bvh_min_x,n=l<e?l:e,o=c>s?c:s,a=_>i?_:i,g=(o-r)*(a-n)-(s-t._bvh_min_x)*(i-e),p=u._bvh_right,y=p._bvh_min_x,f=p._bvh_min_y,m=p._bvh_max_x,b=p._bvh_max_y,x=h<y?h:y,v=l<f?l:f,w=c>m?c:m,k=_>b?_:b,C=(w-x)*(k-v)-(m-y)*(b-f);u._bvh_sort=d++,u._bvh_min_x=r<x?r:x,u._bvh_min_y=n<v?n:v,u._bvh_max_x=o>w?o:w,u._bvh_max_y=a>k?a:k,u=g<=C?t:p}}else this._hierarchy=t}remove(t,e=!1){if(!e){const e=t._bvh;if(e&&e!==this)throw new Error("Body belongs to another collision system");t._bvh=null,this._bodies.splice(this._bodies.indexOf(t),1)}if(this._hierarchy===t)return void(this._hierarchy=null);const s=t._bvh_parent,i=s._bvh_parent,r=s._bvh_left,o=r===t?s._bvh_right:r;if(o._bvh_parent=i,o._bvh_branch&&(o._bvh_sort=s._bvh_sort),i){i._bvh_left===s?i._bvh_left=o:i._bvh_right=o;let t=i;for(;t;){const e=t._bvh_left,s=e._bvh_min_x,i=e._bvh_min_y,r=e._bvh_max_x,n=e._bvh_max_y,o=t._bvh_right,a=o._bvh_min_x,h=o._bvh_min_y,l=o._bvh_max_x,c=o._bvh_max_y;t._bvh_min_x=s<a?s:a,t._bvh_min_y=i<h?i:h,t._bvh_max_x=r>l?r:l,t._bvh_max_y=n>c?n:c,t=t._bvh_parent}}else this._hierarchy=o;n.releaseBranch(s)}update(){const t=this._bodies,e=t.length;for(let s=0;s<e;++s){const e=t[s];let i=!1;if(i||e.padding===e._bvh_padding||(e._bvh_padding=e.padding,i=!0),!i){const t=e._polygon;t&&(e._dirty_coords||e.x!==e._x||e.y!==e._y||e.angle!==e._angle||e.scale_x!==e._scale_x||e.scale_y!==e._scale_y)&&e._calculateCoords();const s=e.x,r=e.y,n=t?0:e.radius*e.scale,o=t?e._min_x:s-n,a=t?e._min_y:r-n,h=t?e._max_x:s+n,l=t?e._max_y:r+n;i=o<e._bvh_min_x||a<e._bvh_min_y||h>e._bvh_max_x||l>e._bvh_max_y}i&&(this.remove(e,!0),this.insert(e,!0))}}potentials(t){const e=[],s=t._bvh_min_x,i=t._bvh_min_y,r=t._bvh_max_x,n=t._bvh_max_y;let o=this._hierarchy,a=!0;if(!o||!o._bvh_branch)return e;for(;o;){if(a){a=!1;let t=o._bvh_branch?o._bvh_left:null;for(;t&&t._bvh_max_x>=s&&t._bvh_max_y>=i&&t._bvh_min_x<=r&&t._bvh_min_y<=n;)t=(o=t)._bvh_branch?o._bvh_left:null}const h=o._bvh_branch,l=h?o._bvh_right:null;if(l&&l._bvh_max_x>s&&l._bvh_max_y>i&&l._bvh_min_x<r&&l._bvh_min_y<n)o=l,a=!0;else{h||o===t||e.push(o);let s=o._bvh_parent;if(!s)break;for(;s&&s._bvh_right===o;)s=(o=s)._bvh_parent;o=s}}return e}draw(t){const e=this._bodies,s=e.length;for(let i=0;i<s;++i)e[i].draw(t)}drawBVH(t){let e=this._hierarchy,s=!0;for(;e;){if(s){s=!1;let t=e._bvh_branch?e._bvh_left:null;for(;t;)t=(e=t)._bvh_branch?e._bvh_left:null}const i=e._bvh_branch,r=e._bvh_min_x,n=e._bvh_min_y,o=e._bvh_max_x,a=e._bvh_max_y,h=i?e._bvh_right:null;if(t.moveTo(r,n),t.lineTo(o,n),t.lineTo(o,a),t.lineTo(r,a),t.lineTo(r,n),h)e=h,s=!0;else{let t=e._bvh_parent;if(!t)break;for(;t&&t._bvh_right===e;)t=(e=t)._bvh_parent;e=t}}}}class a{constructor(){this.collision=!1,this.a=null,this.b=null,this.a_in_b=!1,this.a_in_b=!1,this.overlap=0,this.overlap_x=0,this.overlap_y=0}}function h(t,e,s=null,i=!0){const r=t._polygon,n=e._polygon;let o=!1;return s&&(s.a=t,s.b=e,s.a_in_b=!0,s.b_in_a=!0,s.overlap=null,s.overlap_x=0,s.overlap_y=0),r&&(t._dirty_coords||t.x!==t._x||t.y!==t._y||t.angle!==t._angle||t.scale_x!==t._scale_x||t.scale_y!==t._scale_y)&&t._calculateCoords(),n&&(e._dirty_coords||e.x!==e._x||e.y!==e._y||e.angle!==e._angle||e.scale_x!==e._scale_x||e.scale_y!==e._scale_y)&&e._calculateCoords(),i&&!function(t,e){const s=t._polygon,i=s?0:t.x,r=s?0:t.y,n=s?0:t.radius*t.scale,o=s?t._min_x:i-n,a=s?t._min_y:r-n,h=s?t._max_x:i+n,l=s?t._max_y:r+n,c=e._polygon,_=c?0:e.x,u=c?0:e.y,d=c?0:e.radius*e.scale,g=c?e._min_x:_-d,p=c?e._min_y:u-d,y=c?e._max_x:_+d,f=c?e._max_y:u+d;return o<y&&a<f&&h>g&&l>p}(t,e)||(r&&t._dirty_normals&&t._calculateNormals(),n&&e._dirty_normals&&e._calculateNormals(),o=r&&n?function(t,e,s=null){const i=t._coords.length,r=e._coords.length;if(2===i&&2===r){const i=t._coords,r=e._coords;return s&&(s.overlap=0),i[0]===r[0]&&i[1]===r[1]}const n=t._coords,o=e._coords,a=t._normals,h=e._normals;if(i>2)for(let t=0,e=1;t<i;t+=2,e+=2)if(c(n,o,a[t],a[e],s))return!1;if(r>2)for(let t=0,e=1;t<r;t+=2,e+=2)if(c(n,o,h[t],h[e],s))return!1;return!0}(t,e,s):r?l(t,e,s,!1):n?l(e,t,s,!0):function(t,e,s=null){const i=t.radius*t.scale,r=e.radius*e.scale,n=e.x-t.x,o=e.y-t.y,a=i+r,h=n*n+o*o;if(h>a*a)return!1;if(s){const t=Math.sqrt(h);s.a_in_b=i<=r&&t<=r-i,s.b_in_a=r<=i&&t<=i-r,s.overlap=a-t,s.overlap_x=n/t,s.overlap_y=o/t}return!0}(t,e,s)),s&&(s.collision=o),o}function l(t,e,s=null,i=!1){const r=t._coords,n=t._edges,o=t._normals,a=e.x,h=e.y,l=e.radius*e.scale,c=2*l,_=l*l,u=r.length;let d=!0,g=!0,p=null,y=0,f=0;if(2===u){const t=a-r[0],e=h-r[1],i=t*t+e*e;if(i>_)return!1;if(s){const s=Math.sqrt(i);p=l-s,y=t/s,f=e/s,g=!1}}else for(let t=0,e=1;t<u;t+=2,e+=2){const i=a-r[t],m=h-r[e],b=n[t],x=n[e],v=i*b+m*x,w=v<0?-1:v>b*b+x*x?1:0;let k=!1,C=0,F=0,S=0;if(s&&d&&i*i+m*m>_&&(d=!1),w){const e=-1===w,o=e?0===t?u-2:t-2:t===u-2?0:t+2,c=o+1,d=a-r[o],p=h-r[c],y=n[o],f=n[c],b=d*y+p*f;if((b<0?-1:b>y*y+f*f?1:0)===-w){const t=e?i:d,r=e?m:p,n=t*t+r*r;if(n>_)return!1;if(s){const e=Math.sqrt(n);k=!0,C=l-e,F=t/e,S=r/e,g=!1}}}else{const r=o[t],n=o[e],a=i*r+m*n,h=a<0?-a:a;if(a>0&&h>l)return!1;s&&(k=!0,C=l-a,F=r,S=n,(g&&a>=0||C<c)&&(g=!1))}k&&(null===p||p>C)&&(p=C,y=F,f=S)}return s&&(s.a_in_b=i?g:d,s.b_in_a=i?d:g,s.overlap=p,s.overlap_x=i?-y:y,s.overlap_y=i?-f:f),!0}function c(t,e,s,i,r=null){const n=t.length,o=e.length;if(!n||!o)return!0;let a=null,h=null,l=null,c=null;for(let e=0,r=1;e<n;e+=2,r+=2){const n=t[e]*s+t[r]*i;(null===a||a>n)&&(a=n),(null===h||h<n)&&(h=n)}for(let t=0,r=1;t<o;t+=2,r+=2){const n=e[t]*s+e[r]*i;(null===l||l>n)&&(l=n),(null===c||c<n)&&(c=n)}if(a>c||h<l)return!0;if(r){let t=0;if(a<l)if(r.a_in_b=!1,h<c)t=h-l,r.b_in_a=!1;else{const e=h-l,s=c-a;t=e<s?e:-s}else if(r.b_in_a=!1,h>c)t=a-c,r.a_in_b=!1;else{const e=h-l,s=c-a;t=e<s?e:-s}const e=r.overlap,n=t<0?-t:t;if(null===e||e>n){const e=t<0?-1:1;r.overlap=n,r.overlap_x=s*e,r.overlap_y=i*e}}return!1}class _{constructor(t=0,e=0,s=0){this.x=t,this.y=e,this.padding=s,this._circle=!1,this._polygon=!1,this._point=!1,this._bvh=null,this._bvh_parent=null,this._bvh_branch=!1,this._bvh_padding=s,this._bvh_min_x=0,this._bvh_min_y=0,this._bvh_max_x=0,this._bvh_max_y=0}collides(t,e=null,s=!0){return h(this,t,e,s)}potentials(){const t=this._bvh;if(null===t)throw new Error("Body does not belong to a collision system");return t.potentials(this)}remove(){const t=this._bvh;t&&t.remove(this,!1)}createResult(){return new a}static createResult(){return new a}}class u extends _{constructor(t=0,e=0,s=0,i=1,r=0){super(t,e,r),this.radius=s,this.scale=i}draw(t){const e=this.x,s=this.y,i=this.radius*this.scale;t.moveTo(e+i,s),t.arc(e,s,i,0,2*Math.PI)}}class d extends _{constructor(t=0,e=0,s=[],i=0,r=1,n=1,o=0){super(t,e,o),this.angle=i,this.scale_x=r,this.scale_y=n,this._polygon=!0,this._x=t,this._y=e,this._angle=i,this._scale_x=r,this._scale_y=n,this._min_x=0,this._min_y=0,this._max_x=0,this._max_y=0,this._points=null,this._coords=null,this._edges=null,this._normals=null,this._dirty_coords=!0,this._dirty_normals=!0,d.prototype.setPoints.call(this,s)}draw(t){(this._dirty_coords||this.x!==this._x||this.y!==this._y||this.angle!==this._angle||this.scale_x!==this._scale_x||this.scale_y!==this._scale_y)&&this._calculateCoords();const e=this._coords;if(2===e.length)t.moveTo(e[0],e[1]),t.arc(e[0],e[1],1,0,2*Math.PI);else{t.moveTo(e[0],e[1]);for(let s=2;s<e.length;s+=2)t.lineTo(e[s],e[s+1]);e.length>4&&t.lineTo(e[0],e[1])}}setPoints(t){const e=t.length;this._points=new Float64Array(2*e),this._coords=new Float64Array(2*e),this._edges=new Float64Array(2*e),this._normals=new Float64Array(2*e);const s=this._points;for(let i=0,r=0,n=1;i<e;++i,r+=2,n+=2){const e=t[i];s[r]=e[0],s[n]=e[1]}this._dirty_coords=!0}_calculateCoords(){const t=this.x,e=this.y,s=this.angle,i=this.scale_x,r=this.scale_y,n=this._points,o=this._coords,a=n.length;let h,l,c,_;for(let u=0,d=1;u<a;u+=2,d+=2){let a=n[u]*i,g=n[d]*r;if(s){const t=Math.cos(s),e=Math.sin(s),i=a;a=i*t-g*e,g=i*e+g*t}a+=t,g+=e,o[u]=a,o[d]=g,0===u?(h=l=a,c=_=g):(a<h?h=a:a>l&&(l=a),g<c?c=g:g>_&&(_=g))}this._x=t,this._y=e,this._angle=s,this._scale_x=i,this._scale_y=r,this._min_x=h,this._min_y=c,this._max_x=l,this._max_y=_,this._dirty_coords=!1,this._dirty_normals=!0}_calculateNormals(){const t=this._coords,e=this._edges,s=this._normals,i=t.length;for(let r=0,n=1;r<i;r+=2,n+=2){const o=r+2<i?r+2:0,a=t[o]-t[r],h=t[o+1]-t[n],l=a||h?Math.sqrt(a*a+h*h):0;e[r]=a,e[n]=h,s[r]=l?h/l:0,s[n]=l?-a/l:0}this._dirty_normals=!1}}class g extends d{constructor(t=0,e=0,s=0){super(t,e,[[0,0]],0,1,1,s),this._point=!0}}g.prototype.setPoints=void 0;class p{constructor(){this._bvh=new o}createCircle(t=0,e=0,s=0,i=1,r=0){const n=new u(t,e,s,i,r);return this._bvh.insert(n),n}createPolygon(t=0,e=0,s=[[0,0]],i=0,r=1,n=1,o=0){const a=new d(t,e,s,i,r,n,o);return this._bvh.insert(a),a}createPoint(t=0,e=0,s=0){const i=new g(t,e,s);return this._bvh.insert(i),i}createResult(){return new a}static createResult(){return new a}insert(...t){for(const e of t)this._bvh.insert(e,!1);return this}remove(...t){for(const e of t)this._bvh.remove(e,!1);return this}update(){return this._bvh.update(),this}draw(t){return this._bvh.draw(t)}drawBVH(t){return this._bvh.drawBVH(t)}potentials(t){return this._bvh.potentials(t)}collides(t,e,s=null,i=!0){return h(t,e,s,i)}}var y=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var s=arguments[e];for(var i in s)Object.prototype.hasOwnProperty.call(s,i)&&(t[i]=s[i])}return t};var f=function(t){var e=t.type,s=function(t,e){var s={};for(var i in t)e.indexOf(i)>=0||Object.prototype.hasOwnProperty.call(t,i)&&(s[i]=t[i]);return s}(t,["type"]);switch(e){case"circle":return m(s);case"ellipse":return b(s);case"line":return x(s);case"path":return S(s);case"polygon":return W(s);case"polyline":return M(s);case"rect":return B(s);case"g":return D(s);default:throw new Error("Not a valid shape type")}},m=function(t){var e=t.cx,s=t.cy,i=t.r;return[{x:e,y:s-i,moveTo:!0},{x:e,y:s+i,curve:{type:"arc",rx:i,ry:i,sweepFlag:1}},{x:e,y:s-i,curve:{type:"arc",rx:i,ry:i,sweepFlag:1}}]},b=function(t){var e=t.cx,s=t.cy,i=t.rx,r=t.ry;return[{x:e,y:s-r,moveTo:!0},{x:e,y:s+r,curve:{type:"arc",rx:i,ry:r,sweepFlag:1}},{x:e,y:s-r,curve:{type:"arc",rx:i,ry:r,sweepFlag:1}}]},x=function(t){var e=t.x1,s=t.x2;return[{x:e,y:t.y1,moveTo:!0},{x:s,y:t.y2}]},v=/[MmLlHhVvCcSsQqTtAaZz]/g,w={A:7,C:6,H:1,L:2,M:2,Q:4,S:4,T:2,V:1,Z:0},k=["a","c","h","l","m","q","s","t","v"],C=function(t){return-1!==k.indexOf(t)},F=["xAxisRotation","largeArcFlag","sweepFlag"],S=function(t){for(var e=t.d,s=function(t){return t.match(v)}(e),i=function(t){return t.split(v).map(function(t){return t.replace(/[0-9]+-/g,function(t){return t.slice(0,-1)+" -"})}).map(function(t){return t.replace(/\.[0-9]+/g,function(t){return t+" "})}).map(function(t){return t.trim()}).filter(function(t){return t.length>0}).map(function(t){return t.split(/[ ,]+/).map(parseFloat).filter(function(t){return!isNaN(t)})})}(e),r=[],n=void 0,o=0,a=s.length;o<a;o++){var h=s[o],l=h.toUpperCase(),c=w[l],_=C(h);if(c>0)for(var u=i.shift(),d=u.length/c,g=0;g<d;g++){var p=r[r.length-1]||{x:0,y:0};switch(l){case"M":var y=(_?p.x:0)+u.shift(),f=(_?p.y:0)+u.shift();0===g?(n={x:y,y:f},r.push({x:y,y:f,moveTo:!0})):r.push({x:y,y:f});break;case"L":r.push({x:(_?p.x:0)+u.shift(),y:(_?p.y:0)+u.shift()});break;case"H":r.push({x:(_?p.x:0)+u.shift(),y:p.y});break;case"V":r.push({x:p.x,y:(_?p.y:0)+u.shift()});break;case"A":r.push({curve:{type:"arc",rx:u.shift(),ry:u.shift(),xAxisRotation:u.shift(),largeArcFlag:u.shift(),sweepFlag:u.shift()},x:(_?p.x:0)+u.shift(),y:(_?p.y:0)+u.shift()});var m=!0,b=!1,x=void 0;try{for(var k,S=F[Symbol.iterator]();!(m=(k=S.next()).done);m=!0){var W=k.value;0===r[r.length-1].curve[W]&&delete r[r.length-1].curve[W]}}catch(t){b=!0,x=t}finally{try{!m&&S.return&&S.return()}finally{if(b)throw x}}break;case"C":r.push({curve:{type:"cubic",x1:(_?p.x:0)+u.shift(),y1:(_?p.y:0)+u.shift(),x2:(_?p.x:0)+u.shift(),y2:(_?p.y:0)+u.shift()},x:(_?p.x:0)+u.shift(),y:(_?p.y:0)+u.shift()});break;case"S":var M=(_?p.x:0)+u.shift(),T=(_?p.y:0)+u.shift(),B=(_?p.x:0)+u.shift(),P=(_?p.y:0)+u.shift(),O={},D=void 0,E=void 0;p.curve&&"cubic"===p.curve.type?(O.x=Math.abs(p.x-p.curve.x2),O.y=Math.abs(p.y-p.curve.y2),D=p.x<p.curve.x2?p.x-O.x:p.x+O.x,E=p.y<p.curve.y2?p.y-O.y:p.y+O.y):(O.x=Math.abs(B-M),O.y=Math.abs(P-T),D=p.x,E=p.y),r.push({curve:{type:"cubic",x1:D,y1:E,x2:M,y2:T},x:B,y:P});break;case"Q":r.push({curve:{type:"quadratic",x1:(_?p.x:0)+u.shift(),y1:(_?p.y:0)+u.shift()},x:(_?p.x:0)+u.shift(),y:(_?p.y:0)+u.shift()});break;case"T":var j=(_?p.x:0)+u.shift(),A=(_?p.y:0)+u.shift(),H=void 0,R=void 0;if(p.curve&&"quadratic"===p.curve.type){var L={x:Math.abs(p.x-p.curve.x1),y:Math.abs(p.y-p.curve.y1)};H=p.x<p.curve.x1?p.x-L.x:p.x+L.x,R=p.y<p.curve.y1?p.y-L.y:p.y+L.y}else H=p.x,R=p.y;r.push({curve:{type:"quadratic",x1:H,y1:R},x:j,y:A})}}else{var U=r[r.length-1]||{x:0,y:0};U.x===n.x&&U.y===n.y||r.push({x:n.x,y:n.y})}}return r},W=function(t){var e=t.points;return T({closed:!0,points:e})},M=function(t){var e=t.points;return T({closed:!1,points:e})},T=function(t){var e=t.closed,s=t.points.split(/[\s,]+/).map(function(t){return parseFloat(t)}).reduce(function(t,e,s){return s%2==0?t.push({x:e}):t[(s-1)/2].y=e,t},[]);return e&&s.push(y({},s[0])),s[0].moveTo=!0,s},B=function(t){var e=t.height,s=t.rx,i=t.ry,r=t.width,n=t.x,o=t.y;return s||i?O({height:e,rx:s||i,ry:i||s,width:r,x:n,y:o}):P({height:e,width:r,x:n,y:o})},P=function(t){var e=t.height,s=t.width,i=t.x,r=t.y;return[{x:i,y:r,moveTo:!0},{x:i+s,y:r},{x:i+s,y:r+e},{x:i,y:r+e},{x:i,y:r}]},O=function(t){var e=t.height,s=t.rx,i=t.ry,r=t.width,n=t.x,o=t.y,a={type:"arc",rx:s,ry:i,sweepFlag:1};return[{x:n+s,y:o,moveTo:!0},{x:n+r-s,y:o},{x:n+r,y:o+i,curve:a},{x:n+r,y:o+e-i},{x:n+r-s,y:o+e,curve:a},{x:n+s,y:o+e},{x:n,y:o+e-i,curve:a},{x:n,y:o+i},{x:n+s,y:o,curve:a}]},D=function(t){return t.shapes.map(function(t){return f(t)})},E=f,j=function(t){var e="",s=0,i=void 0,r=!0,n=!1,o=void 0;try{for(var a,h=t[Symbol.iterator]();!(r=(a=h.next()).done);r=!0){var l=a.value,c=l.curve,_=void 0!==c&&c,u=l.moveTo,d=l.x,g=l.y,p=0===s||u,y=s===t.length-1||t[s+1].moveTo,f=0===s?null:t[s-1];if(p)i=l,y||(e+="M"+d+","+g);else if(_){switch(_.type){case"arc":var m=l.curve,b=m.largeArcFlag,x=void 0===b?0:b,v=m.rx,w=m.ry,k=m.sweepFlag,C=void 0===k?0:k,F=m.xAxisRotation;e+="A"+v+","+w+","+(void 0===F?0:F)+","+x+","+C+","+d+","+g;break;case"cubic":var S=l.curve;e+="C"+S.x1+","+S.y1+","+S.x2+","+S.y2+","+d+","+g;break;case"quadratic":var W=l.curve;e+="Q"+W.x1+","+W.y1+","+d+","+g}y&&d===i.x&&g===i.y&&(e+="Z")}else y&&d===i.x&&g===i.y?e+="Z":d!==f.x&&g!==f.y?e+="L"+d+","+g:d!==f.x?e+="H"+d:g!==f.y&&(e+="V"+g);s++}}catch(t){n=!0,o=t}finally{try{!r&&h.return&&h.return()}finally{if(n)throw o}}return e},A=function(t){var e=Array.isArray(t),s=e?Array.isArray(t[0]):"g"===t.type,i=e?t:s?t.shapes.map(function(t){return E(t)}):E(t);return s?i.map(function(t){return j(t)}):j(i)},H=("function"==typeof Symbol&&Symbol.iterator,s(0));s.d(e,"a",function(){return R});class R{constructor(t,e){this.p5=t,this.settings=Object.assign({},i,e),this.paused=!1,this.showWalkers=this.settings.ShowWalkers,this.showClusters=this.settings.ShowClusters,this.showShapes=this.settings.ShowShapes,this.useFrame=this.settings.UseFrame,this.renderMode=this.settings.RenderMode,this.numWalkers=0,this.customMovementFunction=void 0,this.edgeMargin=this.settings.EdgeMargin,this.edges={},this.frame={},"number"==typeof this.settings.FrameSize?(this.frame.left=window.innerWidth/2-this.settings.FrameSize/2,this.frame.right=window.innerWidth/2+this.settings.FrameSize/2,this.frame.top=window.innerHeight/2-this.settings.FrameSize/2,this.frame.bottom=window.innerHeight/2+this.settings.FrameSize/2):"object"==typeof this.settings.FrameSize&&(this.frame.left=window.innerWidth/2-this.settings.FrameSize[0]/2,this.frame.right=window.innerWidth/2+this.settings.FrameSize[0]/2,this.frame.top=window.innerHeight/2-this.settings.FrameSize[1]/2,this.frame.bottom=window.innerHeight/2+this.settings.FrameSize[1]/2),this.resetEdges(),this.maxDistance=this.p5.dist(this.edges.left,this.edges.top,window.innerWidth/2,window.innerHeight/2),this.system=new p,this.bodies=[],this.shapes=[],this.lines=[]}iterate(){this.paused||(this.settings.ReplenishWalkers&&this.numWalkers<this.settings.MaxWalkers&&this.createDefaultWalkers(this.settings.MaxWalkers-this.numWalkers,this.settings.ReplenishmentSource),this.moveWalkers(),this.system.update(),this.handleCollisions(),this.pruneWalkers())}draw(){if(this.settings.UseColors?this.p5.background(this.getColorStringFromObject(this.settings.BackgroundColor)):this.p5.background(255),this.showShapes)for(let t of this.shapes){this.settings.UseColors?(this.p5.fill(this.getColorStringFromObject(this.settings.ShapeColor)),this.p5.stroke(this.getColorStringFromObject(this.settings.ShapeColor))):(this.p5.noFill(),this.p5.stroke(100)),this.p5.beginShape();for(let e=0;e<t._coords.length;e+=2)this.p5.vertex(t._coords[e],t._coords[e+1]);this.p5.endShape()}if("Lines"==this.renderMode){if(this.settings.UseColors?this.p5.stroke(this.getColorStringFromObject(this.settings.LineColor)):this.p5.stroke(75),this.lines.length>0)for(let t of this.lines)this.p5.line(t.p1.x,t.p1.y,t.p2.x,t.p2.y)}else for(let t of this.bodies)if(t._point)this.p5.noFill(),t.stuck&&this.showClusters?(this.p5.noStroke(),this.settings.UseColors?this.p5.fill(this.getColorStringFromObject(this.settings.ClusterColor)):this.p5.fill(200),this.p5.ellipse(t.x,t.y,5)):!t.stuck&&this.showWalkers?this.settings.UseColors?this.p5.stroke(this.getColorStringFromObject(this.settings.WalkerColor)):this.p5.stroke(0):this.p5.noStroke(),this.p5.point(t.x,t.y);else if(t._circle)this.settings.UseStroke?this.settings.UseColors?this.p5.stroke(this.getColorStringFromObject(this.settings.BackgroundColor)):this.p5.stroke(255):this.p5.noStroke(),t.stuck&&this.showClusters?this.settings.UseColors?this.p5.fill(this.getColorStringFromObject(this.settings.ClusterColor)):this.p5.fill(120):!t.stuck&&this.showWalkers?this.settings.UseColors?this.p5.fill(this.getColorStringFromObject(this.settings.WalkerColor)):this.p5.fill(230):this.p5.noFill(),this.p5.ellipse(t.x,t.y,2*t.radius);else if(t._polygon){this.settings.UseStroke?this.settings.UseColors?this.p5.stroke(this.getColorStringFromObject(this.settings.BackgroundColor)):this.p5.stroke(255):this.p5.noStroke(),t.stuck&&this.showClusters?this.settings.UseColors?this.p5.fill(this.getColorStringFromObject(this.settings.ClusterColor)):this.p5.fill(120):!t.stuck&&this.showWalkers?this.settings.UseColors?this.p5.fill(this.getColorStringFromObject(this.settings.WalkerColor)):this.p5.fill(230):this.p5.noFill(),this.p5.beginShape();for(let e=0;e<t._coords.length-1;e+=2)this.p5.vertex(t._coords[e],t._coords[e+1]);this.p5.endShape()}this.useFrame&&this.drawFrame()}drawFrame(){this.p5.noFill(),this.settings.UseColors?this.p5.stroke(this.getColorStringFromObject(this.settings.FrameColor)):this.p5.stroke(0),"number"==typeof this.settings.FrameSize?this.p5.rect(window.innerWidth/2-this.settings.FrameSize/2-1,window.innerHeight/2-this.settings.FrameSize/2-1,this.settings.FrameSize+2,this.settings.FrameSize+2):"object"==typeof this.settings.FrameSize&&this.p5.rect(window.innerWidth/2-this.settings.FrameSize[0]/2-1,window.innerHeight/2-this.settings.FrameSize[1]/2-1,this.settings.FrameSize[0]+2,this.settings.FrameSize[1]+2)}resetEdges(){this.edges.left=this.useFrame?this.frame.left:0,this.edges.right=this.useFrame?this.frame.right:window.innerWidth,this.edges.top=this.useFrame?this.frame.top:0,this.edges.bottom=this.useFrame?this.frame.bottom:window.innerHeight}moveWalkers(){if(this.bodies.length>0)for(let t of this.bodies)if(!t.stuck){let e,s=this.p5.random(-1,1),i=this.p5.random(-1,1);if(this.settings.UsePerWalkerBias&&t.hasOwnProperty("BiasTowards"))s+=(e=this.getDeltasTowards(t.x,t.y,t.BiasTowards.x,t.BiasTowards.y)).x,i+=e.y;else switch(this.settings.BiasTowards){case"Top":i-=this.settings.BiasForce;break;case"Bottom":i+=this.settings.BiasForce;break;case"Left":s-=this.settings.BiasForce;break;case"Right":s+=this.settings.BiasForce;break;case"Center":s+=(e=this.getDeltasTowards(t.x,t.y,window.innerWidth/2,window.innerHeight/2)).x,i+=e.y;break;case"Edges":s-=(e=this.getDeltasTowards(t.x,t.y,window.innerWidth/2,window.innerHeight/2)).x,i-=e.y;break;case"Equator":t.y<window.innerHeight/2?i+=this.settings.BiasForce:i-=this.settings.BiasForce;break;case"Meridian":t.x<window.innerWidth/2?s+=this.settings.BiasForce:s-=this.settings.BiasForce}if(null!=typeof this.customMovementFunction&&this.customMovementFunction instanceof Function){let e=this.customMovementFunction(t);s+=e.dx,i+=e.dy}t._point&&(s=Math.round(s),i=Math.round(i)),t.x+=s,t.y+=i,t.age++}}getDeltasTowards(t,e,s,i){let r=Math.atan2(i-e,s-t);return{x:Math.cos(r)*this.settings.BiasForce,y:Math.sin(r)*this.settings.BiasForce}}handleCollisions(){for(let t of this.shapes){const e=t.potentials();for(let s of e)t.collides(s)&&(s.stuck=!0,this.numWalkers--)}for(let t of this.bodies){if(t.stuck)continue;const e=t.potentials();for(let s of e)t._point?s.stuck&&(t.stuck=!0,this.numWalkers--):s.stuck&&t.collides(s)&&(t.stuck=!0,this.numWalkers--,this.settings.CaptureLines&&this.lines.push({p1:{x:t.x,y:t.y},p2:{x:s.x,y:s.y}}))}}pruneWalkers(){if(this.settings.PruneOldWalkers||this.settings.PruneDistantWalkers)for(let[t,e]of this.bodies.entries())!e.stuck&&(this.settings.PruneOldWalkers&&e.age>this.settings.MaxAge||this.settings.PruneDistantWalkers&&this.p5.dist(e.x,e.y,e.originalX,e.originalY)>this.settings.MaxWanderDistance)&&(e.remove(),this.bodies.splice(t,1),this.numWalkers--)}createParticle(t){if(void 0===t||"object"!=typeof t)return;let e;if(t.hasOwnProperty("type"))switch(t.type){case"Point":(e=this.system.createPoint(Math.round(t.x),Math.round(t.y)))._point=!0;break;case"Circle":default:(e=this.system.createCircle(t.x,t.y,t.diameter/2))._circle=!0;break;case"Polygon":(e=this.system.createPolygon(t.x,t.y,t.polygon,t.hasOwnProperty("rotation")?this.p5.radians(t.rotation):0))._polygon=!0}else{const s=t.hasOwnProperty("diameter")?t.diameter:this.settings.CircleDiameter;(e=this.system.createCircle(t.x,t.y,s/2))._circle=!0}e.stuck=!!t.hasOwnProperty("stuck")&&t.stuck,e.age=0,t.hasOwnProperty("BiasTowards")&&(e.BiasTowards=t.BiasTowards),e.originalX=e.x,e.originalY=e.y,this.bodies.push(e)}createWalker(t){this.createParticle(t),this.numWalkers++}createDefaultWalkers(t=this.settings.MaxWalkers,e=this.settings.WalkerSource){for(let s=0;s<t;s++){let t={};switch(e){case"Edges":switch(Math.round(this.p5.random(1,4))){case 1:t.x=this.p5.random(this.edges.left+this.edgeMargin,this.edges.right-this.edgeMargin),t.y=this.p5.random(this.edges.top,this.edges.top+this.edgeMargin);break;case 3:t.x=this.p5.random(this.edges.left+this.edgeMargin,this.edges.right-this.edgeMargin),t.y=this.p5.random(this.edges.bottom-this.edgeMargin,this.edges.bottom);break;case 4:t.x=this.p5.random(this.edges.left,this.edges.left+this.edgeMargin),t.y=this.p5.random(this.edges.top,this.edges.bottom);break;case 2:t.x=this.p5.random(this.edges.right-this.edgeMargin,this.edges.right),t.y=this.p5.random(this.edges.top,this.edges.bottom)}break;case"Circle":let s=this.p5.random(5,80),i=this.p5.random(360),r=this.settings.hasOwnProperty("CircleCenter")?this.settings.CircleCenter:{x:window.innerWidth/2,y:window.innerHeight/2};t.x=r.x+s*Math.cos(i*Math.PI/180),t.y=r.y+s*Math.sin(i*Math.PI/180);break;case"Random":t.x=this.p5.random(this.edges.left,this.edges.right),t.y=this.p5.random(this.edges.top,this.edges.bottom);break;case"Center":t.x=window.innerWidth/2,t.y=window.innerHeight/2;break;case"Offscreen":if(t.x=this.p5.random(this.edges.left-200,this.edges.right+200),t.y=this.p5.random(this.edges.top-200,this.edges.bottom+200),t.x>this.edges.left&&t.x<this.edges.right&&t.y>this.edges.top&&t.y<this.edges.bottom)continue}if(this.settings.VaryDiameterByDistance){let e=this.p5.dist(t.x,t.y,window.innerWidth/2,window.innerHeight/2);t.diameter=this.p5.map(e,0,this.maxDistance,this.settings.CircleDiameterRange[0],this.settings.CircleDiameterRange[1])}this.createWalker(t)}}createDefaultClusters(t=this.settings.InitialClusterType){let e=[];switch(t){case"Point":e.push({x:window.innerWidth/2,y:window.innerHeight/2,diameter:this.settings.CircleDiameter});break;case"Ring":let s=100,i=20;for(let t=0;t<i;t++)e.push({x:window.innerWidth/2+s*Math.cos(360/i*t*Math.PI/180),y:window.innerHeight/2+s*Math.sin(360/i*t*Math.PI/180),diameter:this.settings.CircleDiameter});break;case"Random":for(let t=0;t<40;t++)e.push({x:this.p5.random(this.edges.left,this.edges.right),y:this.p5.random(this.edges.top,this.edges.bottom),diameter:this.settings.CircleDiameter});break;case"Wall":switch(this.settings.BiasTowards){case"Top":e=this.createHorizontalClusterWall(this.edges.top);break;case"Bottom":e=this.createHorizontalClusterWall(this.edges.bottom);break;case"Left":e=this.createVerticalClusterWall(this.edges.left);break;case"Right":e=this.createVerticalClusterWall(this.edges.right);break;case"Edges":e=(e=(e=(e=e.concat(this.createHorizontalClusterWall(this.edges.top))).concat(this.createHorizontalClusterWall(this.edges.bottom))).concat(this.createVerticalClusterWall(this.edges.left))).concat(this.createVerticalClusterWall(this.edges.right));break;case"Equator":e=e.concat(this.createHorizontalClusterWall(window.innerHeight/2));break;case"Meridian":e=e.concat(this.createVerticalClusterWall(window.innerWidth/2))}}this.createClusterFromParams(e)}createHorizontalClusterWall(t){let e=[],s=this.useFrame?this.edges.right-this.edges.left:window.innerWidth;for(let i=0;i<=s/this.settings.CircleDiameter;i++)e.push({x:this.edges.left+i*this.settings.CircleDiameter,y:t,diameter:this.settings.CircleDiameter});return e}createVerticalClusterWall(t){let e=[],s=this.useFrame?this.edges.bottom-this.edges.top:window.innerHeight;for(let i=0;i<=s/this.settings.CircleDiameter;i++)e.push({x:t,y:this.edges.top+i*this.settings.CircleDiameter,diameter:this.settings.CircleDiameter});return e}createClusterFromParams(t){if(t.length>0)for(let e of t)e.stuck=!0,this.createParticle(e)}createShapesFromPaths(t){if(t.hasOwnProperty("points")||0!=t.length)for(let e of t)if(e.solid){let t=this.system.createPolygon(e.x,e.y,e.points);t.solid=e.solid,t.closed=e.closed,this.shapes.push(t)}else for(let t=1;t<e.points.length;t++){let s=this.system.createPolygon(e.x,e.y,[[e.points[t-1][0],e.points[t-1][1]],[e.points[t][0],e.points[t][1]]]);s.solid=!1,s.closed=!1,this.shapes.push(s)}else console.error("Unable to create shapes. Paths must have an array of points [[x,y],...]")}removeAll(){for(let t of this.bodies)this.system.remove(t);for(let t of this.shapes)this.system.remove(t);this.bodies=[],this.shapes=[],this.lines=[],this.numWalkers=0}togglePause(){this.paused=!this.paused}toggleShowWalkers(){this.showWalkers=!this.showWalkers}toggleShowClusters(){this.showClusters=!this.showClusters}toggleShowShapes(){this.showShapes=!this.showShapes}toggleUseFrame(){this.useFrame=!this.useFrame,this.resetEdges()}toggleLineRenderingMode(){"Lines"!=this.renderMode?this.settings.CaptureLines?this.renderMode="Lines":console.error("Line rendering mode only allowed when CaptureLines is set."):this.renderMode="Shapes"}pause(){this.paused=!0}unpause(){this.paused=!1}getColorStringFromObject(t){return"hsla("+t.h+", "+t.s+"%, "+t.b+"%, "+t.a+")"}export(){let t=document.createElement("svg");switch(t.setAttribute("xmlns","http://www.w3.org/2000/svg"),t.setAttribute("xmlns:xlink","http://www.w3.org/1999/xlink"),t.setAttribute("width",window.innerWidth),t.setAttribute("height",window.innerHeight),t.setAttribute("viewBox","0 0 "+window.innerWidth+" "+window.innerHeight),this.renderMode){case"Shapes":default:for(let e of this.bodies)(e.stuck||this.showWalkers)&&(e._circle?t.appendChild(this.createCircleElFromBody(e)):t.appendChild(this.createPathElFromPoints(this.getPointsFromCoords(e._coords))));break;case"Lines":if(this.lines.length>0)for(let e of this.lines){let s=[];s.push({x:e.p1.x,y:e.p1.y}),s.push({x:e.p2.x,y:e.p2.y}),t.appendChild(this.createPathElFromPoints(s))}}if(this.shapes.length>0)for(let e of this.shapes)t.appendChild(this.createPathElFromPoints(this.getPointsFromCoords(e._coords)));let e=document.implementation.createDocumentType("svg","-//W3C//DTD SVG 1.1//EN","http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"),s=document.implementation.createDocument("http://www.w3.org/2000/svg","svg",e);s.replaceChild(t,s.documentElement);let i=(new XMLSerializer).serializeToString(s),r=new Blob([i.replace(/></g,">\n\r<")]);Object(H.saveAs)(r,"dla-"+Date.now()+".svg")}getPointsFromCoords(t){let e=[];for(let s=0;s<t.length-1;s+=2)e.push({x:t[s],y:t[s+1]});return e}createPathElFromPoints(t){let e="";for(let[s,i]of t.entries())e+=i.x+","+i.y,s<t.length-1&&(e+=" ");let s=A({type:"polyline",points:e}),i=document.createElement("path");return i.setAttribute("d",s),i.setAttribute("style","fill: none; stroke: black; stroke-width: 1"),i}createCircleElFromBody(t){let e=document.createElement("circle");return e.setAttribute("cx",t.x),e.setAttribute("cy",t.y),e.setAttribute("r",t.radius),e}}},13:function(t,e,s){"use strict";s.r(e);var i={CircleDiameter:5,ShowWalkers:!1},r=s(1);let n,o="Wall";new p5(function(t){function e(){n.removeAll(),n.createDefaultWalkers(),n.createDefaultClusters(o)}t.setup=function(){t.createCanvas(window.innerWidth,window.innerHeight),t.colorMode(t.HSB,255),t.ellipseMode(t.CENTER),(n=new r.a(t,i)).settings.BiasTowards="Bottom",n.createDefaultWalkers(),n.createDefaultClusters(o)},t.draw=function(){n.iterate(),n.draw()},t.keyReleased=function(){switch(t.key){case" ":n.togglePause();break;case"w":n.toggleShowWalkers();break;case"c":n.toggleShowClusters();break;case"r":e();break;case"f":n.toggleUseFrame(),e();break;case"l":n.toggleLineRenderingMode();break;case"e":n.export();break;case"1":n.pause(),o="Wall",n.settings.BiasTowards="Bottom",e(),n.unpause();break;case"2":n.pause(),o="Wall",n.settings.BiasTowards="Top",e(),n.unpause();break;case"3":n.pause(),o="Wall",n.settings.BiasTowards="Left",e(),n.unpause();break;case"4":n.pause(),o="Wall",n.settings.BiasTowards="Right",e(),n.unpause();break;case"5":n.pause(),o="Wall",n.settings.BiasTowards="Equator",e(),n.unpause();break;case"6":n.pause(),o="Wall",n.settings.BiasTowards="Meridian",e(),n.unpause();break;case"7":n.pause(),o="Wall",n.settings.BiasTowards="Edges",e(),n.unpause();break;case"8":n.pause(),o="Point",n.settings.BiasTowards="Center",e(),n.unpause()}}})},2:function(t,e){var s;s=function(){return this}();try{s=s||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(s=window)}t.exports=s}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4uL2NvcmUvbm9kZV9tb2R1bGVzL2ZpbGUtc2F2ZXIvZGlzdC9GaWxlU2F2ZXIubWluLmpzIiwid2VicGFjazovLy8uLi9jb3JlL0RlZmF1bHRzLmpzIiwid2VicGFjazovLy8uLi9jb3JlL25vZGVfbW9kdWxlcy9jb2xsaXNpb25zL3NyYy9tb2R1bGVzL0JWSEJyYW5jaC5tanMiLCJ3ZWJwYWNrOi8vLy4uL2NvcmUvbm9kZV9tb2R1bGVzL2NvbGxpc2lvbnMvc3JjL21vZHVsZXMvQlZILm1qcyIsIndlYnBhY2s6Ly8vLi4vY29yZS9ub2RlX21vZHVsZXMvY29sbGlzaW9ucy9zcmMvbW9kdWxlcy9SZXN1bHQubWpzIiwid2VicGFjazovLy8uLi9jb3JlL25vZGVfbW9kdWxlcy9jb2xsaXNpb25zL3NyYy9tb2R1bGVzL1NBVC5tanMiLCJ3ZWJwYWNrOi8vLy4uL2NvcmUvbm9kZV9tb2R1bGVzL2NvbGxpc2lvbnMvc3JjL21vZHVsZXMvQm9keS5tanMiLCJ3ZWJwYWNrOi8vLy4uL2NvcmUvbm9kZV9tb2R1bGVzL2NvbGxpc2lvbnMvc3JjL21vZHVsZXMvQ2lyY2xlLm1qcyIsIndlYnBhY2s6Ly8vLi4vY29yZS9ub2RlX21vZHVsZXMvY29sbGlzaW9ucy9zcmMvbW9kdWxlcy9Qb2x5Z29uLm1qcyIsIndlYnBhY2s6Ly8vLi4vY29yZS9ub2RlX21vZHVsZXMvY29sbGlzaW9ucy9zcmMvbW9kdWxlcy9Qb2ludC5tanMiLCJ3ZWJwYWNrOi8vLy4uL2NvcmUvbm9kZV9tb2R1bGVzL2NvbGxpc2lvbnMvc3JjL0NvbGxpc2lvbnMubWpzIiwid2VicGFjazovLy8uLi9jb3JlL25vZGVfbW9kdWxlcy9zdmctcG9pbnRzL21vZHVsZXMvdG9Qb2ludHMuanMiLCJ3ZWJwYWNrOi8vLy4uL2NvcmUvbm9kZV9tb2R1bGVzL3N2Zy1wb2ludHMvbW9kdWxlcy90b1BhdGguanMiLCJ3ZWJwYWNrOi8vLy4uL2NvcmUvbm9kZV9tb2R1bGVzL3N2Zy1wb2ludHMvbW9kdWxlcy92YWxpZC5qcyIsIndlYnBhY2s6Ly8vLi4vY29yZS9ETEEuanMiLCJ3ZWJwYWNrOi8vLy4uLzAyLWRpcmVjdGlvbmFsLWJpYXMvanMvU2V0dGluZ3MuanMiLCJ3ZWJwYWNrOi8vLy4uLzAyLWRpcmVjdGlvbmFsLWJpYXMvanMvZW50cnkuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsImdsb2JhbCIsIl9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXyIsIl9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18iLCJfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyIsInVuZGVmaW5lZCIsImIiLCJlIiwiWE1MSHR0cFJlcXVlc3QiLCJvcGVuIiwicmVzcG9uc2VUeXBlIiwib25sb2FkIiwiYSIsInJlc3BvbnNlIiwib25lcnJvciIsImNvbnNvbGUiLCJlcnJvciIsInNlbmQiLCJzdGF0dXMiLCJkaXNwYXRjaEV2ZW50IiwiTW91c2VFdmVudCIsImRvY3VtZW50IiwiY3JlYXRlRXZlbnQiLCJpbml0TW91c2VFdmVudCIsIndpbmRvdyIsImYiLCJzZWxmIiwic2F2ZUFzIiwiSFRNTEFuY2hvckVsZW1lbnQiLCJnIiwiaCIsIlVSTCIsIndlYmtpdFVSTCIsImoiLCJjcmVhdGVFbGVtZW50IiwiZG93bmxvYWQiLCJyZWwiLCJocmVmIiwib3JpZ2luIiwibG9jYXRpb24iLCJ0YXJnZXQiLCJjcmVhdGVPYmplY3RVUkwiLCJzZXRUaW1lb3V0IiwicmV2b2tlT2JqZWN0VVJMIiwibmF2aWdhdG9yIiwibXNTYXZlT3JPcGVuQmxvYiIsImF1dG9Cb20iLCJ3YXJuIiwidGVzdCIsInR5cGUiLCJCbG9iIiwidGl0bGUiLCJib2R5IiwiaW5uZXJUZXh0IiwiSFRNTEVsZW1lbnQiLCJzYWZhcmkiLCJ1c2VyQWdlbnQiLCJGaWxlUmVhZGVyIiwib25sb2FkZW5kIiwicmVzdWx0IiwicmVwbGFjZSIsInJlYWRBc0RhdGFVUkwiLCJrIiwiYXBwbHkiLCJEZWZhdWx0cyIsIkNpcmNsZURpYW1ldGVyIiwiSW5pdGlhbENsdXN0ZXJUeXBlIiwiV2Fsa2VyU291cmNlIiwiTWF4V2Fsa2VycyIsIkVkZ2VNYXJnaW4iLCJQcnVuZU9sZFdhbGtlcnMiLCJNYXhBZ2UiLCJSZXBsZW5pc2hXYWxrZXJzIiwiUHJ1bmVEaXN0YW50V2Fsa2VycyIsIk1heFdhbmRlckRpc3RhbmNlIiwiU2hvd0NsdXN0ZXJzIiwiU2hvd1dhbGtlcnMiLCJTaG93U2hhcGVzIiwiQmlhc1Rvd2FyZHMiLCJCaWFzRm9yY2UiLCJVc2VQZXJXYWxrZXJCaWFzIiwiVXNlRnJhbWUiLCJGcmFtZVNpemUiLCJDYXB0dXJlTGluZXMiLCJSZW5kZXJNb2RlIiwiVXNlU3Ryb2tlIiwiVXNlQ29sb3JzIiwiQmFja2dyb3VuZENvbG9yIiwiV2Fsa2VyQ29sb3IiLCJDbHVzdGVyQ29sb3IiLCJTaGFwZUNvbG9yIiwiTGluZUNvbG9yIiwiRnJhbWVDb2xvciIsImJyYW5jaF9wb29sIiwiQlZIQnJhbmNoIiwiW29iamVjdCBPYmplY3RdIiwidGhpcyIsIl9idmhfcGFyZW50IiwiX2J2aF9icmFuY2giLCJfYnZoX2xlZnQiLCJfYnZoX3JpZ2h0IiwiX2J2aF9zb3J0IiwiX2J2aF9taW5feCIsIl9idmhfbWluX3kiLCJfYnZoX21heF94IiwiX2J2aF9tYXhfeSIsImxlbmd0aCIsInBvcCIsImJyYW5jaCIsInB1c2giLCJzb3J0IiwiQlZIX0JWSCIsIl9oaWVyYXJjaHkiLCJfYm9kaWVzIiwiX2RpcnR5X2JyYW5jaGVzIiwidXBkYXRpbmciLCJidmgiLCJfYnZoIiwiRXJyb3IiLCJwb2x5Z29uIiwiX3BvbHlnb24iLCJib2R5X3giLCJ4IiwiYm9keV95IiwieSIsIl9kaXJ0eV9jb29yZHMiLCJfeCIsIl95IiwiYW5nbGUiLCJfYW5nbGUiLCJzY2FsZV94IiwiX3NjYWxlX3giLCJzY2FsZV95IiwiX3NjYWxlX3kiLCJfY2FsY3VsYXRlQ29vcmRzIiwicGFkZGluZyIsIl9idmhfcGFkZGluZyIsInJhZGl1cyIsInNjYWxlIiwiYm9keV9taW5feCIsIl9taW5feCIsImJvZHlfbWluX3kiLCJfbWluX3kiLCJib2R5X21heF94IiwiX21heF94IiwiYm9keV9tYXhfeSIsIl9tYXhfeSIsImN1cnJlbnQiLCJncmFuZHBhcmVudCIsInBhcmVudF9taW5feCIsInBhcmVudF9taW5feSIsInBhcmVudF9tYXhfeCIsInBhcmVudF9tYXhfeSIsIm5ld19wYXJlbnQiLCJnZXRCcmFuY2giLCJsZWZ0IiwibGVmdF9taW5feSIsImxlZnRfbWF4X3giLCJsZWZ0X21heF95IiwibGVmdF9uZXdfbWluX3giLCJsZWZ0X25ld19taW5feSIsImxlZnRfbmV3X21heF94IiwibGVmdF9uZXdfbWF4X3kiLCJsZWZ0X2RpZmZlcmVuY2UiLCJyaWdodCIsInJpZ2h0X21pbl94IiwicmlnaHRfbWluX3kiLCJyaWdodF9tYXhfeCIsInJpZ2h0X21heF95IiwicmlnaHRfbmV3X21pbl94IiwicmlnaHRfbmV3X21pbl95IiwicmlnaHRfbmV3X21heF94IiwicmlnaHRfbmV3X21heF95IiwicmlnaHRfZGlmZmVyZW5jZSIsInNwbGljZSIsImluZGV4T2YiLCJwYXJlbnQiLCJwYXJlbnRfbGVmdCIsInNpYmxpbmciLCJsZWZ0X21pbl94IiwicmVsZWFzZUJyYW5jaCIsImJvZGllcyIsImNvdW50IiwidXBkYXRlIiwibWluX3giLCJtaW5feSIsIm1heF94IiwibWF4X3kiLCJyZW1vdmUiLCJpbnNlcnQiLCJyZXN1bHRzIiwidHJhdmVyc2VfbGVmdCIsImNvbnRleHQiLCJkcmF3IiwibW92ZVRvIiwibGluZVRvIiwiUmVzdWx0IiwiY29sbGlzaW9uIiwiYV9pbl9iIiwib3ZlcmxhcCIsIm92ZXJsYXBfeCIsIm92ZXJsYXBfeSIsIlNBVCIsImFhYmIiLCJhX3BvbHlnb24iLCJiX3BvbHlnb24iLCJiX2luX2EiLCJhX3giLCJhX3kiLCJhX3JhZGl1cyIsImFfbWluX3giLCJhX21pbl95IiwiYV9tYXhfeCIsImFfbWF4X3kiLCJiX3giLCJiX3kiLCJiX3JhZGl1cyIsImJfbWluX3giLCJiX21pbl95IiwiYl9tYXhfeCIsImJfbWF4X3kiLCJhYWJiQUFCQiIsIl9kaXJ0eV9ub3JtYWxzIiwiX2NhbGN1bGF0ZU5vcm1hbHMiLCJhX2NvdW50IiwiX2Nvb3JkcyIsImJfY291bnQiLCJhX2Nvb3JkcyIsImJfY29vcmRzIiwiYV9ub3JtYWxzIiwiX25vcm1hbHMiLCJiX25vcm1hbHMiLCJpeCIsIml5Iiwic2VwYXJhdGluZ0F4aXMiLCJwb2x5Z29uUG9seWdvbiIsInBvbHlnb25DaXJjbGUiLCJkaWZmZXJlbmNlX3giLCJkaWZmZXJlbmNlX3kiLCJyYWRpdXNfc3VtIiwibGVuZ3RoX3NxdWFyZWQiLCJNYXRoIiwic3FydCIsImNpcmNsZUNpcmNsZSIsInJldmVyc2UiLCJhX2VkZ2VzIiwiX2VkZ2VzIiwiYl9yYWRpdXMyIiwicmFkaXVzX3NxdWFyZWQiLCJjb29yZF94IiwiY29vcmRfeSIsImVkZ2VfeCIsImVkZ2VfeSIsImRvdCIsInJlZ2lvbiIsInRtcF9vdmVybGFwcGluZyIsInRtcF9vdmVybGFwIiwidG1wX292ZXJsYXBfeCIsInRtcF9vdmVybGFwX3kiLCJvdGhlcl94Iiwib3RoZXJfeSIsImNvb3JkMl94IiwiY29vcmQyX3kiLCJlZGdlMl94IiwiZWRnZTJfeSIsImRvdDIiLCJ0YXJnZXRfeCIsInRhcmdldF95Iiwibm9ybWFsX3giLCJub3JtYWxfeSIsImFic29sdXRlX2xlbmd0aCIsImFfc3RhcnQiLCJhX2VuZCIsImJfc3RhcnQiLCJiX2VuZCIsIm9wdGlvbjEiLCJvcHRpb24yIiwiY3VycmVudF9vdmVybGFwIiwiYWJzb2x1dGVfb3ZlcmxhcCIsInNpZ24iLCJCb2R5X0JvZHkiLCJfY2lyY2xlIiwiX3BvaW50IiwicG90ZW50aWFscyIsIkNpcmNsZV9DaXJjbGUiLCJzdXBlciIsImFyYyIsIlBJIiwiUG9seWdvbl9Qb2x5Z29uIiwicG9pbnRzIiwiX3BvaW50cyIsInNldFBvaW50cyIsImNvb3JkcyIsIm5ld19wb2ludHMiLCJGbG9hdDY0QXJyYXkiLCJuZXdfcG9pbnQiLCJjb3MiLCJzaW4iLCJ0bXBfeCIsImVkZ2VzIiwibm9ybWFscyIsIm5leHQiLCJQb2ludF9Qb2ludCIsIkNvbGxpc2lvbnNfQ29sbGlzaW9ucyIsImRyYXdCVkgiLCJzb3VyY2UiLCJfZXh0ZW5kcyIsImFzc2lnbiIsImFyZ3VtZW50cyIsInRvUG9pbnRzIiwiX3JlZiIsInByb3BzIiwib2JqIiwia2V5cyIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsImdldFBvaW50c0Zyb21DaXJjbGUiLCJnZXRQb2ludHNGcm9tRWxsaXBzZSIsImdldFBvaW50c0Zyb21MaW5lIiwiZ2V0UG9pbnRzRnJvbVBhdGgiLCJnZXRQb2ludHNGcm9tUG9seWdvbiIsImdldFBvaW50c0Zyb21Qb2x5bGluZSIsImdldFBvaW50c0Zyb21SZWN0IiwiZ2V0UG9pbnRzRnJvbUciLCJfcmVmMiIsImN4IiwiY3kiLCJjdXJ2ZSIsInJ4IiwicnkiLCJzd2VlcEZsYWciLCJfcmVmMyIsIl9yZWY0IiwieDEiLCJ4MiIsInkxIiwieTIiLCJ2YWxpZENvbW1hbmRzIiwiY29tbWFuZExlbmd0aHMiLCJBIiwiQyIsIkgiLCJMIiwiTSIsIlEiLCJTIiwiVCIsIlYiLCJaIiwicmVsYXRpdmVDb21tYW5kcyIsImlzUmVsYXRpdmUiLCJjb21tYW5kIiwib3B0aW9uYWxBcmNLZXlzIiwiX3JlZjUiLCJjb21tYW5kcyIsIm1hdGNoIiwiZ2V0Q29tbWFuZHMiLCJwYXJhbXMiLCJzcGxpdCIsIm1hcCIsInYiLCJzbGljZSIsInRyaW0iLCJmaWx0ZXIiLCJwYXJzZUZsb2F0IiwiaXNOYU4iLCJnZXRQYXJhbXMiLCJ1cHBlckNhc2VDb21tYW5kIiwidG9VcHBlckNhc2UiLCJjb21tYW5kTGVuZ3RoIiwicmVsYXRpdmUiLCJjb21tYW5kUGFyYW1zIiwic2hpZnQiLCJpdGVyYXRpb25zIiwicHJldlBvaW50IiwieEF4aXNSb3RhdGlvbiIsImxhcmdlQXJjRmxhZyIsIl9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24iLCJfZGlkSXRlcmF0b3JFcnJvciIsIl9pdGVyYXRvckVycm9yIiwiX3N0ZXAiLCJfaXRlcmF0b3IiLCJpdGVyYXRvciIsImRvbmUiLCJlcnIiLCJyZXR1cm4iLCJzeDIiLCJzeTIiLCJzeCIsInN5IiwiZGlmZiIsInN4MSIsInN5MSIsImFicyIsInR4IiwidHkiLCJ0eDEiLCJ0eTEiLCJfZGlmZiIsIl9wcmV2UG9pbnQiLCJfcmVmNiIsImdldFBvaW50c0Zyb21Qb2ludHMiLCJjbG9zZWQiLCJfcmVmNyIsIl9yZWY4IiwicmVkdWNlIiwiYXJyIiwicG9pbnQiLCJfcmVmOSIsImhlaWdodCIsIndpZHRoIiwiZ2V0UG9pbnRzRnJvbVJlY3RXaXRoQ29ybmVyUmFkaXVzIiwiZ2V0UG9pbnRzRnJvbUJhc2ljUmVjdCIsIl9yZWYxMCIsIl9yZWYxMSIsIl9yZWYxMiIsInNoYXBlcyIsIm1vZHVsZXNfdG9Qb2ludHMiLCJwb2ludHNUb0QiLCJmaXJzdFBvaW50IiwiX3BvaW50JGN1cnZlIiwiaXNGaXJzdFBvaW50IiwiaXNMYXN0UG9pbnQiLCJfcG9pbnQkY3VydmUyIiwiX3BvaW50JGN1cnZlMiRsYXJnZUFyIiwiX3BvaW50JGN1cnZlMiRzd2VlcEZsIiwiX3BvaW50JGN1cnZlMiR4QXhpc1JvIiwiX3BvaW50JGN1cnZlMyIsIl9wb2ludCRjdXJ2ZTQiLCJtb2R1bGVzX3RvUGF0aCIsImlzUG9pbnRzIiwiQXJyYXkiLCJpc0FycmF5IiwiaXNHcm91cCIsInNocCIsIl9fd2VicGFja19leHBvcnRzX18iLCJETEFfRExBIiwicDUiLCJzZXR0aW5ncyIsInBhdXNlZCIsInNob3dXYWxrZXJzIiwic2hvd0NsdXN0ZXJzIiwic2hvd1NoYXBlcyIsInVzZUZyYW1lIiwicmVuZGVyTW9kZSIsIm51bVdhbGtlcnMiLCJjdXN0b21Nb3ZlbWVudEZ1bmN0aW9uIiwiZWRnZU1hcmdpbiIsImZyYW1lIiwiaW5uZXJXaWR0aCIsInRvcCIsImlubmVySGVpZ2h0IiwiYm90dG9tIiwicmVzZXRFZGdlcyIsIm1heERpc3RhbmNlIiwiZGlzdCIsInN5c3RlbSIsImxpbmVzIiwiY3JlYXRlRGVmYXVsdFdhbGtlcnMiLCJSZXBsZW5pc2htZW50U291cmNlIiwibW92ZVdhbGtlcnMiLCJoYW5kbGVDb2xsaXNpb25zIiwicHJ1bmVXYWxrZXJzIiwiYmFja2dyb3VuZCIsImdldENvbG9yU3RyaW5nRnJvbU9iamVjdCIsInNoYXBlIiwiZmlsbCIsInN0cm9rZSIsIm5vRmlsbCIsImJlZ2luU2hhcGUiLCJ2ZXJ0ZXgiLCJlbmRTaGFwZSIsImxpbmUiLCJwMSIsInAyIiwic3R1Y2siLCJub1N0cm9rZSIsImVsbGlwc2UiLCJkcmF3RnJhbWUiLCJyZWN0IiwiZGVsdGFzIiwiZGVsdGFYIiwicmFuZG9tIiwiZGVsdGFZIiwiZ2V0RGVsdGFzVG93YXJkcyIsIkZ1bmN0aW9uIiwiZHgiLCJkeSIsInJvdW5kIiwiYWdlIiwiYm9keVgiLCJib2R5WSIsInRhcmdldFgiLCJ0YXJnZXRZIiwiYXRhbjIiLCJzZWNvbmRCb2R5IiwiY29sbGlkZXMiLCJpbmRleCIsImVudHJpZXMiLCJvcmlnaW5hbFgiLCJvcmlnaW5hbFkiLCJjcmVhdGVQb2ludCIsImNyZWF0ZUNpcmNsZSIsImRpYW1ldGVyIiwiY3JlYXRlUG9seWdvbiIsInJhZGlhbnMiLCJyb3RhdGlvbiIsImNyZWF0ZVBhcnRpY2xlIiwiY2VudGVyIiwiQ2lyY2xlQ2VudGVyIiwiVmFyeURpYW1ldGVyQnlEaXN0YW5jZSIsIkNpcmNsZURpYW1ldGVyUmFuZ2UiLCJjcmVhdGVXYWxrZXIiLCJjbHVzdGVyVHlwZSIsInBhcmFtc0xpc3QiLCJudW1QYXJ0aWNsZXMiLCJjcmVhdGVIb3Jpem9udGFsQ2x1c3RlcldhbGwiLCJjcmVhdGVWZXJ0aWNhbENsdXN0ZXJXYWxsIiwiY29uY2F0IiwiY3JlYXRlQ2x1c3RlckZyb21QYXJhbXMiLCJ5UG9zIiwieFBvcyIsInBhdGhzIiwicGF0aCIsInNvbGlkIiwiY29sb3JPYmplY3QiLCJzdmciLCJzZXRBdHRyaWJ1dGUiLCJhcHBlbmRDaGlsZCIsImNyZWF0ZUNpcmNsZUVsRnJvbUJvZHkiLCJjcmVhdGVQYXRoRWxGcm9tUG9pbnRzIiwiZ2V0UG9pbnRzRnJvbUNvb3JkcyIsInN2Z0RvY1R5cGUiLCJpbXBsZW1lbnRhdGlvbiIsImNyZWF0ZURvY3VtZW50VHlwZSIsInN2Z0RvYyIsImNyZWF0ZURvY3VtZW50IiwicmVwbGFjZUNoaWxkIiwiZG9jdW1lbnRFbGVtZW50Iiwic3ZnRGF0YSIsIlhNTFNlcmlhbGl6ZXIiLCJzZXJpYWxpemVUb1N0cmluZyIsImJsb2IiLCJGaWxlU2F2ZXJfbWluIiwiRGF0ZSIsIm5vdyIsInBvaW50c1N0cmluZyIsInBhdGhFbCIsImNpcmNsZUVsIiwiU2V0dGluZ3MiLCJkbGEiLCJjdXJyZW50Q2x1c3RlclR5cGUiLCJyZXNldCIsInJlbW92ZUFsbCIsImNyZWF0ZURlZmF1bHRDbHVzdGVycyIsInNldHVwIiwiY3JlYXRlQ2FudmFzIiwiY29sb3JNb2RlIiwiSFNCIiwiZWxsaXBzZU1vZGUiLCJDRU5URVIiLCJETEEiLCJpdGVyYXRlIiwia2V5UmVsZWFzZWQiLCJ0b2dnbGVQYXVzZSIsInRvZ2dsZVNob3dXYWxrZXJzIiwidG9nZ2xlU2hvd0NsdXN0ZXJzIiwidG9nZ2xlVXNlRnJhbWUiLCJ0b2dnbGVMaW5lUmVuZGVyaW5nTW9k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UUFDQXJCLEVBQUFvQixRQUNBbkIsRUFBQSxPQUNBRCxFQUFBaEgsU0FBQXZXLFlBQUEsUUFDQXlkLElBQ0FGLEVBQUFxQixVQUNBLE1BRUEsUUFDQXJCLEVBQUFvQixRQUNBbkIsRUFBQSxPQUNBRCxFQUFBaEgsU0FBQXZXLFlBQUEsVUFDQXlkLElBQ0FGLEVBQUFxQixVQUNBLE1BRUEsUUFDQXJCLEVBQUFvQixRQUNBbkIsRUFBQSxPQUNBRCxFQUFBaEgsU0FBQXZXLFlBQUEsV0FDQXlkLElBQ0FGLEVBQUFxQixVQUNBLE1BRUEsUUFDQXJCLEVBQUFvQixRQUNBbkIsRUFBQSxPQUNBRCxFQUFBaEgsU0FBQXZXLFlBQUEsUUFDQXlkLElBQ0FGLEVBQUFxQixVQUNBLE1BRUEsUUFDQXJCLEVBQUFvQixRQUNBbkIsRUFBQSxRQUNBRCxFQUFBaEgsU0FBQXZXLFlBQUEsU0FDQXlkLElBQ0FGLEVBQUFxQiwrQkMvSEEsSUFBQTdoQixFQUdBQSxFQUFBLFdBQ0EsT0FBQW1FLEtBREEsR0FJQSxJQUVBbkUsS0FBQXVjLFNBQUEsY0FBQUEsS0FBQSxFQUFBdUYsTUFBQSxRQUNDLE1BQUFwakIsR0FFRCxpQkFBQWlCLFNBQUFLLEVBQUFMLFFBT0F4RCxFQUFBRCxRQUFBOEQiLCJmaWxlIjoiZGlyZWN0aW9uYWxCaWFzLmJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAxMyk7XG4iLCIoZnVuY3Rpb24oYSxiKXtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQpZGVmaW5lKFtdLGIpO2Vsc2UgaWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGV4cG9ydHMpYigpO2Vsc2V7YigpLGEuRmlsZVNhdmVyPXtleHBvcnRzOnt9fS5leHBvcnRzfX0pKHRoaXMsZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBiKGEsYil7cmV0dXJuXCJ1bmRlZmluZWRcIj09dHlwZW9mIGI/Yj17YXV0b0JvbTohMX06XCJvYmplY3RcIiE9dHlwZW9mIGImJihjb25zb2xlLndhcm4oXCJEZXByaWNhdGVkOiBFeHBlY3RlZCB0aGlyZCBhcmd1bWVudCB0byBiZSBhIG9iamVjdFwiKSxiPXthdXRvQm9tOiFifSksYi5hdXRvQm9tJiYvXlxccyooPzp0ZXh0XFwvXFxTKnxhcHBsaWNhdGlvblxcL3htbHxcXFMqXFwvXFxTKlxcK3htbClcXHMqOy4qY2hhcnNldFxccyo9XFxzKnV0Zi04L2kudGVzdChhLnR5cGUpP25ldyBCbG9iKFtcIlxcdUZFRkZcIixhXSx7dHlwZTphLnR5cGV9KTphfWZ1bmN0aW9uIGMoYixjLGQpe3ZhciBlPW5ldyBYTUxIdHRwUmVxdWVzdDtlLm9wZW4oXCJHRVRcIixiKSxlLnJlc3BvbnNlVHlwZT1cImJsb2JcIixlLm9ubG9hZD1mdW5jdGlvbigpe2EoZS5yZXNwb25zZSxjLGQpfSxlLm9uZXJyb3I9ZnVuY3Rpb24oKXtjb25zb2xlLmVycm9yKFwiY291bGQgbm90IGRvd25sb2FkIGZpbGVcIil9LGUuc2VuZCgpfWZ1bmN0aW9uIGQoYSl7dmFyIGI9bmV3IFhNTEh0dHBSZXF1ZXN0O3JldHVybiBiLm9wZW4oXCJIRUFEXCIsYSwhMSksYi5zZW5kKCksMjAwPD1iLnN0YXR1cyYmMjk5Pj1iLnN0YXR1c31mdW5jdGlvbiBlKGEpe3RyeXthLmRpc3BhdGNoRXZlbnQobmV3IE1vdXNlRXZlbnQoXCJjbGlja1wiKSl9Y2F0Y2goYyl7dmFyIGI9ZG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJNb3VzZUV2ZW50c1wiKTtiLmluaXRNb3VzZUV2ZW50KFwiY2xpY2tcIiwhMCwhMCx3aW5kb3csMCwwLDAsODAsMjAsITEsITEsITEsITEsMCxudWxsKSxhLmRpc3BhdGNoRXZlbnQoYil9fXZhciBmPVwib2JqZWN0XCI9PXR5cGVvZiB3aW5kb3cmJndpbmRvdy53aW5kb3c9PT13aW5kb3c/d2luZG93Olwib2JqZWN0XCI9PXR5cGVvZiBzZWxmJiZzZWxmLnNlbGY9PT1zZWxmP3NlbGY6XCJvYmplY3RcIj09dHlwZW9mIGdsb2JhbCYmZ2xvYmFsLmdsb2JhbD09PWdsb2JhbD9nbG9iYWw6dm9pZCAwLGE9Zi5zYXZlQXN8fFwib2JqZWN0XCIhPXR5cGVvZiB3aW5kb3d8fHdpbmRvdyE9PWY/ZnVuY3Rpb24oKXt9OlwiZG93bmxvYWRcImluIEhUTUxBbmNob3JFbGVtZW50LnByb3RvdHlwZT9mdW5jdGlvbihiLGcsaCl7dmFyIGk9Zi5VUkx8fGYud2Via2l0VVJMLGo9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIik7Zz1nfHxiLm5hbWV8fFwiZG93bmxvYWRcIixqLmRvd25sb2FkPWcsai5yZWw9XCJub29wZW5lclwiLFwic3RyaW5nXCI9PXR5cGVvZiBiPyhqLmhyZWY9YixqLm9yaWdpbj09PWxvY2F0aW9uLm9yaWdpbj9lKGopOmQoai5ocmVmKT9jKGIsZyxoKTplKGosai50YXJnZXQ9XCJfYmxhbmtcIikpOihqLmhyZWY9aS5jcmVhdGVPYmplY3RVUkwoYiksc2V0VGltZW91dChmdW5jdGlvbigpe2kucmV2b2tlT2JqZWN0VVJMKGouaHJlZil9LDRFNCksc2V0VGltZW91dChmdW5jdGlvbigpe2Uoail9LDApKX06XCJtc1NhdmVPck9wZW5CbG9iXCJpbiBuYXZpZ2F0b3I/ZnVuY3Rpb24oZixnLGgpe2lmKGc9Z3x8Zi5uYW1lfHxcImRvd25sb2FkXCIsXCJzdHJpbmdcIiE9dHlwZW9mIGYpbmF2aWdhdG9yLm1zU2F2ZU9yT3BlbkJsb2IoYihmLGgpLGcpO2Vsc2UgaWYoZChmKSljKGYsZyxoKTtlbHNle3ZhciBpPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhXCIpO2kuaHJlZj1mLGkudGFyZ2V0PVwiX2JsYW5rXCIsc2V0VGltZW91dChmdW5jdGlvbigpe2UoaSl9KX19OmZ1bmN0aW9uKGEsYixkLGUpe2lmKGU9ZXx8b3BlbihcIlwiLFwiX2JsYW5rXCIpLGUmJihlLmRvY3VtZW50LnRpdGxlPWUuZG9jdW1lbnQuYm9keS5pbm5lclRleHQ9XCJkb3dubG9hZGluZy4uLlwiKSxcInN0cmluZ1wiPT10eXBlb2YgYSlyZXR1cm4gYyhhLGIsZCk7dmFyIGc9XCJhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW1cIj09PWEudHlwZSxoPS9jb25zdHJ1Y3Rvci9pLnRlc3QoZi5IVE1MRWxlbWVudCl8fGYuc2FmYXJpLGk9L0NyaU9TXFwvW1xcZF0rLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO2lmKChpfHxnJiZoKSYmXCJvYmplY3RcIj09dHlwZW9mIEZpbGVSZWFkZXIpe3ZhciBqPW5ldyBGaWxlUmVhZGVyO2oub25sb2FkZW5kPWZ1bmN0aW9uKCl7dmFyIGE9ai5yZXN1bHQ7YT1pP2E6YS5yZXBsYWNlKC9eZGF0YTpbXjtdKjsvLFwiZGF0YTphdHRhY2htZW50L2ZpbGU7XCIpLGU/ZS5sb2NhdGlvbi5ocmVmPWE6bG9jYXRpb249YSxlPW51bGx9LGoucmVhZEFzRGF0YVVSTChhKX1lbHNle3ZhciBrPWYuVVJMfHxmLndlYmtpdFVSTCxsPWsuY3JlYXRlT2JqZWN0VVJMKGEpO2U/ZS5sb2NhdGlvbj1sOmxvY2F0aW9uLmhyZWY9bCxlPW51bGwsc2V0VGltZW91dChmdW5jdGlvbigpe2sucmV2b2tlT2JqZWN0VVJMKGwpfSw0RTQpfX07Zi5zYXZlQXM9YS5zYXZlQXM9YSxcInVuZGVmaW5lZFwiIT10eXBlb2YgbW9kdWxlJiYobW9kdWxlLmV4cG9ydHM9YSl9KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RmlsZVNhdmVyLm1pbi5qcy5tYXAiLCIvKiogQG1vZHVsZSBEZWZhdWx0cyAqL1xyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgLyoqIFxyXG4gICAqIERpYW1ldGVyIG9mIGFsbCBwYXJ0aWNsZXMgXHJcbiAgICogQHR5cGUge251bWJlcn1cclxuICAgKi8gXHJcbiAgQ2lyY2xlRGlhbWV0ZXI6IDUsXHJcblxyXG4gIC8qKlxyXG4gICAqIEluaXRpYWwgY2x1c3RlciBwYXR0ZXJuLCBpZiBub25lIGlzIHByb3ZpZGVkIHRocm91Z2ggbG9jYWwgU2V0dGluZ3NcclxuICAgKiBAdHlwZSB7c3RyaW5nfSxcclxuICAgKi9cclxuICBJbml0aWFsQ2x1c3RlclR5cGU6ICdSYW5kb20nLFxyXG5cclxuICAvKipcclxuICAgKiBMb2NhdGlvbiBvZiBuZXcgd2Fsa2Vyc1xyXG4gICAqIEB0eXBlIHtzdHJpbmd9XHJcbiAgICovXHJcbiAgV2Fsa2VyU291cmNlOiAnUmFuZG9tJyxcclxuXHJcbiAgLyoqXHJcbiAgICogTnVtYmVyIG9mIHdhbGtlcnMgYWxsb3dlZCBpbiBlYWNoIGl0ZXJhdGlvblxyXG4gICAqIEB0eXBlIHtudW1iZXJ9XHJcbiAgICovXHJcbiAgTWF4V2Fsa2VyczogNTAwMCxcclxuXHJcbiAgLyoqXHJcbiAgICogRGlzdGFuY2UgdG8gZWRnZXMgdG8gc3Bhd24gbmV3IHdhbGtlcnMgd2l0aGluIHdoZW4gdXNpbmcgJ0VkZ2VzJyBmb3IgV2Fsa2VyU291cmNlXHJcbiAgICogQHR5cGUge251bWJlcn1cclxuICAgKi9cclxuICBFZGdlTWFyZ2luOiAwLFxyXG5cclxuXHJcbiAgLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICAvLyAgUFJVTklORyBCRUhBVklPUlNcclxuICAvLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAvKipcclxuICAgKiBSZW1vdmUgd2Fsa2VycyB0aGF0IGhhdmUgYmVlbiB3YW5kZXJpbmcgYXJvdW5kIHRvbyBtdWNoXHJcbiAgICogQHR5cGUge2Jvb2xlYW59XHJcbiAgICovXHJcbiAgUHJ1bmVPbGRXYWxrZXJzOiBmYWxzZSxcclxuXHJcbiAgLyoqXHJcbiAgICogTWF4aW11bSB3YWxrZXIgYWdlIGJlZm9yZSBpdCBpcyByZW1vdmVkLCBpZiBgUHJ1bmVPbGRXYWxrZXJzYCBpcyBgdHJ1ZWAsIGluIG51bWJlcnMgb2YgaXRlcmF0aW9uc1xyXG4gICAqIEB0eXBlIHtudW1iZXJ9XHJcbiAgICovXHJcbiAgTWF4QWdlOiAzMCxcclxuICBcclxuICAvKipcclxuICAgKiBTcGF3biBuZXcgd2Fsa2VycyB3aGVuIG9sZCBvbmVzIGFyZSBjb252ZXJ0ZWQgaW50byBjbHVzdGVyZWQgcGFydGljbGVzIG9yIHBydW5lZFxyXG4gICAqIEB0eXBlIHtib29sZWFufVxyXG4gICAqL1xyXG4gIFJlcGxlbmlzaFdhbGtlcnM6IGZhbHNlLFxyXG5cclxuICAvKipcclxuICAgKiBSZW1vdmUgd2Fsa2VycyB0aGF0IGhhdmUgc3RyYXllZCB0b28gZmFyIGZyb20gdGhlaXIgb3JpZ2luYWwgcG9zaXRpb25zXHJcbiAgICogQHR5cGUge2Jvb2xlYW59XHJcbiAgICovXHJcbiAgUHJ1bmVEaXN0YW50V2Fsa2VyczogZmFsc2UsXHJcblxyXG4gIC8qKlxyXG4gICAqIE1heGltdW0gZGlzdGFuY2UgYmVmb3JlIGEgd2Fsa2VyIGlzIHJlbW92ZWQsIGlmIGBQcnVuZURpc3RhbnRXYWxrZXJzYCBpcyBlbmFibGVkXHJcbiAgICogQHR5cGUge251bWJlcn1cclxuICAgKi9cclxuICBNYXhXYW5kZXJEaXN0YW5jZTogMjAsXHJcblxyXG5cclxuICAvLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gIC8vICBWSVNJQklMSVRZIE9GIE9CSkVDVFNcclxuICAvLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAvKipcclxuICAgKiBWaXNpYmlsaXR5IG9mIGNsdXN0ZXJlZCBwYXJ0aWNsZXNcclxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cclxuICAgKi9cclxuICBTaG93Q2x1c3RlcnM6IHRydWUsXHJcbiAgXHJcbiAgLyoqXHJcbiAgICogVmlzaWJpbGl0eSBvZiB3YWxrZXJzXHJcbiAgICogQHR5cGUge2Jvb2xlYW59XHJcbiAgICovXHJcbiAgU2hvd1dhbGtlcnM6IHRydWUsXHJcblxyXG4gIC8qKlxyXG4gICAqIFZpc2liaWxpdHkgb2YgaW1wb3J0ZWQgc2hhcGVzXHJcbiAgICogQHR5cGUge2Jvb2xlYW59XHJcbiAgICovXHJcbiAgU2hvd1NoYXBlczogdHJ1ZSxcclxuXHJcblxyXG4gIC8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgLy8gIEJJQVMgRUZGRUNUXHJcbiAgLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gXHJcblxyXG4gIC8qKlxyXG4gICAqIERpcmVjdGlvbiB0byBtb3ZlIGFsbCB3YWxrZXJzIGVhY2ggaXRlcmF0aW9uLiBDYW4gYmUgVG9wLCBCb3R0b20sIExlZnQsIFJpZ2h0LCBDZW50ZXIsIEVkZ2VzLCBFcXVhdG9yLCBvciBNZXJpZGlhbi4gQWxsIG90aGVyIHZhbHVlcywgaW5jbHVkaW5nIG5vdGhpbmcsIGRpc2FibGUgYmlhc1xyXG4gICAqIEB0eXBlIHtzdHJpbmd9XHJcbiAgICovXHJcbiAgQmlhc1Rvd2FyZHM6ICcnLFxyXG5cclxuICAvKipcclxuICAgKiBNYWduaXR1ZGUgb2Ygd2Fsa2VyIGJpYXMgZm9yY2UuIEhpZ2hlciB2YWx1ZXMgbWVhbiBmYXN0ZXIgbW92ZW1lbnQuXHJcbiAgICogQHR5cGUge251bWJlcn1cclxuICAgKi9cclxuICBCaWFzRm9yY2U6IDEsXHJcblxyXG4gIC8qKlxyXG4gICAqIEVuYWJsZSBlYWNoIHdhbGtlciB0byBoYXZlIGl0J3Mgb3duIGJpYXMgdG93YXJkcyBhIHBvaW50XHJcbiAgICogQHR5cGUge2Jvb2xlYW59XHJcbiAgICovXHJcbiAgVXNlUGVyV2Fsa2VyQmlhczogdHJ1ZSxcclxuXHJcblxyXG4gIC8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgLy8gIEZSQU1FXHJcbiAgLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gXHJcblxyXG4gIC8qKlxyXG4gICAqIENvbnN0cmFpbiBza2V0Y2ggdG8gYSBib3ggY2VudGVyZWQgb24gdGhlIHNjcmVlblxyXG4gICAqIEB0eXBlIHtib29sZWFufVxyXG4gICAqL1xyXG4gIFVzZUZyYW1lOiB0cnVlLFxyXG5cclxuICAvKipcclxuICAgKiBTaXplIG9mIGZyYW1lLiBDYW4gYmUgYSBzaW5nbGUgbnVtYmVyLCBvciBhbiBhcnJheSBvZiB0d28gbnVtYmVycyBmb3Igd2lkdGggYW5kIGhlaWdodFxyXG4gICAqIEB0eXBlIHtudW1iZXJ9XHJcbiAgICovXHJcbiAgRnJhbWVTaXplOiA5MDAsXHJcblxyXG5cclxuICAvLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gIC8vICBSRU5ERVJJTkcgRUZGRUNUU1xyXG4gIC8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IFxyXG5cclxuICAvKipcclxuICAgKiBFbmFibGUgdGhlIGdlbmVyYXRpb24gb2YgbGluZXMgYmV0d2VlbiBuZXdseS1jbHVzdGVyZWQgcGFydGljbGVzLiBSZXF1aXJlZCBmb3IgXCJMaW5lc1wiIHJlbmRlciBtb2RlLiBDYW4gYmUgZGlzYWJsZWQgZm9yIHBlcmZvcm1hbmNlIGlmIG5lZWRlZC5cclxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cclxuICAgKi9cclxuICBDYXB0dXJlTGluZXM6IHRydWUsXHJcblxyXG4gIC8qKlxyXG4gICAqIERyYXdpbmcgbWV0aG9kLiBDYW4gYmUgYFNoYXBlc2Agb3IgYExpbmVzYC5cclxuICAgKiBAdHlwZSB7c3RyaW5nfVxyXG4gICAqL1xyXG4gIFJlbmRlck1vZGU6ICdTaGFwZXMnLFxyXG5cclxuICAvKipcclxuICAgKiBEcmF3IHN0cm9rZSBhcm91bmQgY2lyY2xlcy9wb2x5Z29uc1xyXG4gICAqIEB0eXBlIHtib29sZWFufVxyXG4gICAqL1xyXG4gIFVzZVN0cm9rZTogZmFsc2UsXHJcblxyXG5cclxuICAvLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gIC8vICBDT0xPUlNcclxuICAvLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAvKipcclxuICAgKiBBcHBseSB0aGUgY29sb3JzIGRlZmluZWQgYmVsb3cuIGBmYWxzZWAgbWVhbnMgYmxhY2sgYW5kIHdoaXRlIG9ubHkuXHJcbiAgICogQHR5cGUge2Jvb2xlYW59XHJcbiAgICovXHJcbiAgVXNlQ29sb3JzOiBmYWxzZSxcclxuXHJcbiAgLyoqXHJcbiAgICogQ2FudmFzIGJhY2tncm91bmQgY29sb3JcclxuICAgKiBAdHlwZSB7b2JqZWN0fVxyXG4gICAqL1xyXG4gIEJhY2tncm91bmRDb2xvcjoge1xyXG4gICAgaDogMjMwLFxyXG4gICAgczogMjAsXHJcbiAgICBiOiA0MFxyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIENvbG9yIG9mIHJhbmRvbWx5LW1vdmluZyBwYXJ0aWNsZXMgKHdhbGtlcnMpLCB3aGVuIHZpc2libGVcclxuICAgKiBAdHlwZSB7b2JqZWN0fVxyXG4gICAqL1xyXG4gIFdhbGtlckNvbG9yOiB7XHJcbiAgICBoOiAyMDAsXHJcbiAgICBzOiAzMCxcclxuICAgIGI6IDQ0XHJcbiAgfSxcclxuICBcclxuICAvKipcclxuICAgKiBDb2xvciBvZiBjbHVzdGVyZWQgcGFydGljbGVzLCB3aGVuIHZpc2libGVcclxuICAgKiBAdHlwZSB7b2JqZWN0fVxyXG4gICAqL1xyXG4gIENsdXN0ZXJDb2xvcjoge1xyXG4gICAgaDogMzAsXHJcbiAgICBzOiA3MCxcclxuICAgIGI6IDgwICBcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBDb2xvciBvZiBjdXN0b20gaW1wb3J0ZWQgU1ZHIHNoYXBlcywgd2hlbiB2aXNpYmxlXHJcbiAgICogQHR5cGUge29iamVjdH1cclxuICAgKi9cclxuICBTaGFwZUNvbG9yOiB7XHJcbiAgICBoOiAxMDAsXHJcbiAgICBzOiA1MCxcclxuICAgIGI6IDgwXHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogQ29sb3Igb2YgbGluZXMgd2hlbiBSZW5kZXJNb2RlIGlzIHNldCB0byAnTGluZXMnXHJcbiAgICogQHR5cGUge29iamVjdH1cclxuICAgKi9cclxuICBMaW5lQ29sb3I6IHtcclxuICAgIGg6IDEwLFxyXG4gICAgczogNzAsXHJcbiAgICBiOiAxMDBcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBDb2xvciBvZiBib3VuZGluZyBmcmFtZSwgd2hlbiBlbmFibGVkXHJcbiAgICogQHR5cGUge29iamVjdH1cclxuICAgKi9cclxuICBGcmFtZUNvbG9yOiB7XHJcbiAgICBoOiAwLFxyXG4gICAgczogMTAwLFxyXG4gICAgYjogMTAwXHJcbiAgfVxyXG4gIFxyXG59OyIsIi8qKlxuICogQHByaXZhdGVcbiAqL1xuY29uc3QgYnJhbmNoX3Bvb2wgPSBbXTtcblxuLyoqXG4gKiBBIGJyYW5jaCB3aXRoaW4gYSBCVkhcbiAqIEBjbGFzc1xuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQlZIQnJhbmNoIHtcblx0LyoqXG5cdCAqIEBjb25zdHJ1Y3RvclxuXHQgKi9cblx0Y29uc3RydWN0b3IoKSB7XG5cdFx0LyoqIEBwcml2YXRlICovXG5cdFx0dGhpcy5fYnZoX3BhcmVudCA9IG51bGw7XG5cblx0XHQvKiogQHByaXZhdGUgKi9cblx0XHR0aGlzLl9idmhfYnJhbmNoID0gdHJ1ZTtcblxuXHRcdC8qKiBAcHJpdmF0ZSAqL1xuXHRcdHRoaXMuX2J2aF9sZWZ0ID0gbnVsbDtcblxuXHRcdC8qKiBAcHJpdmF0ZSAqL1xuXHRcdHRoaXMuX2J2aF9yaWdodCA9IG51bGw7XG5cblx0XHQvKiogQHByaXZhdGUgKi9cblx0XHR0aGlzLl9idmhfc29ydCA9IDA7XG5cblx0XHQvKiogQHByaXZhdGUgKi9cblx0XHR0aGlzLl9idmhfbWluX3ggPSAwO1xuXG5cdFx0LyoqIEBwcml2YXRlICovXG5cdFx0dGhpcy5fYnZoX21pbl95ID0gMDtcblxuXHRcdC8qKiBAcHJpdmF0ZSAqL1xuXHRcdHRoaXMuX2J2aF9tYXhfeCA9IDA7XG5cblx0XHQvKiogQHByaXZhdGUgKi9cblx0XHR0aGlzLl9idmhfbWF4X3kgPSAwO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYSBicmFuY2ggZnJvbSB0aGUgYnJhbmNoIHBvb2wgb3IgY3JlYXRlcyBhIG5ldyBicmFuY2hcblx0ICogQHJldHVybnMge0JWSEJyYW5jaH1cblx0ICovXG5cdHN0YXRpYyBnZXRCcmFuY2goKSB7XG5cdFx0aWYoYnJhbmNoX3Bvb2wubGVuZ3RoKSB7XG5cdFx0XHRyZXR1cm4gYnJhbmNoX3Bvb2wucG9wKCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG5ldyBCVkhCcmFuY2goKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZWxlYXNlcyBhIGJyYW5jaCBiYWNrIGludG8gdGhlIGJyYW5jaCBwb29sXG5cdCAqIEBwYXJhbSB7QlZIQnJhbmNofSBicmFuY2ggVGhlIGJyYW5jaCB0byByZWxlYXNlXG5cdCAqL1xuXHRzdGF0aWMgcmVsZWFzZUJyYW5jaChicmFuY2gpIHtcblx0XHRicmFuY2hfcG9vbC5wdXNoKGJyYW5jaCk7XG5cdH1cblxuXHQvKipcblx0ICogU29ydGluZyBjYWxsYmFjayB1c2VkIHRvIHNvcnQgYnJhbmNoZXMgYnkgZGVlcGVzdCBmaXJzdFxuXHQgKiBAcGFyYW0ge0JWSEJyYW5jaH0gYSBUaGUgZmlyc3QgYnJhbmNoXG5cdCAqIEBwYXJhbSB7QlZIQnJhbmNofSBiIFRoZSBzZWNvbmQgYnJhbmNoXG5cdCAqIEByZXR1cm5zIHtOdW1iZXJ9XG5cdCAqL1xuXHRzdGF0aWMgc29ydEJyYW5jaGVzKGEsIGIpIHtcblx0XHRyZXR1cm4gYS5zb3J0ID4gYi5zb3J0ID8gLTEgOiAxO1xuXHR9XG59O1xuIiwiaW1wb3J0IEJWSEJyYW5jaCBmcm9tICcuL0JWSEJyYW5jaC5tanMnO1xuXG4vKipcbiAqIEEgQm91bmRpbmcgVm9sdW1lIEhpZXJhcmNoeSAoQlZIKSB1c2VkIHRvIGZpbmQgcG90ZW50aWFsIGNvbGxpc2lvbnMgcXVpY2tseVxuICogQGNsYXNzXG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCVkgge1xuXHQvKipcblx0ICogQGNvbnN0cnVjdG9yXG5cdCAqL1xuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHQvKiogQHByaXZhdGUgKi9cblx0XHR0aGlzLl9oaWVyYXJjaHkgPSBudWxsO1xuXG5cdFx0LyoqIEBwcml2YXRlICovXG5cdFx0dGhpcy5fYm9kaWVzID0gW107XG5cblx0XHQvKiogQHByaXZhdGUgKi9cblx0XHR0aGlzLl9kaXJ0eV9icmFuY2hlcyA9IFtdO1xuXHR9XG5cblx0LyoqXG5cdCAqIEluc2VydHMgYSBib2R5IGludG8gdGhlIEJWSFxuXHQgKiBAcGFyYW0ge0NpcmNsZXxQb2x5Z29ufFBvaW50fSBib2R5IFRoZSBib2R5IHRvIGluc2VydFxuXHQgKiBAcGFyYW0ge0Jvb2xlYW59IFt1cGRhdGluZyA9IGZhbHNlXSBTZXQgdG8gdHJ1ZSBpZiB0aGUgYm9keSBhbHJlYWR5IGV4aXN0cyBpbiB0aGUgQlZIICh1c2VkIGludGVybmFsbHkgd2hlbiB1cGRhdGluZyB0aGUgYm9keSdzIHBvc2l0aW9uKVxuXHQgKi9cblx0aW5zZXJ0KGJvZHksIHVwZGF0aW5nID0gZmFsc2UpIHtcblx0XHRpZighdXBkYXRpbmcpIHtcblx0XHRcdGNvbnN0IGJ2aCA9IGJvZHkuX2J2aDtcblxuXHRcdFx0aWYoYnZoICYmIGJ2aCAhPT0gdGhpcykge1xuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ0JvZHkgYmVsb25ncyB0byBhbm90aGVyIGNvbGxpc2lvbiBzeXN0ZW0nKTtcblx0XHRcdH1cblxuXHRcdFx0Ym9keS5fYnZoID0gdGhpcztcblx0XHRcdHRoaXMuX2JvZGllcy5wdXNoKGJvZHkpO1xuXHRcdH1cblxuXHRcdGNvbnN0IHBvbHlnb24gPSBib2R5Ll9wb2x5Z29uO1xuXHRcdGNvbnN0IGJvZHlfeCAgPSBib2R5Lng7XG5cdFx0Y29uc3QgYm9keV95ICA9IGJvZHkueTtcblxuXHRcdGlmKHBvbHlnb24pIHtcblx0XHRcdGlmKFxuXHRcdFx0XHRib2R5Ll9kaXJ0eV9jb29yZHMgfHxcblx0XHRcdFx0Ym9keS54ICAgICAgICE9PSBib2R5Ll94IHx8XG5cdFx0XHRcdGJvZHkueSAgICAgICAhPT0gYm9keS5feSB8fFxuXHRcdFx0XHRib2R5LmFuZ2xlICAgIT09IGJvZHkuX2FuZ2xlIHx8XG5cdFx0XHRcdGJvZHkuc2NhbGVfeCAhPT0gYm9keS5fc2NhbGVfeCB8fFxuXHRcdFx0XHRib2R5LnNjYWxlX3kgIT09IGJvZHkuX3NjYWxlX3lcblx0XHRcdCkge1xuXHRcdFx0XHRib2R5Ll9jYWxjdWxhdGVDb29yZHMoKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRjb25zdCBwYWRkaW5nICAgID0gYm9keS5fYnZoX3BhZGRpbmc7XG5cdFx0Y29uc3QgcmFkaXVzICAgICA9IHBvbHlnb24gPyAwIDogYm9keS5yYWRpdXMgKiBib2R5LnNjYWxlO1xuXHRcdGNvbnN0IGJvZHlfbWluX3ggPSAocG9seWdvbiA/IGJvZHkuX21pbl94IDogYm9keV94IC0gcmFkaXVzKSAtIHBhZGRpbmc7XG5cdFx0Y29uc3QgYm9keV9taW5feSA9IChwb2x5Z29uID8gYm9keS5fbWluX3kgOiBib2R5X3kgLSByYWRpdXMpIC0gcGFkZGluZztcblx0XHRjb25zdCBib2R5X21heF94ID0gKHBvbHlnb24gPyBib2R5Ll9tYXhfeCA6IGJvZHlfeCArIHJhZGl1cykgKyBwYWRkaW5nO1xuXHRcdGNvbnN0IGJvZHlfbWF4X3kgPSAocG9seWdvbiA/IGJvZHkuX21heF95IDogYm9keV95ICsgcmFkaXVzKSArIHBhZGRpbmc7XG5cblx0XHRib2R5Ll9idmhfbWluX3ggPSBib2R5X21pbl94O1xuXHRcdGJvZHkuX2J2aF9taW5feSA9IGJvZHlfbWluX3k7XG5cdFx0Ym9keS5fYnZoX21heF94ID0gYm9keV9tYXhfeDtcblx0XHRib2R5Ll9idmhfbWF4X3kgPSBib2R5X21heF95O1xuXG5cdFx0bGV0IGN1cnJlbnQgPSB0aGlzLl9oaWVyYXJjaHk7XG5cdFx0bGV0IHNvcnQgICAgPSAwO1xuXG5cdFx0aWYoIWN1cnJlbnQpIHtcblx0XHRcdHRoaXMuX2hpZXJhcmNoeSA9IGJvZHk7XG5cdFx0fVxuXHRcdGVsc2Uge1xuXHRcdFx0d2hpbGUodHJ1ZSkge1xuXHRcdFx0XHQvLyBCcmFuY2hcblx0XHRcdFx0aWYoY3VycmVudC5fYnZoX2JyYW5jaCkge1xuXHRcdFx0XHRcdGNvbnN0IGxlZnQgICAgICAgICAgICA9IGN1cnJlbnQuX2J2aF9sZWZ0O1xuXHRcdFx0XHRcdGNvbnN0IGxlZnRfbWluX3kgICAgICA9IGxlZnQuX2J2aF9taW5feTtcblx0XHRcdFx0XHRjb25zdCBsZWZ0X21heF94ICAgICAgPSBsZWZ0Ll9idmhfbWF4X3g7XG5cdFx0XHRcdFx0Y29uc3QgbGVmdF9tYXhfeSAgICAgID0gbGVmdC5fYnZoX21heF95O1xuXHRcdFx0XHRcdGNvbnN0IGxlZnRfbmV3X21pbl94ICA9IGJvZHlfbWluX3ggPCBsZWZ0Ll9idmhfbWluX3ggPyBib2R5X21pbl94IDogbGVmdC5fYnZoX21pbl94O1xuXHRcdFx0XHRcdGNvbnN0IGxlZnRfbmV3X21pbl95ICA9IGJvZHlfbWluX3kgPCBsZWZ0X21pbl95ID8gYm9keV9taW5feSA6IGxlZnRfbWluX3k7XG5cdFx0XHRcdFx0Y29uc3QgbGVmdF9uZXdfbWF4X3ggID0gYm9keV9tYXhfeCA+IGxlZnRfbWF4X3ggPyBib2R5X21heF94IDogbGVmdF9tYXhfeDtcblx0XHRcdFx0XHRjb25zdCBsZWZ0X25ld19tYXhfeSAgPSBib2R5X21heF95ID4gbGVmdF9tYXhfeSA/IGJvZHlfbWF4X3kgOiBsZWZ0X21heF95O1xuXHRcdFx0XHRcdGNvbnN0IGxlZnRfdm9sdW1lICAgICA9IChsZWZ0X21heF94IC0gbGVmdC5fYnZoX21pbl94KSAqIChsZWZ0X21heF95IC0gbGVmdF9taW5feSk7XG5cdFx0XHRcdFx0Y29uc3QgbGVmdF9uZXdfdm9sdW1lID0gKGxlZnRfbmV3X21heF94IC0gbGVmdF9uZXdfbWluX3gpICogKGxlZnRfbmV3X21heF95IC0gbGVmdF9uZXdfbWluX3kpO1xuXHRcdFx0XHRcdGNvbnN0IGxlZnRfZGlmZmVyZW5jZSA9IGxlZnRfbmV3X3ZvbHVtZSAtIGxlZnRfdm9sdW1lO1xuXG5cdFx0XHRcdFx0Y29uc3QgcmlnaHQgICAgICAgICAgICA9IGN1cnJlbnQuX2J2aF9yaWdodDtcblx0XHRcdFx0XHRjb25zdCByaWdodF9taW5feCAgICAgID0gcmlnaHQuX2J2aF9taW5feDtcblx0XHRcdFx0XHRjb25zdCByaWdodF9taW5feSAgICAgID0gcmlnaHQuX2J2aF9taW5feTtcblx0XHRcdFx0XHRjb25zdCByaWdodF9tYXhfeCAgICAgID0gcmlnaHQuX2J2aF9tYXhfeDtcblx0XHRcdFx0XHRjb25zdCByaWdodF9tYXhfeSAgICAgID0gcmlnaHQuX2J2aF9tYXhfeTtcblx0XHRcdFx0XHRjb25zdCByaWdodF9uZXdfbWluX3ggID0gYm9keV9taW5feCA8IHJpZ2h0X21pbl94ID8gYm9keV9taW5feCA6IHJpZ2h0X21pbl94O1xuXHRcdFx0XHRcdGNvbnN0IHJpZ2h0X25ld19taW5feSAgPSBib2R5X21pbl95IDwgcmlnaHRfbWluX3kgPyBib2R5X21pbl95IDogcmlnaHRfbWluX3k7XG5cdFx0XHRcdFx0Y29uc3QgcmlnaHRfbmV3X21heF94ICA9IGJvZHlfbWF4X3ggPiByaWdodF9tYXhfeCA/IGJvZHlfbWF4X3ggOiByaWdodF9tYXhfeDtcblx0XHRcdFx0XHRjb25zdCByaWdodF9uZXdfbWF4X3kgID0gYm9keV9tYXhfeSA+IHJpZ2h0X21heF95ID8gYm9keV9tYXhfeSA6IHJpZ2h0X21heF95O1xuXHRcdFx0XHRcdGNvbnN0IHJpZ2h0X3ZvbHVtZSAgICAgPSAocmlnaHRfbWF4X3ggLSByaWdodF9taW5feCkgKiAocmlnaHRfbWF4X3kgLSByaWdodF9taW5feSk7XG5cdFx0XHRcdFx0Y29uc3QgcmlnaHRfbmV3X3ZvbHVtZSA9IChyaWdodF9uZXdfbWF4X3ggLSByaWdodF9uZXdfbWluX3gpICogKHJpZ2h0X25ld19tYXhfeSAtIHJpZ2h0X25ld19taW5feSk7XG5cdFx0XHRcdFx0Y29uc3QgcmlnaHRfZGlmZmVyZW5jZSA9IHJpZ2h0X25ld192b2x1bWUgLSByaWdodF92b2x1bWU7XG5cblx0XHRcdFx0XHRjdXJyZW50Ll9idmhfc29ydCAgPSBzb3J0Kys7XG5cdFx0XHRcdFx0Y3VycmVudC5fYnZoX21pbl94ID0gbGVmdF9uZXdfbWluX3ggPCByaWdodF9uZXdfbWluX3ggPyBsZWZ0X25ld19taW5feCA6IHJpZ2h0X25ld19taW5feDtcblx0XHRcdFx0XHRjdXJyZW50Ll9idmhfbWluX3kgPSBsZWZ0X25ld19taW5feSA8IHJpZ2h0X25ld19taW5feSA/IGxlZnRfbmV3X21pbl95IDogcmlnaHRfbmV3X21pbl95O1xuXHRcdFx0XHRcdGN1cnJlbnQuX2J2aF9tYXhfeCA9IGxlZnRfbmV3X21heF94ID4gcmlnaHRfbmV3X21heF94ID8gbGVmdF9uZXdfbWF4X3ggOiByaWdodF9uZXdfbWF4X3g7XG5cdFx0XHRcdFx0Y3VycmVudC5fYnZoX21heF95ID0gbGVmdF9uZXdfbWF4X3kgPiByaWdodF9uZXdfbWF4X3kgPyBsZWZ0X25ld19tYXhfeSA6IHJpZ2h0X25ld19tYXhfeTtcblxuXHRcdFx0XHRcdGN1cnJlbnQgPSBsZWZ0X2RpZmZlcmVuY2UgPD0gcmlnaHRfZGlmZmVyZW5jZSA/IGxlZnQgOiByaWdodDtcblx0XHRcdFx0fVxuXHRcdFx0XHQvLyBMZWFmXG5cdFx0XHRcdGVsc2Uge1xuXHRcdFx0XHRcdGNvbnN0IGdyYW5kcGFyZW50ICA9IGN1cnJlbnQuX2J2aF9wYXJlbnQ7XG5cdFx0XHRcdFx0Y29uc3QgcGFyZW50X21pbl94ID0gY3VycmVudC5fYnZoX21pbl94O1xuXHRcdFx0XHRcdGNvbnN0IHBhcmVudF9taW5feSA9IGN1cnJlbnQuX2J2aF9taW5feTtcblx0XHRcdFx0XHRjb25zdCBwYXJlbnRfbWF4X3ggPSBjdXJyZW50Ll9idmhfbWF4X3g7XG5cdFx0XHRcdFx0Y29uc3QgcGFyZW50X21heF95ID0gY3VycmVudC5fYnZoX21heF95O1xuXHRcdFx0XHRcdGNvbnN0IG5ld19wYXJlbnQgICA9IGN1cnJlbnQuX2J2aF9wYXJlbnQgPSBib2R5Ll9idmhfcGFyZW50ID0gQlZIQnJhbmNoLmdldEJyYW5jaCgpO1xuXG5cdFx0XHRcdFx0bmV3X3BhcmVudC5fYnZoX3BhcmVudCA9IGdyYW5kcGFyZW50O1xuXHRcdFx0XHRcdG5ld19wYXJlbnQuX2J2aF9sZWZ0ICAgPSBjdXJyZW50O1xuXHRcdFx0XHRcdG5ld19wYXJlbnQuX2J2aF9yaWdodCAgPSBib2R5O1xuXHRcdFx0XHRcdG5ld19wYXJlbnQuX2J2aF9zb3J0ICAgPSBzb3J0Kys7XG5cdFx0XHRcdFx0bmV3X3BhcmVudC5fYnZoX21pbl94ICA9IGJvZHlfbWluX3ggPCBwYXJlbnRfbWluX3ggPyBib2R5X21pbl94IDogcGFyZW50X21pbl94O1xuXHRcdFx0XHRcdG5ld19wYXJlbnQuX2J2aF9taW5feSAgPSBib2R5X21pbl95IDwgcGFyZW50X21pbl95ID8gYm9keV9taW5feSA6IHBhcmVudF9taW5feTtcblx0XHRcdFx0XHRuZXdfcGFyZW50Ll9idmhfbWF4X3ggID0gYm9keV9tYXhfeCA+IHBhcmVudF9tYXhfeCA/IGJvZHlfbWF4X3ggOiBwYXJlbnRfbWF4X3g7XG5cdFx0XHRcdFx0bmV3X3BhcmVudC5fYnZoX21heF95ICA9IGJvZHlfbWF4X3kgPiBwYXJlbnRfbWF4X3kgPyBib2R5X21heF95IDogcGFyZW50X21heF95O1xuXG5cdFx0XHRcdFx0aWYoIWdyYW5kcGFyZW50KSB7XG5cdFx0XHRcdFx0XHR0aGlzLl9oaWVyYXJjaHkgPSBuZXdfcGFyZW50O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRlbHNlIGlmKGdyYW5kcGFyZW50Ll9idmhfbGVmdCA9PT0gY3VycmVudCkge1xuXHRcdFx0XHRcdFx0Z3JhbmRwYXJlbnQuX2J2aF9sZWZ0ID0gbmV3X3BhcmVudDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZWxzZSB7XG5cdFx0XHRcdFx0XHRncmFuZHBhcmVudC5fYnZoX3JpZ2h0ID0gbmV3X3BhcmVudDtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBSZW1vdmVzIGEgYm9keSBmcm9tIHRoZSBCVkhcblx0ICogQHBhcmFtIHtDaXJjbGV8UG9seWdvbnxQb2ludH0gYm9keSBUaGUgYm9keSB0byByZW1vdmVcblx0ICogQHBhcmFtIHtCb29sZWFufSBbdXBkYXRpbmcgPSBmYWxzZV0gU2V0IHRvIHRydWUgaWYgdGhpcyBpcyBhIHRlbXBvcmFyeSByZW1vdmFsICh1c2VkIGludGVybmFsbHkgd2hlbiB1cGRhdGluZyB0aGUgYm9keSdzIHBvc2l0aW9uKVxuXHQgKi9cblx0cmVtb3ZlKGJvZHksIHVwZGF0aW5nID0gZmFsc2UpIHtcblx0XHRpZighdXBkYXRpbmcpIHtcblx0XHRcdGNvbnN0IGJ2aCA9IGJvZHkuX2J2aDtcblxuXHRcdFx0aWYoYnZoICYmIGJ2aCAhPT0gdGhpcykge1xuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ0JvZHkgYmVsb25ncyB0byBhbm90aGVyIGNvbGxpc2lvbiBzeXN0ZW0nKTtcblx0XHRcdH1cblxuXHRcdFx0Ym9keS5fYnZoID0gbnVsbDtcblx0XHRcdHRoaXMuX2JvZGllcy5zcGxpY2UodGhpcy5fYm9kaWVzLmluZGV4T2YoYm9keSksIDEpO1xuXHRcdH1cblxuXHRcdGlmKHRoaXMuX2hpZXJhcmNoeSA9PT0gYm9keSkge1xuXHRcdFx0dGhpcy5faGllcmFyY2h5ID0gbnVsbDtcblxuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGNvbnN0IHBhcmVudCAgICAgICA9IGJvZHkuX2J2aF9wYXJlbnQ7XG5cdFx0Y29uc3QgZ3JhbmRwYXJlbnQgID0gcGFyZW50Ll9idmhfcGFyZW50O1xuXHRcdGNvbnN0IHBhcmVudF9sZWZ0ICA9IHBhcmVudC5fYnZoX2xlZnQ7XG5cdFx0Y29uc3Qgc2libGluZyAgICAgID0gcGFyZW50X2xlZnQgPT09IGJvZHkgPyBwYXJlbnQuX2J2aF9yaWdodCA6IHBhcmVudF9sZWZ0O1xuXG5cdFx0c2libGluZy5fYnZoX3BhcmVudCA9IGdyYW5kcGFyZW50O1xuXG5cdFx0aWYoc2libGluZy5fYnZoX2JyYW5jaCkge1xuXHRcdFx0c2libGluZy5fYnZoX3NvcnQgPSBwYXJlbnQuX2J2aF9zb3J0O1xuXHRcdH1cblxuXHRcdGlmKGdyYW5kcGFyZW50KSB7XG5cdFx0XHRpZihncmFuZHBhcmVudC5fYnZoX2xlZnQgPT09IHBhcmVudCkge1xuXHRcdFx0XHRncmFuZHBhcmVudC5fYnZoX2xlZnQgPSBzaWJsaW5nO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSB7XG5cdFx0XHRcdGdyYW5kcGFyZW50Ll9idmhfcmlnaHQgPSBzaWJsaW5nO1xuXHRcdFx0fVxuXG5cdFx0XHRsZXQgYnJhbmNoID0gZ3JhbmRwYXJlbnQ7XG5cblx0XHRcdHdoaWxlKGJyYW5jaCkge1xuXHRcdFx0XHRjb25zdCBsZWZ0ICAgICAgID0gYnJhbmNoLl9idmhfbGVmdDtcblx0XHRcdFx0Y29uc3QgbGVmdF9taW5feCA9IGxlZnQuX2J2aF9taW5feDtcblx0XHRcdFx0Y29uc3QgbGVmdF9taW5feSA9IGxlZnQuX2J2aF9taW5feTtcblx0XHRcdFx0Y29uc3QgbGVmdF9tYXhfeCA9IGxlZnQuX2J2aF9tYXhfeDtcblx0XHRcdFx0Y29uc3QgbGVmdF9tYXhfeSA9IGxlZnQuX2J2aF9tYXhfeTtcblxuXHRcdFx0XHRjb25zdCByaWdodCAgICAgICA9IGJyYW5jaC5fYnZoX3JpZ2h0O1xuXHRcdFx0XHRjb25zdCByaWdodF9taW5feCA9IHJpZ2h0Ll9idmhfbWluX3g7XG5cdFx0XHRcdGNvbnN0IHJpZ2h0X21pbl95ID0gcmlnaHQuX2J2aF9taW5feTtcblx0XHRcdFx0Y29uc3QgcmlnaHRfbWF4X3ggPSByaWdodC5fYnZoX21heF94O1xuXHRcdFx0XHRjb25zdCByaWdodF9tYXhfeSA9IHJpZ2h0Ll9idmhfbWF4X3k7XG5cblx0XHRcdFx0YnJhbmNoLl9idmhfbWluX3ggPSBsZWZ0X21pbl94IDwgcmlnaHRfbWluX3ggPyBsZWZ0X21pbl94IDogcmlnaHRfbWluX3g7XG5cdFx0XHRcdGJyYW5jaC5fYnZoX21pbl95ID0gbGVmdF9taW5feSA8IHJpZ2h0X21pbl95ID8gbGVmdF9taW5feSA6IHJpZ2h0X21pbl95O1xuXHRcdFx0XHRicmFuY2guX2J2aF9tYXhfeCA9IGxlZnRfbWF4X3ggPiByaWdodF9tYXhfeCA/IGxlZnRfbWF4X3ggOiByaWdodF9tYXhfeDtcblx0XHRcdFx0YnJhbmNoLl9idmhfbWF4X3kgPSBsZWZ0X21heF95ID4gcmlnaHRfbWF4X3kgPyBsZWZ0X21heF95IDogcmlnaHRfbWF4X3k7XG5cblx0XHRcdFx0YnJhbmNoID0gYnJhbmNoLl9idmhfcGFyZW50O1xuXHRcdFx0fVxuXHRcdH1cblx0XHRlbHNlIHtcblx0XHRcdHRoaXMuX2hpZXJhcmNoeSA9IHNpYmxpbmc7XG5cdFx0fVxuXG5cdFx0QlZIQnJhbmNoLnJlbGVhc2VCcmFuY2gocGFyZW50KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBVcGRhdGVzIHRoZSBCVkguIE1vdmVkIGJvZGllcyBhcmUgcmVtb3ZlZC9pbnNlcnRlZC5cblx0ICovXG5cdHVwZGF0ZSgpIHtcblx0XHRjb25zdCBib2RpZXMgPSB0aGlzLl9ib2RpZXM7XG5cdFx0Y29uc3QgY291bnQgID0gYm9kaWVzLmxlbmd0aDtcblxuXHRcdGZvcihsZXQgaSA9IDA7IGkgPCBjb3VudDsgKytpKSB7XG5cdFx0XHRjb25zdCBib2R5ID0gYm9kaWVzW2ldO1xuXG5cdFx0XHRsZXQgdXBkYXRlID0gZmFsc2U7XG5cblx0XHRcdGlmKCF1cGRhdGUgJiYgYm9keS5wYWRkaW5nICE9PSBib2R5Ll9idmhfcGFkZGluZykge1xuXHRcdFx0XHRib2R5Ll9idmhfcGFkZGluZyA9IGJvZHkucGFkZGluZztcblx0XHRcdFx0dXBkYXRlID0gdHJ1ZTtcblx0XHRcdH1cblxuXHRcdFx0aWYoIXVwZGF0ZSkge1xuXHRcdFx0XHRjb25zdCBwb2x5Z29uID0gYm9keS5fcG9seWdvbjtcblxuXHRcdFx0XHRpZihwb2x5Z29uKSB7XG5cdFx0XHRcdFx0aWYoXG5cdFx0XHRcdFx0XHRib2R5Ll9kaXJ0eV9jb29yZHMgfHxcblx0XHRcdFx0XHRcdGJvZHkueCAgICAgICAhPT0gYm9keS5feCB8fFxuXHRcdFx0XHRcdFx0Ym9keS55ICAgICAgICE9PSBib2R5Ll95IHx8XG5cdFx0XHRcdFx0XHRib2R5LmFuZ2xlICAgIT09IGJvZHkuX2FuZ2xlIHx8XG5cdFx0XHRcdFx0XHRib2R5LnNjYWxlX3ggIT09IGJvZHkuX3NjYWxlX3ggfHxcblx0XHRcdFx0XHRcdGJvZHkuc2NhbGVfeSAhPT0gYm9keS5fc2NhbGVfeVxuXHRcdFx0XHRcdCkge1xuXHRcdFx0XHRcdFx0Ym9keS5fY2FsY3VsYXRlQ29vcmRzKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y29uc3QgeCAgICAgID0gYm9keS54O1xuXHRcdFx0XHRjb25zdCB5ICAgICAgPSBib2R5Lnk7XG5cdFx0XHRcdGNvbnN0IHJhZGl1cyA9IHBvbHlnb24gPyAwIDogYm9keS5yYWRpdXMgKiBib2R5LnNjYWxlO1xuXHRcdFx0XHRjb25zdCBtaW5feCAgPSBwb2x5Z29uID8gYm9keS5fbWluX3ggOiB4IC0gcmFkaXVzO1xuXHRcdFx0XHRjb25zdCBtaW5feSAgPSBwb2x5Z29uID8gYm9keS5fbWluX3kgOiB5IC0gcmFkaXVzO1xuXHRcdFx0XHRjb25zdCBtYXhfeCAgPSBwb2x5Z29uID8gYm9keS5fbWF4X3ggOiB4ICsgcmFkaXVzO1xuXHRcdFx0XHRjb25zdCBtYXhfeSAgPSBwb2x5Z29uID8gYm9keS5fbWF4X3kgOiB5ICsgcmFkaXVzO1xuXG5cdFx0XHRcdHVwZGF0ZSA9IG1pbl94IDwgYm9keS5fYnZoX21pbl94IHx8IG1pbl95IDwgYm9keS5fYnZoX21pbl95IHx8IG1heF94ID4gYm9keS5fYnZoX21heF94IHx8IG1heF95ID4gYm9keS5fYnZoX21heF95O1xuXHRcdFx0fVxuXG5cdFx0XHRpZih1cGRhdGUpIHtcblx0XHRcdFx0dGhpcy5yZW1vdmUoYm9keSwgdHJ1ZSk7XG5cdFx0XHRcdHRoaXMuaW5zZXJ0KGJvZHksIHRydWUpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgbGlzdCBvZiBwb3RlbnRpYWwgY29sbGlzaW9ucyBmb3IgYSBib2R5XG5cdCAqIEBwYXJhbSB7Q2lyY2xlfFBvbHlnb258UG9pbnR9IGJvZHkgVGhlIGJvZHkgdG8gdGVzdFxuXHQgKiBAcmV0dXJucyB7QXJyYXk8Qm9keT59XG5cdCAqL1xuXHRwb3RlbnRpYWxzKGJvZHkpIHtcblx0XHRjb25zdCByZXN1bHRzID0gW107XG5cdFx0Y29uc3QgbWluX3ggICA9IGJvZHkuX2J2aF9taW5feDtcblx0XHRjb25zdCBtaW5feSAgID0gYm9keS5fYnZoX21pbl95O1xuXHRcdGNvbnN0IG1heF94ICAgPSBib2R5Ll9idmhfbWF4X3g7XG5cdFx0Y29uc3QgbWF4X3kgICA9IGJvZHkuX2J2aF9tYXhfeTtcblxuXHRcdGxldCBjdXJyZW50ICAgICAgID0gdGhpcy5faGllcmFyY2h5O1xuXHRcdGxldCB0cmF2ZXJzZV9sZWZ0ID0gdHJ1ZTtcblxuXHRcdGlmKCFjdXJyZW50IHx8ICFjdXJyZW50Ll9idmhfYnJhbmNoKSB7XG5cdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHR9XG5cblx0XHR3aGlsZShjdXJyZW50KSB7XG5cdFx0XHRpZih0cmF2ZXJzZV9sZWZ0KSB7XG5cdFx0XHRcdHRyYXZlcnNlX2xlZnQgPSBmYWxzZTtcblxuXHRcdFx0XHRsZXQgbGVmdCA9IGN1cnJlbnQuX2J2aF9icmFuY2ggPyBjdXJyZW50Ll9idmhfbGVmdCA6IG51bGw7XG5cblx0XHRcdFx0d2hpbGUoXG5cdFx0XHRcdFx0bGVmdCAmJlxuXHRcdFx0XHRcdGxlZnQuX2J2aF9tYXhfeCA+PSBtaW5feCAmJlxuXHRcdFx0XHRcdGxlZnQuX2J2aF9tYXhfeSA+PSBtaW5feSAmJlxuXHRcdFx0XHRcdGxlZnQuX2J2aF9taW5feCA8PSBtYXhfeCAmJlxuXHRcdFx0XHRcdGxlZnQuX2J2aF9taW5feSA8PSBtYXhfeVxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRjdXJyZW50ID0gbGVmdDtcblx0XHRcdFx0XHRsZWZ0ICAgID0gY3VycmVudC5fYnZoX2JyYW5jaCA/IGN1cnJlbnQuX2J2aF9sZWZ0IDogbnVsbDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBicmFuY2ggPSBjdXJyZW50Ll9idmhfYnJhbmNoO1xuXHRcdFx0Y29uc3QgcmlnaHQgID0gYnJhbmNoID8gY3VycmVudC5fYnZoX3JpZ2h0IDogbnVsbDtcblxuXHRcdFx0aWYoXG5cdFx0XHRcdHJpZ2h0ICYmXG5cdFx0XHRcdHJpZ2h0Ll9idmhfbWF4X3ggPiBtaW5feCAmJlxuXHRcdFx0XHRyaWdodC5fYnZoX21heF95ID4gbWluX3kgJiZcblx0XHRcdFx0cmlnaHQuX2J2aF9taW5feCA8IG1heF94ICYmXG5cdFx0XHRcdHJpZ2h0Ll9idmhfbWluX3kgPCBtYXhfeVxuXHRcdFx0KSB7XG5cdFx0XHRcdGN1cnJlbnQgICAgICAgPSByaWdodDtcblx0XHRcdFx0dHJhdmVyc2VfbGVmdCA9IHRydWU7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIHtcblx0XHRcdFx0aWYoIWJyYW5jaCAmJiBjdXJyZW50ICE9PSBib2R5KSB7XG5cdFx0XHRcdFx0cmVzdWx0cy5wdXNoKGN1cnJlbnQpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0bGV0IHBhcmVudCA9IGN1cnJlbnQuX2J2aF9wYXJlbnQ7XG5cblx0XHRcdFx0aWYocGFyZW50KSB7XG5cdFx0XHRcdFx0d2hpbGUocGFyZW50ICYmIHBhcmVudC5fYnZoX3JpZ2h0ID09PSBjdXJyZW50KSB7XG5cdFx0XHRcdFx0XHRjdXJyZW50ID0gcGFyZW50O1xuXHRcdFx0XHRcdFx0cGFyZW50ICA9IGN1cnJlbnQuX2J2aF9wYXJlbnQ7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Y3VycmVudCA9IHBhcmVudDtcblx0XHRcdFx0fVxuXHRcdFx0XHRlbHNlIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiByZXN1bHRzO1xuXHR9XG5cblx0LyoqXG5cdCAqIERyYXdzIHRoZSBib2RpZXMgd2l0aGluIHRoZSBCVkggdG8gYSBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQncyBjdXJyZW50IHBhdGhcblx0ICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGNvbnRleHQgVGhlIGNvbnRleHQgdG8gZHJhdyB0b1xuXHQgKi9cblx0ZHJhdyhjb250ZXh0KSB7XG5cdFx0Y29uc3QgYm9kaWVzID0gdGhpcy5fYm9kaWVzO1xuXHRcdGNvbnN0IGNvdW50ICA9IGJvZGllcy5sZW5ndGg7XG5cblx0XHRmb3IobGV0IGkgPSAwOyBpIDwgY291bnQ7ICsraSkge1xuXHRcdFx0Ym9kaWVzW2ldLmRyYXcoY29udGV4dCk7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIERyYXdzIHRoZSBCVkggdG8gYSBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQncyBjdXJyZW50IHBhdGguIFRoaXMgaXMgdXNlZnVsIGZvciB0ZXN0aW5nIG91dCBkaWZmZXJlbnQgcGFkZGluZyB2YWx1ZXMgZm9yIGJvZGllcy5cblx0ICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGNvbnRleHQgVGhlIGNvbnRleHQgdG8gZHJhdyB0b1xuXHQgKi9cblx0ZHJhd0JWSChjb250ZXh0KSB7XG5cdFx0bGV0IGN1cnJlbnQgICAgICAgPSB0aGlzLl9oaWVyYXJjaHk7XG5cdFx0bGV0IHRyYXZlcnNlX2xlZnQgPSB0cnVlO1xuXG5cdFx0d2hpbGUoY3VycmVudCkge1xuXHRcdFx0aWYodHJhdmVyc2VfbGVmdCkge1xuXHRcdFx0XHR0cmF2ZXJzZV9sZWZ0ID0gZmFsc2U7XG5cblx0XHRcdFx0bGV0IGxlZnQgPSBjdXJyZW50Ll9idmhfYnJhbmNoID8gY3VycmVudC5fYnZoX2xlZnQgOiBudWxsO1xuXG5cdFx0XHRcdHdoaWxlKGxlZnQpIHtcblx0XHRcdFx0XHRjdXJyZW50ID0gbGVmdDtcblx0XHRcdFx0XHRsZWZ0ICAgID0gY3VycmVudC5fYnZoX2JyYW5jaCA/IGN1cnJlbnQuX2J2aF9sZWZ0IDogbnVsbDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBicmFuY2ggPSBjdXJyZW50Ll9idmhfYnJhbmNoO1xuXHRcdFx0Y29uc3QgbWluX3ggID0gY3VycmVudC5fYnZoX21pbl94O1xuXHRcdFx0Y29uc3QgbWluX3kgID0gY3VycmVudC5fYnZoX21pbl95O1xuXHRcdFx0Y29uc3QgbWF4X3ggID0gY3VycmVudC5fYnZoX21heF94O1xuXHRcdFx0Y29uc3QgbWF4X3kgID0gY3VycmVudC5fYnZoX21heF95O1xuXHRcdFx0Y29uc3QgcmlnaHQgID0gYnJhbmNoID8gY3VycmVudC5fYnZoX3JpZ2h0IDogbnVsbDtcblxuXHRcdFx0Y29udGV4dC5tb3ZlVG8obWluX3gsIG1pbl95KTtcblx0XHRcdGNvbnRleHQubGluZVRvKG1heF94LCBtaW5feSk7XG5cdFx0XHRjb250ZXh0LmxpbmVUbyhtYXhfeCwgbWF4X3kpO1xuXHRcdFx0Y29udGV4dC5saW5lVG8obWluX3gsIG1heF95KTtcblx0XHRcdGNvbnRleHQubGluZVRvKG1pbl94LCBtaW5feSk7XG5cblx0XHRcdGlmKHJpZ2h0KSB7XG5cdFx0XHRcdGN1cnJlbnQgICAgICAgPSByaWdodDtcblx0XHRcdFx0dHJhdmVyc2VfbGVmdCA9IHRydWU7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIHtcblx0XHRcdFx0bGV0IHBhcmVudCA9IGN1cnJlbnQuX2J2aF9wYXJlbnQ7XG5cblx0XHRcdFx0aWYocGFyZW50KSB7XG5cdFx0XHRcdFx0d2hpbGUocGFyZW50ICYmIHBhcmVudC5fYnZoX3JpZ2h0ID09PSBjdXJyZW50KSB7XG5cdFx0XHRcdFx0XHRjdXJyZW50ID0gcGFyZW50O1xuXHRcdFx0XHRcdFx0cGFyZW50ICA9IGN1cnJlbnQuX2J2aF9wYXJlbnQ7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Y3VycmVudCA9IHBhcmVudDtcblx0XHRcdFx0fVxuXHRcdFx0XHRlbHNlIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcbiIsIi8qKlxuICogQW4gb2JqZWN0IHVzZWQgdG8gY29sbGVjdCB0aGUgZGV0YWlsZWQgcmVzdWx0cyBvZiBhIGNvbGxpc2lvbiB0ZXN0XG4gKlxuICogPiAqKk5vdGU6KiogSXQgaXMgaGlnaGx5IHJlY29tbWVuZGVkIHlvdSByZWN5Y2xlIHRoZSBzYW1lIFJlc3VsdCBvYmplY3QgaWYgcG9zc2libGUgaW4gb3JkZXIgdG8gYXZvaWQgd2FzdGluZyBtZW1vcnlcbiAqIEBjbGFzc1xuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZXN1bHQge1xuXHQvKipcblx0ICogQGNvbnN0cnVjdG9yXG5cdCAqL1xuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHQvKipcblx0XHQgKiBAZGVzYyBUcnVlIGlmIGEgY29sbGlzaW9uIHdhcyBkZXRlY3RlZFxuXHRcdCAqIEB0eXBlIHtCb29sZWFufVxuXHRcdCAqL1xuXHRcdHRoaXMuY29sbGlzaW9uID0gZmFsc2U7XG5cblx0XHQvKipcblx0XHQgKiBAZGVzYyBUaGUgc291cmNlIGJvZHkgdGVzdGVkXG5cdFx0ICogQHR5cGUge0NpcmNsZXxQb2x5Z29ufFBvaW50fVxuXHRcdCAqL1xuXHRcdHRoaXMuYSA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBAZGVzYyBUaGUgdGFyZ2V0IGJvZHkgdGVzdGVkIGFnYWluc3Rcblx0XHQgKiBAdHlwZSB7Q2lyY2xlfFBvbHlnb258UG9pbnR9XG5cdFx0ICovXG5cdFx0dGhpcy5iID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIEBkZXNjIFRydWUgaWYgQSBpcyBjb21wbGV0ZWx5IGNvbnRhaW5lZCB3aXRoaW4gQlxuXHRcdCAqIEB0eXBlIHtCb29sZWFufVxuXHRcdCAqL1xuXHRcdHRoaXMuYV9pbl9iID0gZmFsc2U7XG5cblx0XHQvKipcblx0XHQgKiBAZGVzYyBUcnVlIGlmIEIgaXMgY29tcGxldGVseSBjb250YWluZWQgd2l0aGluIEFcblx0XHQgKiBAdHlwZSB7Qm9vbGVhbn1cblx0XHQgKi9cblx0XHR0aGlzLmFfaW5fYiA9IGZhbHNlO1xuXG5cdFx0LyoqXG5cdFx0ICogQGRlc2MgVGhlIG1hZ25pdHVkZSBvZiB0aGUgc2hvcnRlc3QgYXhpcyBvZiBvdmVybGFwXG5cdFx0ICogQHR5cGUge051bWJlcn1cblx0XHQgKi9cblx0XHR0aGlzLm92ZXJsYXAgPSAwO1xuXG5cdFx0LyoqXG5cdFx0ICogQGRlc2MgVGhlIFggZGlyZWN0aW9uIG9mIHRoZSBzaG9ydGVzdCBheGlzIG9mIG92ZXJsYXBcblx0XHQgKiBAdHlwZSB7TnVtYmVyfVxuXHRcdCAqL1xuXHRcdHRoaXMub3ZlcmxhcF94ID0gMDtcblxuXHRcdC8qKlxuXHRcdCAqIEBkZXNjIFRoZSBZIGRpcmVjdGlvbiBvZiB0aGUgc2hvcnRlc3QgYXhpcyBvZiBvdmVybGFwXG5cdFx0ICogQHR5cGUge051bWJlcn1cblx0XHQgKi9cblx0XHR0aGlzLm92ZXJsYXBfeSA9IDA7XG5cdH1cbn07XG4iLCIvKipcbiAqIERldGVybWluZXMgaWYgdHdvIGJvZGllcyBhcmUgY29sbGlkaW5nIHVzaW5nIHRoZSBTZXBhcmF0aW5nIEF4aXMgVGhlb3JlbVxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Q2lyY2xlfFBvbHlnb258UG9pbnR9IGEgVGhlIHNvdXJjZSBib2R5IHRvIHRlc3RcbiAqIEBwYXJhbSB7Q2lyY2xlfFBvbHlnb258UG9pbnR9IGIgVGhlIHRhcmdldCBib2R5IHRvIHRlc3QgYWdhaW5zdFxuICogQHBhcmFtIHtSZXN1bHR9IFtyZXN1bHQgPSBudWxsXSBBIFJlc3VsdCBvYmplY3Qgb24gd2hpY2ggdG8gc3RvcmUgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGNvbGxpc2lvblxuICogQHBhcmFtIHtCb29sZWFufSBbYWFiYiA9IHRydWVdIFNldCB0byBmYWxzZSB0byBza2lwIHRoZSBBQUJCIHRlc3QgKHVzZWZ1bCBpZiB5b3UgdXNlIHlvdXIgb3duIGNvbGxpc2lvbiBoZXVyaXN0aWMpXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gU0FUKGEsIGIsIHJlc3VsdCA9IG51bGwsIGFhYmIgPSB0cnVlKSB7XG5cdGNvbnN0IGFfcG9seWdvbiA9IGEuX3BvbHlnb247XG5cdGNvbnN0IGJfcG9seWdvbiA9IGIuX3BvbHlnb247XG5cblx0bGV0IGNvbGxpc2lvbiA9IGZhbHNlO1xuXG5cdGlmKHJlc3VsdCkge1xuXHRcdHJlc3VsdC5hICAgICAgICAgPSBhO1xuXHRcdHJlc3VsdC5iICAgICAgICAgPSBiO1xuXHRcdHJlc3VsdC5hX2luX2IgICAgPSB0cnVlO1xuXHRcdHJlc3VsdC5iX2luX2EgICAgPSB0cnVlO1xuXHRcdHJlc3VsdC5vdmVybGFwICAgPSBudWxsO1xuXHRcdHJlc3VsdC5vdmVybGFwX3ggPSAwO1xuXHRcdHJlc3VsdC5vdmVybGFwX3kgPSAwO1xuXHR9XG5cblx0aWYoYV9wb2x5Z29uKSB7XG5cdFx0aWYoXG5cdFx0XHRhLl9kaXJ0eV9jb29yZHMgfHxcblx0XHRcdGEueCAgICAgICAhPT0gYS5feCB8fFxuXHRcdFx0YS55ICAgICAgICE9PSBhLl95IHx8XG5cdFx0XHRhLmFuZ2xlICAgIT09IGEuX2FuZ2xlIHx8XG5cdFx0XHRhLnNjYWxlX3ggIT09IGEuX3NjYWxlX3ggfHxcblx0XHRcdGEuc2NhbGVfeSAhPT0gYS5fc2NhbGVfeVxuXHRcdCkge1xuXHRcdFx0YS5fY2FsY3VsYXRlQ29vcmRzKCk7XG5cdFx0fVxuXHR9XG5cblx0aWYoYl9wb2x5Z29uKSB7XG5cdFx0aWYoXG5cdFx0XHRiLl9kaXJ0eV9jb29yZHMgfHxcblx0XHRcdGIueCAgICAgICAhPT0gYi5feCB8fFxuXHRcdFx0Yi55ICAgICAgICE9PSBiLl95IHx8XG5cdFx0XHRiLmFuZ2xlICAgIT09IGIuX2FuZ2xlIHx8XG5cdFx0XHRiLnNjYWxlX3ggIT09IGIuX3NjYWxlX3ggfHxcblx0XHRcdGIuc2NhbGVfeSAhPT0gYi5fc2NhbGVfeVxuXHRcdCkge1xuXHRcdFx0Yi5fY2FsY3VsYXRlQ29vcmRzKCk7XG5cdFx0fVxuXHR9XG5cblx0aWYoIWFhYmIgfHwgYWFiYkFBQkIoYSwgYikpIHtcblx0XHRpZihhX3BvbHlnb24gJiYgYS5fZGlydHlfbm9ybWFscykge1xuXHRcdFx0YS5fY2FsY3VsYXRlTm9ybWFscygpO1xuXHRcdH1cblxuXHRcdGlmKGJfcG9seWdvbiAmJiBiLl9kaXJ0eV9ub3JtYWxzKSB7XG5cdFx0XHRiLl9jYWxjdWxhdGVOb3JtYWxzKCk7XG5cdFx0fVxuXG5cdFx0Y29sbGlzaW9uID0gKFxuXHRcdFx0YV9wb2x5Z29uICYmIGJfcG9seWdvbiA/IHBvbHlnb25Qb2x5Z29uKGEsIGIsIHJlc3VsdCkgOlxuXHRcdFx0YV9wb2x5Z29uID8gcG9seWdvbkNpcmNsZShhLCBiLCByZXN1bHQsIGZhbHNlKSA6XG5cdFx0XHRiX3BvbHlnb24gPyBwb2x5Z29uQ2lyY2xlKGIsIGEsIHJlc3VsdCwgdHJ1ZSkgOlxuXHRcdFx0Y2lyY2xlQ2lyY2xlKGEsIGIsIHJlc3VsdClcblx0XHQpO1xuXHR9XG5cblx0aWYocmVzdWx0KSB7XG5cdFx0cmVzdWx0LmNvbGxpc2lvbiA9IGNvbGxpc2lvbjtcblx0fVxuXG5cdHJldHVybiBjb2xsaXNpb247XG59O1xuXG4vKipcbiAqIERldGVybWluZXMgaWYgdHdvIGJvZGllcycgYXhpcyBhbGlnbmVkIGJvdW5kaW5nIGJveGVzIGFyZSBjb2xsaWRpbmdcbiAqIEBwYXJhbSB7Q2lyY2xlfFBvbHlnb258UG9pbnR9IGEgVGhlIHNvdXJjZSBib2R5IHRvIHRlc3RcbiAqIEBwYXJhbSB7Q2lyY2xlfFBvbHlnb258UG9pbnR9IGIgVGhlIHRhcmdldCBib2R5IHRvIHRlc3QgYWdhaW5zdFxuICovXG5mdW5jdGlvbiBhYWJiQUFCQihhLCBiKSB7XG5cdGNvbnN0IGFfcG9seWdvbiA9IGEuX3BvbHlnb247XG5cdGNvbnN0IGFfeCAgICAgICA9IGFfcG9seWdvbiA/IDAgOiBhLng7XG5cdGNvbnN0IGFfeSAgICAgICA9IGFfcG9seWdvbiA/IDAgOiBhLnk7XG5cdGNvbnN0IGFfcmFkaXVzICA9IGFfcG9seWdvbiA/IDAgOiBhLnJhZGl1cyAqIGEuc2NhbGU7XG5cdGNvbnN0IGFfbWluX3ggICA9IGFfcG9seWdvbiA/IGEuX21pbl94IDogYV94IC0gYV9yYWRpdXM7XG5cdGNvbnN0IGFfbWluX3kgICA9IGFfcG9seWdvbiA/IGEuX21pbl95IDogYV95IC0gYV9yYWRpdXM7XG5cdGNvbnN0IGFfbWF4X3ggICA9IGFfcG9seWdvbiA/IGEuX21heF94IDogYV94ICsgYV9yYWRpdXM7XG5cdGNvbnN0IGFfbWF4X3kgICA9IGFfcG9seWdvbiA/IGEuX21heF95IDogYV95ICsgYV9yYWRpdXM7XG5cblx0Y29uc3QgYl9wb2x5Z29uID0gYi5fcG9seWdvbjtcblx0Y29uc3QgYl94ICAgICAgID0gYl9wb2x5Z29uID8gMCA6IGIueDtcblx0Y29uc3QgYl95ICAgICAgID0gYl9wb2x5Z29uID8gMCA6IGIueTtcblx0Y29uc3QgYl9yYWRpdXMgID0gYl9wb2x5Z29uID8gMCA6IGIucmFkaXVzICogYi5zY2FsZTtcblx0Y29uc3QgYl9taW5feCAgID0gYl9wb2x5Z29uID8gYi5fbWluX3ggOiBiX3ggLSBiX3JhZGl1cztcblx0Y29uc3QgYl9taW5feSAgID0gYl9wb2x5Z29uID8gYi5fbWluX3kgOiBiX3kgLSBiX3JhZGl1cztcblx0Y29uc3QgYl9tYXhfeCAgID0gYl9wb2x5Z29uID8gYi5fbWF4X3ggOiBiX3ggKyBiX3JhZGl1cztcblx0Y29uc3QgYl9tYXhfeSAgID0gYl9wb2x5Z29uID8gYi5fbWF4X3kgOiBiX3kgKyBiX3JhZGl1cztcblxuXHRyZXR1cm4gYV9taW5feCA8IGJfbWF4X3ggJiYgYV9taW5feSA8IGJfbWF4X3kgJiYgYV9tYXhfeCA+IGJfbWluX3ggJiYgYV9tYXhfeSA+IGJfbWluX3k7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lcyBpZiB0d28gcG9seWdvbnMgYXJlIGNvbGxpZGluZ1xuICogQHBhcmFtIHtQb2x5Z29ufSBhIFRoZSBzb3VyY2UgcG9seWdvbiB0byB0ZXN0XG4gKiBAcGFyYW0ge1BvbHlnb259IGIgVGhlIHRhcmdldCBwb2x5Z29uIHRvIHRlc3QgYWdhaW5zdFxuICogQHBhcmFtIHtSZXN1bHR9IFtyZXN1bHQgPSBudWxsXSBBIFJlc3VsdCBvYmplY3Qgb24gd2hpY2ggdG8gc3RvcmUgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGNvbGxpc2lvblxuICogQHJldHVybnMge0Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIHBvbHlnb25Qb2x5Z29uKGEsIGIsIHJlc3VsdCA9IG51bGwpIHtcblx0Y29uc3QgYV9jb3VudCA9IGEuX2Nvb3Jkcy5sZW5ndGg7XG5cdGNvbnN0IGJfY291bnQgPSBiLl9jb29yZHMubGVuZ3RoO1xuXG5cdC8vIEhhbmRsZSBwb2ludHMgc3BlY2lhbGx5XG5cdGlmKGFfY291bnQgPT09IDIgJiYgYl9jb3VudCA9PT0gMikge1xuXHRcdGNvbnN0IGFfY29vcmRzID0gYS5fY29vcmRzO1xuXHRcdGNvbnN0IGJfY29vcmRzID0gYi5fY29vcmRzO1xuXG5cdFx0aWYocmVzdWx0KSB7XG5cdFx0XHRyZXN1bHQub3ZlcmxhcCA9IDA7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGFfY29vcmRzWzBdID09PSBiX2Nvb3Jkc1swXSAmJiBhX2Nvb3Jkc1sxXSA9PT0gYl9jb29yZHNbMV07XG5cdH1cblxuXHRjb25zdCBhX2Nvb3JkcyAgPSBhLl9jb29yZHM7XG5cdGNvbnN0IGJfY29vcmRzICA9IGIuX2Nvb3Jkcztcblx0Y29uc3QgYV9ub3JtYWxzID0gYS5fbm9ybWFscztcblx0Y29uc3QgYl9ub3JtYWxzID0gYi5fbm9ybWFscztcblxuXHRpZihhX2NvdW50ID4gMikge1xuXHRcdGZvcihsZXQgaXggPSAwLCBpeSA9IDE7IGl4IDwgYV9jb3VudDsgaXggKz0gMiwgaXkgKz0gMikge1xuXHRcdFx0aWYoc2VwYXJhdGluZ0F4aXMoYV9jb29yZHMsIGJfY29vcmRzLCBhX25vcm1hbHNbaXhdLCBhX25vcm1hbHNbaXldLCByZXN1bHQpKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpZihiX2NvdW50ID4gMikge1xuXHRcdGZvcihsZXQgaXggPSAwLCBpeSA9IDE7IGl4IDwgYl9jb3VudDsgaXggKz0gMiwgaXkgKz0gMikge1xuXHRcdFx0aWYoc2VwYXJhdGluZ0F4aXMoYV9jb29yZHMsIGJfY29vcmRzLCBiX25vcm1hbHNbaXhdLCBiX25vcm1hbHNbaXldLCByZXN1bHQpKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdHJ1ZTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIGEgcG9seWdvbiBhbmQgYSBjaXJjbGUgYXJlIGNvbGxpZGluZ1xuICogQHBhcmFtIHtQb2x5Z29ufSBhIFRoZSBzb3VyY2UgcG9seWdvbiB0byB0ZXN0XG4gKiBAcGFyYW0ge0NpcmNsZX0gYiBUaGUgdGFyZ2V0IGNpcmNsZSB0byB0ZXN0IGFnYWluc3RcbiAqIEBwYXJhbSB7UmVzdWx0fSBbcmVzdWx0ID0gbnVsbF0gQSBSZXN1bHQgb2JqZWN0IG9uIHdoaWNoIHRvIHN0b3JlIGluZm9ybWF0aW9uIGFib3V0IHRoZSBjb2xsaXNpb25cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW3JldmVyc2UgPSBmYWxzZV0gU2V0IHRvIHRydWUgdG8gcmV2ZXJzZSBhIGFuZCBiIGluIHRoZSByZXN1bHQgcGFyYW1ldGVyIHdoZW4gdGVzdGluZyBjaXJjbGUtPnBvbHlnb24gaW5zdGVhZCBvZiBwb2x5Z29uLT5jaXJjbGVcbiAqIEByZXR1cm5zIHtCb29sZWFufVxuICovXG5mdW5jdGlvbiBwb2x5Z29uQ2lyY2xlKGEsIGIsIHJlc3VsdCA9IG51bGwsIHJldmVyc2UgPSBmYWxzZSkge1xuXHRjb25zdCBhX2Nvb3JkcyAgICAgICA9IGEuX2Nvb3Jkcztcblx0Y29uc3QgYV9lZGdlcyAgICAgICAgPSBhLl9lZGdlcztcblx0Y29uc3QgYV9ub3JtYWxzICAgICAgPSBhLl9ub3JtYWxzO1xuXHRjb25zdCBiX3ggICAgICAgICAgICA9IGIueDtcblx0Y29uc3QgYl95ICAgICAgICAgICAgPSBiLnk7XG5cdGNvbnN0IGJfcmFkaXVzICAgICAgID0gYi5yYWRpdXMgKiBiLnNjYWxlO1xuXHRjb25zdCBiX3JhZGl1czIgICAgICA9IGJfcmFkaXVzICogMjtcblx0Y29uc3QgcmFkaXVzX3NxdWFyZWQgPSBiX3JhZGl1cyAqIGJfcmFkaXVzO1xuXHRjb25zdCBjb3VudCAgICAgICAgICA9IGFfY29vcmRzLmxlbmd0aDtcblxuXHRsZXQgYV9pbl9iICAgID0gdHJ1ZTtcblx0bGV0IGJfaW5fYSAgICA9IHRydWU7XG5cdGxldCBvdmVybGFwICAgPSBudWxsO1xuXHRsZXQgb3ZlcmxhcF94ID0gMDtcblx0bGV0IG92ZXJsYXBfeSA9IDA7XG5cblx0Ly8gSGFuZGxlIHBvaW50cyBzcGVjaWFsbHlcblx0aWYoY291bnQgPT09IDIpIHtcblx0XHRjb25zdCBjb29yZF94ICAgICAgICA9IGJfeCAtIGFfY29vcmRzWzBdO1xuXHRcdGNvbnN0IGNvb3JkX3kgICAgICAgID0gYl95IC0gYV9jb29yZHNbMV07XG5cdFx0Y29uc3QgbGVuZ3RoX3NxdWFyZWQgPSBjb29yZF94ICogY29vcmRfeCArIGNvb3JkX3kgKiBjb29yZF95O1xuXG5cdFx0aWYobGVuZ3RoX3NxdWFyZWQgPiByYWRpdXNfc3F1YXJlZCkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdGlmKHJlc3VsdCkge1xuXHRcdFx0Y29uc3QgbGVuZ3RoID0gTWF0aC5zcXJ0KGxlbmd0aF9zcXVhcmVkKTtcblxuXHRcdFx0b3ZlcmxhcCAgID0gYl9yYWRpdXMgLSBsZW5ndGg7XG5cdFx0XHRvdmVybGFwX3ggPSBjb29yZF94IC8gbGVuZ3RoO1xuXHRcdFx0b3ZlcmxhcF95ID0gY29vcmRfeSAvIGxlbmd0aDtcblx0XHRcdGJfaW5fYSAgICA9IGZhbHNlO1xuXHRcdH1cblx0fVxuXHRlbHNlIHtcblx0XHRmb3IobGV0IGl4ID0gMCwgaXkgPSAxOyBpeCA8IGNvdW50OyBpeCArPSAyLCBpeSArPSAyKSB7XG5cdFx0XHRjb25zdCBjb29yZF94ID0gYl94IC0gYV9jb29yZHNbaXhdO1xuXHRcdFx0Y29uc3QgY29vcmRfeSA9IGJfeSAtIGFfY29vcmRzW2l5XTtcblx0XHRcdGNvbnN0IGVkZ2VfeCAgPSBhX2VkZ2VzW2l4XTtcblx0XHRcdGNvbnN0IGVkZ2VfeSAgPSBhX2VkZ2VzW2l5XTtcblx0XHRcdGNvbnN0IGRvdCAgICAgPSBjb29yZF94ICogZWRnZV94ICsgY29vcmRfeSAqIGVkZ2VfeTtcblx0XHRcdGNvbnN0IHJlZ2lvbiAgPSBkb3QgPCAwID8gLTEgOiBkb3QgPiBlZGdlX3ggKiBlZGdlX3ggKyBlZGdlX3kgKiBlZGdlX3kgPyAxIDogMDtcblxuXHRcdFx0bGV0IHRtcF9vdmVybGFwcGluZyA9IGZhbHNlO1xuXHRcdFx0bGV0IHRtcF9vdmVybGFwICAgICA9IDA7XG5cdFx0XHRsZXQgdG1wX292ZXJsYXBfeCAgID0gMDtcblx0XHRcdGxldCB0bXBfb3ZlcmxhcF95ICAgPSAwO1xuXG5cdFx0XHRpZihyZXN1bHQgJiYgYV9pbl9iICYmIGNvb3JkX3ggKiBjb29yZF94ICsgY29vcmRfeSAqIGNvb3JkX3kgPiByYWRpdXNfc3F1YXJlZCkge1xuXHRcdFx0XHRhX2luX2IgPSBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0aWYocmVnaW9uKSB7XG5cdFx0XHRcdGNvbnN0IGxlZnQgICAgID0gcmVnaW9uID09PSAtMTtcblx0XHRcdFx0Y29uc3Qgb3RoZXJfeCAgPSBsZWZ0ID8gKGl4ID09PSAwID8gY291bnQgLSAyIDogaXggLSAyKSA6IChpeCA9PT0gY291bnQgLSAyID8gMCA6IGl4ICsgMik7XG5cdFx0XHRcdGNvbnN0IG90aGVyX3kgID0gb3RoZXJfeCArIDE7XG5cdFx0XHRcdGNvbnN0IGNvb3JkMl94ID0gYl94IC0gYV9jb29yZHNbb3RoZXJfeF07XG5cdFx0XHRcdGNvbnN0IGNvb3JkMl95ID0gYl95IC0gYV9jb29yZHNbb3RoZXJfeV07XG5cdFx0XHRcdGNvbnN0IGVkZ2UyX3ggID0gYV9lZGdlc1tvdGhlcl94XTtcblx0XHRcdFx0Y29uc3QgZWRnZTJfeSAgPSBhX2VkZ2VzW290aGVyX3ldO1xuXHRcdFx0XHRjb25zdCBkb3QyICAgICA9IGNvb3JkMl94ICogZWRnZTJfeCArIGNvb3JkMl95ICogZWRnZTJfeTtcblx0XHRcdFx0Y29uc3QgcmVnaW9uMiAgPSBkb3QyIDwgMCA/IC0xIDogZG90MiA+IGVkZ2UyX3ggKiBlZGdlMl94ICsgZWRnZTJfeSAqIGVkZ2UyX3kgPyAxIDogMDtcblxuXHRcdFx0XHRpZihyZWdpb24yID09PSAtcmVnaW9uKSB7XG5cdFx0XHRcdFx0Y29uc3QgdGFyZ2V0X3ggICAgICAgPSBsZWZ0ID8gY29vcmRfeCA6IGNvb3JkMl94O1xuXHRcdFx0XHRcdGNvbnN0IHRhcmdldF95ICAgICAgID0gbGVmdCA/IGNvb3JkX3kgOiBjb29yZDJfeTtcblx0XHRcdFx0XHRjb25zdCBsZW5ndGhfc3F1YXJlZCA9IHRhcmdldF94ICogdGFyZ2V0X3ggKyB0YXJnZXRfeSAqIHRhcmdldF95O1xuXG5cdFx0XHRcdFx0aWYobGVuZ3RoX3NxdWFyZWQgPiByYWRpdXNfc3F1YXJlZCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmKHJlc3VsdCkge1xuXHRcdFx0XHRcdFx0Y29uc3QgbGVuZ3RoID0gTWF0aC5zcXJ0KGxlbmd0aF9zcXVhcmVkKTtcblxuXHRcdFx0XHRcdFx0dG1wX292ZXJsYXBwaW5nID0gdHJ1ZTtcblx0XHRcdFx0XHRcdHRtcF9vdmVybGFwICAgICA9IGJfcmFkaXVzIC0gbGVuZ3RoO1xuXHRcdFx0XHRcdFx0dG1wX292ZXJsYXBfeCAgID0gdGFyZ2V0X3ggLyBsZW5ndGg7XG5cdFx0XHRcdFx0XHR0bXBfb3ZlcmxhcF95ICAgPSB0YXJnZXRfeSAvIGxlbmd0aDtcblx0XHRcdFx0XHRcdGJfaW5fYSAgICAgICAgICA9IGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0ZWxzZSB7XG5cdFx0XHRcdGNvbnN0IG5vcm1hbF94ICAgICAgICA9IGFfbm9ybWFsc1tpeF07XG5cdFx0XHRcdGNvbnN0IG5vcm1hbF95ICAgICAgICA9IGFfbm9ybWFsc1tpeV07XG5cdFx0XHRcdGNvbnN0IGxlbmd0aCAgICAgICAgICA9IGNvb3JkX3ggKiBub3JtYWxfeCArIGNvb3JkX3kgKiBub3JtYWxfeTtcblx0XHRcdFx0Y29uc3QgYWJzb2x1dGVfbGVuZ3RoID0gbGVuZ3RoIDwgMCA/IC1sZW5ndGggOiBsZW5ndGg7XG5cblx0XHRcdFx0aWYobGVuZ3RoID4gMCAmJiBhYnNvbHV0ZV9sZW5ndGggPiBiX3JhZGl1cykge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmKHJlc3VsdCkge1xuXHRcdFx0XHRcdHRtcF9vdmVybGFwcGluZyA9IHRydWU7XG5cdFx0XHRcdFx0dG1wX292ZXJsYXAgICAgID0gYl9yYWRpdXMgLSBsZW5ndGg7XG5cdFx0XHRcdFx0dG1wX292ZXJsYXBfeCAgID0gbm9ybWFsX3g7XG5cdFx0XHRcdFx0dG1wX292ZXJsYXBfeSAgID0gbm9ybWFsX3k7XG5cblx0XHRcdFx0XHRpZihiX2luX2EgJiYgbGVuZ3RoID49IDAgfHwgdG1wX292ZXJsYXAgPCBiX3JhZGl1czIpIHtcblx0XHRcdFx0XHRcdGJfaW5fYSA9IGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZih0bXBfb3ZlcmxhcHBpbmcgJiYgKG92ZXJsYXAgPT09IG51bGwgfHwgb3ZlcmxhcCA+IHRtcF9vdmVybGFwKSkge1xuXHRcdFx0XHRvdmVybGFwICAgPSB0bXBfb3ZlcmxhcDtcblx0XHRcdFx0b3ZlcmxhcF94ID0gdG1wX292ZXJsYXBfeDtcblx0XHRcdFx0b3ZlcmxhcF95ID0gdG1wX292ZXJsYXBfeTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpZihyZXN1bHQpIHtcblx0XHRyZXN1bHQuYV9pbl9iICAgID0gcmV2ZXJzZSA/IGJfaW5fYSA6IGFfaW5fYjtcblx0XHRyZXN1bHQuYl9pbl9hICAgID0gcmV2ZXJzZSA/IGFfaW5fYiA6IGJfaW5fYTtcblx0XHRyZXN1bHQub3ZlcmxhcCAgID0gb3ZlcmxhcDtcblx0XHRyZXN1bHQub3ZlcmxhcF94ID0gcmV2ZXJzZSA/IC1vdmVybGFwX3ggOiBvdmVybGFwX3g7XG5cdFx0cmVzdWx0Lm92ZXJsYXBfeSA9IHJldmVyc2UgPyAtb3ZlcmxhcF95IDogb3ZlcmxhcF95O1xuXHR9XG5cblx0cmV0dXJuIHRydWU7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lcyBpZiB0d28gY2lyY2xlcyBhcmUgY29sbGlkaW5nXG4gKiBAcGFyYW0ge0NpcmNsZX0gYSBUaGUgc291cmNlIGNpcmNsZSB0byB0ZXN0XG4gKiBAcGFyYW0ge0NpcmNsZX0gYiBUaGUgdGFyZ2V0IGNpcmNsZSB0byB0ZXN0IGFnYWluc3RcbiAqIEBwYXJhbSB7UmVzdWx0fSBbcmVzdWx0ID0gbnVsbF0gQSBSZXN1bHQgb2JqZWN0IG9uIHdoaWNoIHRvIHN0b3JlIGluZm9ybWF0aW9uIGFib3V0IHRoZSBjb2xsaXNpb25cbiAqIEByZXR1cm5zIHtCb29sZWFufVxuICovXG5mdW5jdGlvbiBjaXJjbGVDaXJjbGUoYSwgYiwgcmVzdWx0ID0gbnVsbCkge1xuXHRjb25zdCBhX3JhZGl1cyAgICAgICA9IGEucmFkaXVzICogYS5zY2FsZTtcblx0Y29uc3QgYl9yYWRpdXMgICAgICAgPSBiLnJhZGl1cyAqIGIuc2NhbGU7XG5cdGNvbnN0IGRpZmZlcmVuY2VfeCAgID0gYi54IC0gYS54O1xuXHRjb25zdCBkaWZmZXJlbmNlX3kgICA9IGIueSAtIGEueTtcblx0Y29uc3QgcmFkaXVzX3N1bSAgICAgPSBhX3JhZGl1cyArIGJfcmFkaXVzO1xuXHRjb25zdCBsZW5ndGhfc3F1YXJlZCA9IGRpZmZlcmVuY2VfeCAqIGRpZmZlcmVuY2VfeCArIGRpZmZlcmVuY2VfeSAqIGRpZmZlcmVuY2VfeTtcblxuXHRpZihsZW5ndGhfc3F1YXJlZCA+IHJhZGl1c19zdW0gKiByYWRpdXNfc3VtKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0aWYocmVzdWx0KSB7XG5cdFx0Y29uc3QgbGVuZ3RoID0gTWF0aC5zcXJ0KGxlbmd0aF9zcXVhcmVkKTtcblxuXHRcdHJlc3VsdC5hX2luX2IgICAgPSBhX3JhZGl1cyA8PSBiX3JhZGl1cyAmJiBsZW5ndGggPD0gYl9yYWRpdXMgLSBhX3JhZGl1cztcblx0XHRyZXN1bHQuYl9pbl9hICAgID0gYl9yYWRpdXMgPD0gYV9yYWRpdXMgJiYgbGVuZ3RoIDw9IGFfcmFkaXVzIC0gYl9yYWRpdXM7XG5cdFx0cmVzdWx0Lm92ZXJsYXAgICA9IHJhZGl1c19zdW0gLSBsZW5ndGg7XG5cdFx0cmVzdWx0Lm92ZXJsYXBfeCA9IGRpZmZlcmVuY2VfeCAvIGxlbmd0aDtcblx0XHRyZXN1bHQub3ZlcmxhcF95ID0gZGlmZmVyZW5jZV95IC8gbGVuZ3RoO1xuXHR9XG5cblx0cmV0dXJuIHRydWU7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lcyBpZiB0d28gcG9seWdvbnMgYXJlIHNlcGFyYXRlZCBieSBhbiBheGlzXG4gKiBAcGFyYW0ge0FycmF5PE51bWJlcltdPn0gYV9jb29yZHMgVGhlIGNvb3JkaW5hdGVzIG9mIHRoZSBwb2x5Z29uIHRvIHRlc3RcbiAqIEBwYXJhbSB7QXJyYXk8TnVtYmVyW10+fSBiX2Nvb3JkcyBUaGUgY29vcmRpbmF0ZXMgb2YgdGhlIHBvbHlnb24gdG8gdGVzdCBhZ2FpbnN0XG4gKiBAcGFyYW0ge051bWJlcn0geCBUaGUgWCBkaXJlY3Rpb24gb2YgdGhlIGF4aXNcbiAqIEBwYXJhbSB7TnVtYmVyfSB5IFRoZSBZIGRpcmVjdGlvbiBvZiB0aGUgYXhpc1xuICogQHBhcmFtIHtSZXN1bHR9IFtyZXN1bHQgPSBudWxsXSBBIFJlc3VsdCBvYmplY3Qgb24gd2hpY2ggdG8gc3RvcmUgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGNvbGxpc2lvblxuICogQHJldHVybnMge0Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIHNlcGFyYXRpbmdBeGlzKGFfY29vcmRzLCBiX2Nvb3JkcywgeCwgeSwgcmVzdWx0ID0gbnVsbCkge1xuXHRjb25zdCBhX2NvdW50ID0gYV9jb29yZHMubGVuZ3RoO1xuXHRjb25zdCBiX2NvdW50ID0gYl9jb29yZHMubGVuZ3RoO1xuXG5cdGlmKCFhX2NvdW50IHx8ICFiX2NvdW50KSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHRsZXQgYV9zdGFydCA9IG51bGw7XG5cdGxldCBhX2VuZCAgID0gbnVsbDtcblx0bGV0IGJfc3RhcnQgPSBudWxsO1xuXHRsZXQgYl9lbmQgICA9IG51bGw7XG5cblx0Zm9yKGxldCBpeCA9IDAsIGl5ID0gMTsgaXggPCBhX2NvdW50OyBpeCArPSAyLCBpeSArPSAyKSB7XG5cdFx0Y29uc3QgZG90ID0gYV9jb29yZHNbaXhdICogeCArIGFfY29vcmRzW2l5XSAqIHk7XG5cblx0XHRpZihhX3N0YXJ0ID09PSBudWxsIHx8IGFfc3RhcnQgPiBkb3QpIHtcblx0XHRcdGFfc3RhcnQgPSBkb3Q7XG5cdFx0fVxuXG5cdFx0aWYoYV9lbmQgPT09IG51bGwgfHwgYV9lbmQgPCBkb3QpIHtcblx0XHRcdGFfZW5kID0gZG90O1xuXHRcdH1cblx0fVxuXG5cdGZvcihsZXQgaXggPSAwLCBpeSA9IDE7IGl4IDwgYl9jb3VudDsgaXggKz0gMiwgaXkgKz0gMikge1xuXHRcdGNvbnN0IGRvdCA9IGJfY29vcmRzW2l4XSAqIHggKyBiX2Nvb3Jkc1tpeV0gKiB5O1xuXG5cdFx0aWYoYl9zdGFydCA9PT0gbnVsbCB8fCBiX3N0YXJ0ID4gZG90KSB7XG5cdFx0XHRiX3N0YXJ0ID0gZG90O1xuXHRcdH1cblxuXHRcdGlmKGJfZW5kID09PSBudWxsIHx8IGJfZW5kIDwgZG90KSB7XG5cdFx0XHRiX2VuZCA9IGRvdDtcblx0XHR9XG5cdH1cblxuXHRpZihhX3N0YXJ0ID4gYl9lbmQgfHwgYV9lbmQgPCBiX3N0YXJ0KSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHRpZihyZXN1bHQpIHtcblx0XHRsZXQgb3ZlcmxhcCA9IDA7XG5cblx0XHRpZihhX3N0YXJ0IDwgYl9zdGFydCkge1xuXHRcdFx0cmVzdWx0LmFfaW5fYiA9IGZhbHNlO1xuXG5cdFx0XHRpZihhX2VuZCA8IGJfZW5kKSB7XG5cdFx0XHRcdG92ZXJsYXAgICAgICAgPSBhX2VuZCAtIGJfc3RhcnQ7XG5cdFx0XHRcdHJlc3VsdC5iX2luX2EgPSBmYWxzZTtcblx0XHRcdH1cblx0XHRcdGVsc2Uge1xuXHRcdFx0XHRjb25zdCBvcHRpb24xID0gYV9lbmQgLSBiX3N0YXJ0O1xuXHRcdFx0XHRjb25zdCBvcHRpb24yID0gYl9lbmQgLSBhX3N0YXJ0O1xuXG5cdFx0XHRcdG92ZXJsYXAgPSBvcHRpb24xIDwgb3B0aW9uMiA/IG9wdGlvbjEgOiAtb3B0aW9uMjtcblx0XHRcdH1cblx0XHR9XG5cdFx0ZWxzZSB7XG5cdFx0XHRyZXN1bHQuYl9pbl9hID0gZmFsc2U7XG5cblx0XHRcdGlmKGFfZW5kID4gYl9lbmQpIHtcblx0XHRcdFx0b3ZlcmxhcCAgICAgICA9IGFfc3RhcnQgLSBiX2VuZDtcblx0XHRcdFx0cmVzdWx0LmFfaW5fYiA9IGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSB7XG5cdFx0XHRcdGNvbnN0IG9wdGlvbjEgPSBhX2VuZCAtIGJfc3RhcnQ7XG5cdFx0XHRcdGNvbnN0IG9wdGlvbjIgPSBiX2VuZCAtIGFfc3RhcnQ7XG5cblx0XHRcdFx0b3ZlcmxhcCA9IG9wdGlvbjEgPCBvcHRpb24yID8gb3B0aW9uMSA6IC1vcHRpb24yO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGNvbnN0IGN1cnJlbnRfb3ZlcmxhcCAgPSByZXN1bHQub3ZlcmxhcDtcblx0XHRjb25zdCBhYnNvbHV0ZV9vdmVybGFwID0gb3ZlcmxhcCA8IDAgPyAtb3ZlcmxhcCA6IG92ZXJsYXA7XG5cblx0XHRpZihjdXJyZW50X292ZXJsYXAgPT09IG51bGwgfHwgY3VycmVudF9vdmVybGFwID4gYWJzb2x1dGVfb3ZlcmxhcCkge1xuXHRcdFx0Y29uc3Qgc2lnbiA9IG92ZXJsYXAgPCAwID8gLTEgOiAxO1xuXG5cdFx0XHRyZXN1bHQub3ZlcmxhcCAgID0gYWJzb2x1dGVfb3ZlcmxhcDtcblx0XHRcdHJlc3VsdC5vdmVybGFwX3ggPSB4ICogc2lnbjtcblx0XHRcdHJlc3VsdC5vdmVybGFwX3kgPSB5ICogc2lnbjtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZmFsc2U7XG59XG4iLCJpbXBvcnQgUmVzdWx0IGZyb20gJy4vUmVzdWx0Lm1qcyc7XG5pbXBvcnQgU0FUICAgIGZyb20gJy4vU0FULm1qcyc7XG5cbi8qKlxuICogVGhlIGJhc2UgY2xhc3MgZm9yIGJvZGllcyB1c2VkIHRvIGRldGVjdCBjb2xsaXNpb25zXG4gKiBAY2xhc3NcbiAqIEBwcm90ZWN0ZWRcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQm9keSB7XG5cdC8qKlxuXHQgKiBAY29uc3RydWN0b3Jcblx0ICogQHBhcmFtIHtOdW1iZXJ9IFt4ID0gMF0gVGhlIHN0YXJ0aW5nIFggY29vcmRpbmF0ZVxuXHQgKiBAcGFyYW0ge051bWJlcn0gW3kgPSAwXSBUaGUgc3RhcnRpbmcgWSBjb29yZGluYXRlXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBbcGFkZGluZyA9IDBdIFRoZSBhbW91bnQgdG8gcGFkIHRoZSBib3VuZGluZyB2b2x1bWUgd2hlbiB0ZXN0aW5nIGZvciBwb3RlbnRpYWwgY29sbGlzaW9uc1xuXHQgKi9cblx0Y29uc3RydWN0b3IoeCA9IDAsIHkgPSAwLCBwYWRkaW5nID0gMCkge1xuXHRcdC8qKlxuXHRcdCAqIEBkZXNjIFRoZSBYIGNvb3JkaW5hdGUgb2YgdGhlIGJvZHlcblx0XHQgKiBAdHlwZSB7TnVtYmVyfVxuXHRcdCAqL1xuXHRcdHRoaXMueCA9IHg7XG5cblx0XHQvKipcblx0XHQgKiBAZGVzYyBUaGUgWSBjb29yZGluYXRlIG9mIHRoZSBib2R5XG5cdFx0ICogQHR5cGUge051bWJlcn1cblx0XHQgKi9cblx0XHR0aGlzLnkgPSB5O1xuXG5cdFx0LyoqXG5cdFx0ICogQGRlc2MgVGhlIGFtb3VudCB0byBwYWQgdGhlIGJvdW5kaW5nIHZvbHVtZSB3aGVuIHRlc3RpbmcgZm9yIHBvdGVudGlhbCBjb2xsaXNpb25zXG5cdFx0ICogQHR5cGUge051bWJlcn1cblx0XHQgKi9cblx0XHR0aGlzLnBhZGRpbmcgPSBwYWRkaW5nO1xuXG5cdFx0LyoqIEBwcml2YXRlICovXG5cdFx0dGhpcy5fY2lyY2xlID0gZmFsc2U7XG5cblx0XHQvKiogQHByaXZhdGUgKi9cblx0XHR0aGlzLl9wb2x5Z29uID0gZmFsc2U7XG5cblx0XHQvKiogQHByaXZhdGUgKi9cblx0XHR0aGlzLl9wb2ludCA9IGZhbHNlO1xuXG5cdFx0LyoqIEBwcml2YXRlICovXG5cdFx0dGhpcy5fYnZoID0gbnVsbDtcblxuXHRcdC8qKiBAcHJpdmF0ZSAqL1xuXHRcdHRoaXMuX2J2aF9wYXJlbnQgPSBudWxsO1xuXG5cdFx0LyoqIEBwcml2YXRlICovXG5cdFx0dGhpcy5fYnZoX2JyYW5jaCA9IGZhbHNlO1xuXG5cdFx0LyoqIEBwcml2YXRlICovXG5cdFx0dGhpcy5fYnZoX3BhZGRpbmcgPSBwYWRkaW5nO1xuXG5cdFx0LyoqIEBwcml2YXRlICovXG5cdFx0dGhpcy5fYnZoX21pbl94ID0gMDtcblxuXHRcdC8qKiBAcHJpdmF0ZSAqL1xuXHRcdHRoaXMuX2J2aF9taW5feSA9IDA7XG5cblx0XHQvKiogQHByaXZhdGUgKi9cblx0XHR0aGlzLl9idmhfbWF4X3ggPSAwO1xuXG5cdFx0LyoqIEBwcml2YXRlICovXG5cdFx0dGhpcy5fYnZoX21heF95ID0gMDtcblx0fVxuXG5cdC8qKlxuXHQgKiBEZXRlcm1pbmVzIGlmIHRoZSBib2R5IGlzIGNvbGxpZGluZyB3aXRoIGFub3RoZXIgYm9keVxuXHQgKiBAcGFyYW0ge0NpcmNsZXxQb2x5Z29ufFBvaW50fSB0YXJnZXQgVGhlIHRhcmdldCBib2R5IHRvIHRlc3QgYWdhaW5zdFxuXHQgKiBAcGFyYW0ge1Jlc3VsdH0gW3Jlc3VsdCA9IG51bGxdIEEgUmVzdWx0IG9iamVjdCBvbiB3aGljaCB0byBzdG9yZSBpbmZvcm1hdGlvbiBhYm91dCB0aGUgY29sbGlzaW9uXG5cdCAqIEBwYXJhbSB7Qm9vbGVhbn0gW2FhYmIgPSB0cnVlXSBTZXQgdG8gZmFsc2UgdG8gc2tpcCB0aGUgQUFCQiB0ZXN0ICh1c2VmdWwgaWYgeW91IHVzZSB5b3VyIG93biBwb3RlbnRpYWwgY29sbGlzaW9uIGhldXJpc3RpYylcblx0ICogQHJldHVybnMge0Jvb2xlYW59XG5cdCAqL1xuXHRjb2xsaWRlcyh0YXJnZXQsIHJlc3VsdCA9IG51bGwsIGFhYmIgPSB0cnVlKSB7XG5cdFx0cmV0dXJuIFNBVCh0aGlzLCB0YXJnZXQsIHJlc3VsdCwgYWFiYik7XG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBhIGxpc3Qgb2YgcG90ZW50aWFsIGNvbGxpc2lvbnNcblx0ICogQHJldHVybnMge0FycmF5PEJvZHk+fVxuXHQgKi9cblx0cG90ZW50aWFscygpIHtcblx0XHRjb25zdCBidmggPSB0aGlzLl9idmg7XG5cblx0XHRpZihidmggPT09IG51bGwpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignQm9keSBkb2VzIG5vdCBiZWxvbmcgdG8gYSBjb2xsaXNpb24gc3lzdGVtJyk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGJ2aC5wb3RlbnRpYWxzKHRoaXMpO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJlbW92ZXMgdGhlIGJvZHkgZnJvbSBpdHMgY3VycmVudCBjb2xsaXNpb24gc3lzdGVtXG5cdCAqL1xuXHRyZW1vdmUoKSB7XG5cdFx0Y29uc3QgYnZoID0gdGhpcy5fYnZoO1xuXG5cdFx0aWYoYnZoKSB7XG5cdFx0XHRidmgucmVtb3ZlKHRoaXMsIGZhbHNlKTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogQ3JlYXRlcyBhIHtAbGluayBSZXN1bHR9IHVzZWQgdG8gY29sbGVjdCB0aGUgZGV0YWlsZWQgcmVzdWx0cyBvZiBhIGNvbGxpc2lvbiB0ZXN0XG5cdCAqL1xuXHRjcmVhdGVSZXN1bHQoKSB7XG5cdFx0cmV0dXJuIG5ldyBSZXN1bHQoKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIGEgUmVzdWx0IHVzZWQgdG8gY29sbGVjdCB0aGUgZGV0YWlsZWQgcmVzdWx0cyBvZiBhIGNvbGxpc2lvbiB0ZXN0XG5cdCAqL1xuXHRzdGF0aWMgY3JlYXRlUmVzdWx0KCkge1xuXHRcdHJldHVybiBuZXcgUmVzdWx0KCk7XG5cdH1cbn07XG4iLCJpbXBvcnQgQm9keSBmcm9tICcuL0JvZHkubWpzJztcblxuLyoqXG4gKiBBIGNpcmNsZSB1c2VkIHRvIGRldGVjdCBjb2xsaXNpb25zXG4gKiBAY2xhc3NcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2lyY2xlIGV4dGVuZHMgQm9keSB7XG5cdC8qKlxuXHQgKiBAY29uc3RydWN0b3Jcblx0ICogQHBhcmFtIHtOdW1iZXJ9IFt4ID0gMF0gVGhlIHN0YXJ0aW5nIFggY29vcmRpbmF0ZVxuXHQgKiBAcGFyYW0ge051bWJlcn0gW3kgPSAwXSBUaGUgc3RhcnRpbmcgWSBjb29yZGluYXRlXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBbcmFkaXVzID0gMF0gVGhlIHJhZGl1c1xuXHQgKiBAcGFyYW0ge051bWJlcn0gW3NjYWxlID0gMV0gVGhlIHNjYWxlXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBbcGFkZGluZyA9IDBdIFRoZSBhbW91bnQgdG8gcGFkIHRoZSBib3VuZGluZyB2b2x1bWUgd2hlbiB0ZXN0aW5nIGZvciBwb3RlbnRpYWwgY29sbGlzaW9uc1xuXHQgKi9cblx0Y29uc3RydWN0b3IoeCA9IDAsIHkgPSAwLCByYWRpdXMgPSAwLCBzY2FsZSA9IDEsIHBhZGRpbmcgPSAwKSB7XG5cdFx0c3VwZXIoeCwgeSwgcGFkZGluZyk7XG5cblx0XHQvKipcblx0XHQgKiBAZGVzY1xuXHRcdCAqIEB0eXBlIHtOdW1iZXJ9XG5cdFx0ICovXG5cdFx0dGhpcy5yYWRpdXMgPSByYWRpdXM7XG5cblx0XHQvKipcblx0XHQgKiBAZGVzY1xuXHRcdCAqIEB0eXBlIHtOdW1iZXJ9XG5cdFx0ICovXG5cdFx0dGhpcy5zY2FsZSA9IHNjYWxlO1xuXHR9XG5cblx0LyoqXG5cdCAqIERyYXdzIHRoZSBjaXJjbGUgdG8gYSBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQncyBjdXJyZW50IHBhdGhcblx0ICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGNvbnRleHQgVGhlIGNvbnRleHQgdG8gYWRkIHRoZSBhcmMgdG9cblx0ICovXG5cdGRyYXcoY29udGV4dCkge1xuXHRcdGNvbnN0IHggICAgICA9IHRoaXMueDtcblx0XHRjb25zdCB5ICAgICAgPSB0aGlzLnk7XG5cdFx0Y29uc3QgcmFkaXVzID0gdGhpcy5yYWRpdXMgKiB0aGlzLnNjYWxlO1xuXG5cdFx0Y29udGV4dC5tb3ZlVG8oeCArIHJhZGl1cywgeSk7XG5cdFx0Y29udGV4dC5hcmMoeCwgeSwgcmFkaXVzLCAwLCBNYXRoLlBJICogMik7XG5cdH1cbn07XG4iLCJpbXBvcnQgQm9keSBmcm9tICcuL0JvZHkubWpzJztcblxuLyoqXG4gKiBBIHBvbHlnb24gdXNlZCB0byBkZXRlY3QgY29sbGlzaW9uc1xuICogQGNsYXNzXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvbHlnb24gZXh0ZW5kcyBCb2R5IHtcblx0LyoqXG5cdCAqIEBjb25zdHJ1Y3RvclxuXHQgKiBAcGFyYW0ge051bWJlcn0gW3ggPSAwXSBUaGUgc3RhcnRpbmcgWCBjb29yZGluYXRlXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBbeSA9IDBdIFRoZSBzdGFydGluZyBZIGNvb3JkaW5hdGVcblx0ICogQHBhcmFtIHtBcnJheTxOdW1iZXJbXT59IFtwb2ludHMgPSBbXV0gQW4gYXJyYXkgb2YgY29vcmRpbmF0ZSBwYWlycyBtYWtpbmcgdXAgdGhlIHBvbHlnb24gLSBbW3gxLCB5MV0sIFt4MiwgeTJdLCAuLi5dXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBbYW5nbGUgPSAwXSBUaGUgc3RhcnRpbmcgcm90YXRpb24gaW4gcmFkaWFuc1xuXHQgKiBAcGFyYW0ge051bWJlcn0gW3NjYWxlX3ggPSAxXSBUaGUgc3RhcnRpbmcgc2NhbGUgYWxvbmcgdGhlIFggYXhpc1xuXHQgKiBAcGFyYW0ge051bWJlcn0gW3NjYWxlX3kgPSAxXSBUaGUgc3RhcnRpbmcgc2NhbGUgbG9uZyB0aGUgWSBheGlzXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBbcGFkZGluZyA9IDBdIFRoZSBhbW91bnQgdG8gcGFkIHRoZSBib3VuZGluZyB2b2x1bWUgd2hlbiB0ZXN0aW5nIGZvciBwb3RlbnRpYWwgY29sbGlzaW9uc1xuXHQgKi9cblx0Y29uc3RydWN0b3IoeCA9IDAsIHkgPSAwLCBwb2ludHMgPSBbXSwgYW5nbGUgPSAwLCBzY2FsZV94ID0gMSwgc2NhbGVfeSA9IDEsIHBhZGRpbmcgPSAwKSB7XG5cdFx0c3VwZXIoeCwgeSwgcGFkZGluZyk7XG5cblx0XHQvKipcblx0XHQgKiBAZGVzYyBUaGUgYW5nbGUgb2YgdGhlIGJvZHkgaW4gcmFkaWFuc1xuXHRcdCAqIEB0eXBlIHtOdW1iZXJ9XG5cdFx0ICovXG5cdFx0dGhpcy5hbmdsZSA9IGFuZ2xlO1xuXG5cdFx0LyoqXG5cdFx0ICogQGRlc2MgVGhlIHNjYWxlIG9mIHRoZSBib2R5IGFsb25nIHRoZSBYIGF4aXNcblx0XHQgKiBAdHlwZSB7TnVtYmVyfVxuXHRcdCAqL1xuXHRcdHRoaXMuc2NhbGVfeCA9IHNjYWxlX3g7XG5cblx0XHQvKipcblx0XHQgKiBAZGVzYyBUaGUgc2NhbGUgb2YgdGhlIGJvZHkgYWxvbmcgdGhlIFkgYXhpc1xuXHRcdCAqIEB0eXBlIHtOdW1iZXJ9XG5cdFx0ICovXG5cdFx0dGhpcy5zY2FsZV95ID0gc2NhbGVfeTtcblxuXG5cdFx0LyoqIEBwcml2YXRlICovXG5cdFx0dGhpcy5fcG9seWdvbiA9IHRydWU7XG5cblx0XHQvKiogQHByaXZhdGUgKi9cblx0XHR0aGlzLl94ID0geDtcblxuXHRcdC8qKiBAcHJpdmF0ZSAqL1xuXHRcdHRoaXMuX3kgPSB5O1xuXG5cdFx0LyoqIEBwcml2YXRlICovXG5cdFx0dGhpcy5fYW5nbGUgPSBhbmdsZTtcblxuXHRcdC8qKiBAcHJpdmF0ZSAqL1xuXHRcdHRoaXMuX3NjYWxlX3ggPSBzY2FsZV94O1xuXG5cdFx0LyoqIEBwcml2YXRlICovXG5cdFx0dGhpcy5fc2NhbGVfeSA9IHNjYWxlX3k7XG5cblx0XHQvKiogQHByaXZhdGUgKi9cblx0XHR0aGlzLl9taW5feCA9IDA7XG5cblx0XHQvKiogQHByaXZhdGUgKi9cblx0XHR0aGlzLl9taW5feSA9IDA7XG5cblx0XHQvKiogQHByaXZhdGUgKi9cblx0XHR0aGlzLl9tYXhfeCA9IDA7XG5cblx0XHQvKiogQHByaXZhdGUgKi9cblx0XHR0aGlzLl9tYXhfeSA9IDA7XG5cblx0XHQvKiogQHByaXZhdGUgKi9cblx0XHR0aGlzLl9wb2ludHMgPSBudWxsO1xuXG5cdFx0LyoqIEBwcml2YXRlICovXG5cdFx0dGhpcy5fY29vcmRzID0gbnVsbDtcblxuXHRcdC8qKiBAcHJpdmF0ZSAqL1xuXHRcdHRoaXMuX2VkZ2VzID0gbnVsbDtcblxuXHRcdC8qKiBAcHJpdmF0ZSAqL1xuXHRcdHRoaXMuX25vcm1hbHMgPSBudWxsO1xuXG5cdFx0LyoqIEBwcml2YXRlICovXG5cdFx0dGhpcy5fZGlydHlfY29vcmRzID0gdHJ1ZTtcblxuXHRcdC8qKiBAcHJpdmF0ZSAqL1xuXHRcdHRoaXMuX2RpcnR5X25vcm1hbHMgPSB0cnVlO1xuXG5cdFx0UG9seWdvbi5wcm90b3R5cGUuc2V0UG9pbnRzLmNhbGwodGhpcywgcG9pbnRzKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBEcmF3cyB0aGUgcG9seWdvbiB0byBhIENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCdzIGN1cnJlbnQgcGF0aFxuXHQgKiBAcGFyYW0ge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gY29udGV4dCBUaGUgY29udGV4dCB0byBhZGQgdGhlIHNoYXBlIHRvXG5cdCAqL1xuXHRkcmF3KGNvbnRleHQpIHtcblx0XHRpZihcblx0XHRcdHRoaXMuX2RpcnR5X2Nvb3JkcyB8fFxuXHRcdFx0dGhpcy54ICAgICAgICE9PSB0aGlzLl94IHx8XG5cdFx0XHR0aGlzLnkgICAgICAgIT09IHRoaXMuX3kgfHxcblx0XHRcdHRoaXMuYW5nbGUgICAhPT0gdGhpcy5fYW5nbGUgfHxcblx0XHRcdHRoaXMuc2NhbGVfeCAhPT0gdGhpcy5fc2NhbGVfeCB8fFxuXHRcdFx0dGhpcy5zY2FsZV95ICE9PSB0aGlzLl9zY2FsZV95XG5cdFx0KSB7XG5cdFx0XHR0aGlzLl9jYWxjdWxhdGVDb29yZHMoKTtcblx0XHR9XG5cblx0XHRjb25zdCBjb29yZHMgPSB0aGlzLl9jb29yZHM7XG5cblx0XHRpZihjb29yZHMubGVuZ3RoID09PSAyKSB7XG5cdFx0XHRjb250ZXh0Lm1vdmVUbyhjb29yZHNbMF0sIGNvb3Jkc1sxXSk7XG5cdFx0XHRjb250ZXh0LmFyYyhjb29yZHNbMF0sIGNvb3Jkc1sxXSwgMSwgMCwgTWF0aC5QSSAqIDIpO1xuXHRcdH1cblx0XHRlbHNlIHtcblx0XHRcdGNvbnRleHQubW92ZVRvKGNvb3Jkc1swXSwgY29vcmRzWzFdKTtcblxuXHRcdFx0Zm9yKGxldCBpID0gMjsgaSA8IGNvb3Jkcy5sZW5ndGg7IGkgKz0gMikge1xuXHRcdFx0XHRjb250ZXh0LmxpbmVUbyhjb29yZHNbaV0sIGNvb3Jkc1tpICsgMV0pO1xuXHRcdFx0fVxuXG5cdFx0XHRpZihjb29yZHMubGVuZ3RoID4gNCkge1xuXHRcdFx0XHRjb250ZXh0LmxpbmVUbyhjb29yZHNbMF0sIGNvb3Jkc1sxXSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIHBvaW50cyBtYWtpbmcgdXAgdGhlIHBvbHlnb24uIEl0J3MgaW1wb3J0YW50IHRvIHVzZSB0aGlzIGZ1bmN0aW9uIHdoZW4gY2hhbmdpbmcgdGhlIHBvbHlnb24ncyBzaGFwZSB0byBlbnN1cmUgaW50ZXJuYWwgZGF0YSBpcyBhbHNvIHVwZGF0ZWQuXG5cdCAqIEBwYXJhbSB7QXJyYXk8TnVtYmVyW10+fSBuZXdfcG9pbnRzIEFuIGFycmF5IG9mIGNvb3JkaW5hdGUgcGFpcnMgbWFraW5nIHVwIHRoZSBwb2x5Z29uIC0gW1t4MSwgeTFdLCBbeDIsIHkyXSwgLi4uXVxuXHQgKi9cblx0c2V0UG9pbnRzKG5ld19wb2ludHMpIHtcblx0XHRjb25zdCBjb3VudCA9IG5ld19wb2ludHMubGVuZ3RoO1xuXG5cdFx0dGhpcy5fcG9pbnRzICA9IG5ldyBGbG9hdDY0QXJyYXkoY291bnQgKiAyKTtcblx0XHR0aGlzLl9jb29yZHMgID0gbmV3IEZsb2F0NjRBcnJheShjb3VudCAqIDIpO1xuXHRcdHRoaXMuX2VkZ2VzICAgPSBuZXcgRmxvYXQ2NEFycmF5KGNvdW50ICogMik7XG5cdFx0dGhpcy5fbm9ybWFscyA9IG5ldyBGbG9hdDY0QXJyYXkoY291bnQgKiAyKTtcblxuXHRcdGNvbnN0IHBvaW50cyA9IHRoaXMuX3BvaW50cztcblxuXHRcdGZvcihsZXQgaSA9IDAsIGl4ID0gMCwgaXkgPSAxOyBpIDwgY291bnQ7ICsraSwgaXggKz0gMiwgaXkgKz0gMikge1xuXHRcdFx0Y29uc3QgbmV3X3BvaW50ID0gbmV3X3BvaW50c1tpXTtcblxuXHRcdFx0cG9pbnRzW2l4XSA9IG5ld19wb2ludFswXTtcblx0XHRcdHBvaW50c1tpeV0gPSBuZXdfcG9pbnRbMV07XG5cdFx0fVxuXG5cdFx0dGhpcy5fZGlydHlfY29vcmRzID0gdHJ1ZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDYWxjdWxhdGVzIGFuZCBjYWNoZXMgdGhlIHBvbHlnb24ncyB3b3JsZCBjb29yZGluYXRlcyBiYXNlZCBvbiBpdHMgcG9pbnRzLCBhbmdsZSwgYW5kIHNjYWxlXG5cdCAqL1xuXHRfY2FsY3VsYXRlQ29vcmRzKCkge1xuXHRcdGNvbnN0IHggICAgICAgPSB0aGlzLng7XG5cdFx0Y29uc3QgeSAgICAgICA9IHRoaXMueTtcblx0XHRjb25zdCBhbmdsZSAgID0gdGhpcy5hbmdsZTtcblx0XHRjb25zdCBzY2FsZV94ID0gdGhpcy5zY2FsZV94O1xuXHRcdGNvbnN0IHNjYWxlX3kgPSB0aGlzLnNjYWxlX3k7XG5cdFx0Y29uc3QgcG9pbnRzICA9IHRoaXMuX3BvaW50cztcblx0XHRjb25zdCBjb29yZHMgID0gdGhpcy5fY29vcmRzO1xuXHRcdGNvbnN0IGNvdW50ICAgPSBwb2ludHMubGVuZ3RoO1xuXG5cdFx0bGV0IG1pbl94O1xuXHRcdGxldCBtYXhfeDtcblx0XHRsZXQgbWluX3k7XG5cdFx0bGV0IG1heF95O1xuXG5cdFx0Zm9yKGxldCBpeCA9IDAsIGl5ID0gMTsgaXggPCBjb3VudDsgaXggKz0gMiwgaXkgKz0gMikge1xuXHRcdFx0bGV0IGNvb3JkX3ggPSBwb2ludHNbaXhdICogc2NhbGVfeDtcblx0XHRcdGxldCBjb29yZF95ID0gcG9pbnRzW2l5XSAqIHNjYWxlX3k7XG5cblx0XHRcdGlmKGFuZ2xlKSB7XG5cdFx0XHRcdGNvbnN0IGNvcyAgID0gTWF0aC5jb3MoYW5nbGUpO1xuXHRcdFx0XHRjb25zdCBzaW4gICA9IE1hdGguc2luKGFuZ2xlKTtcblx0XHRcdFx0Y29uc3QgdG1wX3ggPSBjb29yZF94O1xuXHRcdFx0XHRjb25zdCB0bXBfeSA9IGNvb3JkX3k7XG5cblx0XHRcdFx0Y29vcmRfeCA9IHRtcF94ICogY29zIC0gdG1wX3kgKiBzaW47XG5cdFx0XHRcdGNvb3JkX3kgPSB0bXBfeCAqIHNpbiArIHRtcF95ICogY29zO1xuXHRcdFx0fVxuXG5cdFx0XHRjb29yZF94ICs9IHg7XG5cdFx0XHRjb29yZF95ICs9IHk7XG5cblx0XHRcdGNvb3Jkc1tpeF0gPSBjb29yZF94O1xuXHRcdFx0Y29vcmRzW2l5XSA9IGNvb3JkX3k7XG5cblx0XHRcdGlmKGl4ID09PSAwKSB7XG5cdFx0XHRcdG1pbl94ID0gbWF4X3ggPSBjb29yZF94O1xuXHRcdFx0XHRtaW5feSA9IG1heF95ID0gY29vcmRfeTtcblx0XHRcdH1cblx0XHRcdGVsc2Uge1xuXHRcdFx0XHRpZihjb29yZF94IDwgbWluX3gpIHtcblx0XHRcdFx0XHRtaW5feCA9IGNvb3JkX3g7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxzZSBpZihjb29yZF94ID4gbWF4X3gpIHtcblx0XHRcdFx0XHRtYXhfeCA9IGNvb3JkX3g7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZihjb29yZF95IDwgbWluX3kpIHtcblx0XHRcdFx0XHRtaW5feSA9IGNvb3JkX3k7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxzZSBpZihjb29yZF95ID4gbWF4X3kpIHtcblx0XHRcdFx0XHRtYXhfeSA9IGNvb3JkX3k7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHR0aGlzLl94ICAgICAgICAgICAgID0geDtcblx0XHR0aGlzLl95ICAgICAgICAgICAgID0geTtcblx0XHR0aGlzLl9hbmdsZSAgICAgICAgID0gYW5nbGU7XG5cdFx0dGhpcy5fc2NhbGVfeCAgICAgICA9IHNjYWxlX3g7XG5cdFx0dGhpcy5fc2NhbGVfeSAgICAgICA9IHNjYWxlX3k7XG5cdFx0dGhpcy5fbWluX3ggICAgICAgICA9IG1pbl94O1xuXHRcdHRoaXMuX21pbl95ICAgICAgICAgPSBtaW5feTtcblx0XHR0aGlzLl9tYXhfeCAgICAgICAgID0gbWF4X3g7XG5cdFx0dGhpcy5fbWF4X3kgICAgICAgICA9IG1heF95O1xuXHRcdHRoaXMuX2RpcnR5X2Nvb3JkcyAgPSBmYWxzZTtcblx0XHR0aGlzLl9kaXJ0eV9ub3JtYWxzID0gdHJ1ZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDYWxjdWxhdGVzIHRoZSBub3JtYWxzIGFuZCBlZGdlcyBvZiB0aGUgcG9seWdvbidzIHNpZGVzXG5cdCAqL1xuXHRfY2FsY3VsYXRlTm9ybWFscygpIHtcblx0XHRjb25zdCBjb29yZHMgID0gdGhpcy5fY29vcmRzO1xuXHRcdGNvbnN0IGVkZ2VzICAgPSB0aGlzLl9lZGdlcztcblx0XHRjb25zdCBub3JtYWxzID0gdGhpcy5fbm9ybWFscztcblx0XHRjb25zdCBjb3VudCAgID0gY29vcmRzLmxlbmd0aDtcblxuXHRcdGZvcihsZXQgaXggPSAwLCBpeSA9IDE7IGl4IDwgY291bnQ7IGl4ICs9IDIsIGl5ICs9IDIpIHtcblx0XHRcdGNvbnN0IG5leHQgICA9IGl4ICsgMiA8IGNvdW50ID8gaXggKyAyIDogMDtcblx0XHRcdGNvbnN0IHggICAgICA9IGNvb3Jkc1tuZXh0XSAtIGNvb3Jkc1tpeF07XG5cdFx0XHRjb25zdCB5ICAgICAgPSBjb29yZHNbbmV4dCArIDFdIC0gY29vcmRzW2l5XTtcblx0XHRcdGNvbnN0IGxlbmd0aCA9IHggfHwgeSA/IE1hdGguc3FydCh4ICogeCArIHkgKiB5KSA6IDA7XG5cblx0XHRcdGVkZ2VzW2l4XSAgID0geDtcblx0XHRcdGVkZ2VzW2l5XSAgID0geTtcblx0XHRcdG5vcm1hbHNbaXhdID0gbGVuZ3RoID8geSAvIGxlbmd0aCA6IDA7XG5cdFx0XHRub3JtYWxzW2l5XSA9IGxlbmd0aCA/IC14IC8gbGVuZ3RoIDogMDtcblx0XHR9XG5cblx0XHR0aGlzLl9kaXJ0eV9ub3JtYWxzID0gZmFsc2U7XG5cdH1cbn07XG4iLCJpbXBvcnQgUG9seWdvbiBmcm9tICcuL1BvbHlnb24ubWpzJztcblxuLyoqXG4gKiBBIHBvaW50IHVzZWQgdG8gZGV0ZWN0IGNvbGxpc2lvbnNcbiAqIEBjbGFzc1xuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb2ludCBleHRlbmRzIFBvbHlnb24ge1xuXHQvKipcblx0ICogQGNvbnN0cnVjdG9yXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBbeCA9IDBdIFRoZSBzdGFydGluZyBYIGNvb3JkaW5hdGVcblx0ICogQHBhcmFtIHtOdW1iZXJ9IFt5ID0gMF0gVGhlIHN0YXJ0aW5nIFkgY29vcmRpbmF0ZVxuXHQgKiBAcGFyYW0ge051bWJlcn0gW3BhZGRpbmcgPSAwXSBUaGUgYW1vdW50IHRvIHBhZCB0aGUgYm91bmRpbmcgdm9sdW1lIHdoZW4gdGVzdGluZyBmb3IgcG90ZW50aWFsIGNvbGxpc2lvbnNcblx0ICovXG5cdGNvbnN0cnVjdG9yKHggPSAwLCB5ID0gMCwgcGFkZGluZyA9IDApIHtcblx0XHRzdXBlcih4LCB5LCBbWzAsIDBdXSwgMCwgMSwgMSwgcGFkZGluZyk7XG5cblx0XHQvKiogQHByaXZhdGUgKi9cblx0XHR0aGlzLl9wb2ludCA9IHRydWU7XG5cdH1cbn07XG5cblBvaW50LnByb3RvdHlwZS5zZXRQb2ludHMgPSB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgQlZIICAgICBmcm9tICcuL21vZHVsZXMvQlZILm1qcyc7XG5pbXBvcnQgQ2lyY2xlICBmcm9tICcuL21vZHVsZXMvQ2lyY2xlLm1qcyc7XG5pbXBvcnQgUG9seWdvbiBmcm9tICcuL21vZHVsZXMvUG9seWdvbi5tanMnO1xuaW1wb3J0IFBvaW50ICAgZnJvbSAnLi9tb2R1bGVzL1BvaW50Lm1qcyc7XG5pbXBvcnQgUmVzdWx0ICBmcm9tICcuL21vZHVsZXMvUmVzdWx0Lm1qcyc7XG5pbXBvcnQgU0FUICAgICBmcm9tICcuL21vZHVsZXMvU0FULm1qcyc7XG5cbi8qKlxuICogQSBjb2xsaXNpb24gc3lzdGVtIHVzZWQgdG8gdHJhY2sgYm9kaWVzIGluIG9yZGVyIHRvIGltcHJvdmUgY29sbGlzaW9uIGRldGVjdGlvbiBwZXJmb3JtYW5jZVxuICogQGNsYXNzXG4gKi9cbmNsYXNzIENvbGxpc2lvbnMge1xuXHQvKipcblx0ICogQGNvbnN0cnVjdG9yXG5cdCAqL1xuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHQvKiogQHByaXZhdGUgKi9cblx0XHR0aGlzLl9idmggPSBuZXcgQlZIKCk7XG5cdH1cblxuXHQvKipcblx0ICogQ3JlYXRlcyBhIHtAbGluayBDaXJjbGV9IGFuZCBpbnNlcnRzIGl0IGludG8gdGhlIGNvbGxpc2lvbiBzeXN0ZW1cblx0ICogQHBhcmFtIHtOdW1iZXJ9IFt4ID0gMF0gVGhlIHN0YXJ0aW5nIFggY29vcmRpbmF0ZVxuXHQgKiBAcGFyYW0ge051bWJlcn0gW3kgPSAwXSBUaGUgc3RhcnRpbmcgWSBjb29yZGluYXRlXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBbcmFkaXVzID0gMF0gVGhlIHJhZGl1c1xuXHQgKiBAcGFyYW0ge051bWJlcn0gW3NjYWxlID0gMV0gVGhlIHNjYWxlXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBbcGFkZGluZyA9IDBdIFRoZSBhbW91bnQgdG8gcGFkIHRoZSBib3VuZGluZyB2b2x1bWUgd2hlbiB0ZXN0aW5nIGZvciBwb3RlbnRpYWwgY29sbGlzaW9uc1xuXHQgKiBAcmV0dXJucyB7Q2lyY2xlfVxuXHQgKi9cblx0Y3JlYXRlQ2lyY2xlKHggPSAwLCB5ID0gMCwgcmFkaXVzID0gMCwgc2NhbGUgPSAxLCBwYWRkaW5nID0gMCkge1xuXHRcdGNvbnN0IGJvZHkgPSBuZXcgQ2lyY2xlKHgsIHksIHJhZGl1cywgc2NhbGUsIHBhZGRpbmcpO1xuXG5cdFx0dGhpcy5fYnZoLmluc2VydChib2R5KTtcblxuXHRcdHJldHVybiBib2R5O1xuXHR9XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgYSB7QGxpbmsgUG9seWdvbn0gYW5kIGluc2VydHMgaXQgaW50byB0aGUgY29sbGlzaW9uIHN5c3RlbVxuXHQgKiBAcGFyYW0ge051bWJlcn0gW3ggPSAwXSBUaGUgc3RhcnRpbmcgWCBjb29yZGluYXRlXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBbeSA9IDBdIFRoZSBzdGFydGluZyBZIGNvb3JkaW5hdGVcblx0ICogQHBhcmFtIHtBcnJheTxOdW1iZXJbXT59IFtwb2ludHMgPSBbXV0gQW4gYXJyYXkgb2YgY29vcmRpbmF0ZSBwYWlycyBtYWtpbmcgdXAgdGhlIHBvbHlnb24gLSBbW3gxLCB5MV0sIFt4MiwgeTJdLCAuLi5dXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBbYW5nbGUgPSAwXSBUaGUgc3RhcnRpbmcgcm90YXRpb24gaW4gcmFkaWFuc1xuXHQgKiBAcGFyYW0ge051bWJlcn0gW3NjYWxlX3ggPSAxXSBUaGUgc3RhcnRpbmcgc2NhbGUgYWxvbmcgdGhlIFggYXhpc1xuXHQgKiBAcGFyYW0ge051bWJlcn0gW3NjYWxlX3kgPSAxXSBUaGUgc3RhcnRpbmcgc2NhbGUgbG9uZyB0aGUgWSBheGlzXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBbcGFkZGluZyA9IDBdIFRoZSBhbW91bnQgdG8gcGFkIHRoZSBib3VuZGluZyB2b2x1bWUgd2hlbiB0ZXN0aW5nIGZvciBwb3RlbnRpYWwgY29sbGlzaW9uc1xuXHQgKiBAcmV0dXJucyB7UG9seWdvbn1cblx0ICovXG5cdGNyZWF0ZVBvbHlnb24oeCA9IDAsIHkgPSAwLCBwb2ludHMgPSBbWzAsIDBdXSwgYW5nbGUgPSAwLCBzY2FsZV94ID0gMSwgc2NhbGVfeSA9IDEsIHBhZGRpbmcgPSAwKSB7XG5cdFx0Y29uc3QgYm9keSA9IG5ldyBQb2x5Z29uKHgsIHksIHBvaW50cywgYW5nbGUsIHNjYWxlX3gsIHNjYWxlX3ksIHBhZGRpbmcpO1xuXG5cdFx0dGhpcy5fYnZoLmluc2VydChib2R5KTtcblxuXHRcdHJldHVybiBib2R5O1xuXHR9XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgYSB7QGxpbmsgUG9pbnR9IGFuZCBpbnNlcnRzIGl0IGludG8gdGhlIGNvbGxpc2lvbiBzeXN0ZW1cblx0ICogQHBhcmFtIHtOdW1iZXJ9IFt4ID0gMF0gVGhlIHN0YXJ0aW5nIFggY29vcmRpbmF0ZVxuXHQgKiBAcGFyYW0ge051bWJlcn0gW3kgPSAwXSBUaGUgc3RhcnRpbmcgWSBjb29yZGluYXRlXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBbcGFkZGluZyA9IDBdIFRoZSBhbW91bnQgdG8gcGFkIHRoZSBib3VuZGluZyB2b2x1bWUgd2hlbiB0ZXN0aW5nIGZvciBwb3RlbnRpYWwgY29sbGlzaW9uc1xuXHQgKiBAcmV0dXJucyB7UG9pbnR9XG5cdCAqL1xuXHRjcmVhdGVQb2ludCh4ID0gMCwgeSA9IDAsIHBhZGRpbmcgPSAwKSB7XG5cdFx0Y29uc3QgYm9keSA9IG5ldyBQb2ludCh4LCB5LCBwYWRkaW5nKTtcblxuXHRcdHRoaXMuX2J2aC5pbnNlcnQoYm9keSk7XG5cblx0XHRyZXR1cm4gYm9keTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIGEge0BsaW5rIFJlc3VsdH0gdXNlZCB0byBjb2xsZWN0IHRoZSBkZXRhaWxlZCByZXN1bHRzIG9mIGEgY29sbGlzaW9uIHRlc3Rcblx0ICovXG5cdGNyZWF0ZVJlc3VsdCgpIHtcblx0XHRyZXR1cm4gbmV3IFJlc3VsdCgpO1xuXHR9XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgYSBSZXN1bHQgdXNlZCB0byBjb2xsZWN0IHRoZSBkZXRhaWxlZCByZXN1bHRzIG9mIGEgY29sbGlzaW9uIHRlc3Rcblx0ICovXG5cdHN0YXRpYyBjcmVhdGVSZXN1bHQoKSB7XG5cdFx0cmV0dXJuIG5ldyBSZXN1bHQoKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBJbnNlcnRzIGJvZGllcyBpbnRvIHRoZSBjb2xsaXNpb24gc3lzdGVtXG5cdCAqIEBwYXJhbSB7Li4uQ2lyY2xlfC4uLlBvbHlnb258Li4uUG9pbnR9IGJvZGllc1xuXHQgKi9cblx0aW5zZXJ0KC4uLmJvZGllcykge1xuXHRcdGZvcihjb25zdCBib2R5IG9mIGJvZGllcykge1xuXHRcdFx0dGhpcy5fYnZoLmluc2VydChib2R5LCBmYWxzZSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHQvKipcblx0ICogUmVtb3ZlcyBib2RpZXMgZnJvbSB0aGUgY29sbGlzaW9uIHN5c3RlbVxuXHQgKiBAcGFyYW0gey4uLkNpcmNsZXwuLi5Qb2x5Z29ufC4uLlBvaW50fSBib2RpZXNcblx0ICovXG5cdHJlbW92ZSguLi5ib2RpZXMpIHtcblx0XHRmb3IoY29uc3QgYm9keSBvZiBib2RpZXMpIHtcblx0XHRcdHRoaXMuX2J2aC5yZW1vdmUoYm9keSwgZmFsc2UpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0LyoqXG5cdCAqIFVwZGF0ZXMgdGhlIGNvbGxpc2lvbiBzeXN0ZW0uIFRoaXMgc2hvdWxkIGJlIGNhbGxlZCBiZWZvcmUgYW55IGNvbGxpc2lvbnMgYXJlIHRlc3RlZC5cblx0ICovXG5cdHVwZGF0ZSgpIHtcblx0XHR0aGlzLl9idmgudXBkYXRlKCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdC8qKlxuXHQgKiBEcmF3cyB0aGUgYm9kaWVzIHdpdGhpbiB0aGUgc3lzdGVtIHRvIGEgQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEJ3MgY3VycmVudCBwYXRoXG5cdCAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBjb250ZXh0IFRoZSBjb250ZXh0IHRvIGRyYXcgdG9cblx0ICovXG5cdGRyYXcoY29udGV4dCkge1xuXHRcdHJldHVybiB0aGlzLl9idmguZHJhdyhjb250ZXh0KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBEcmF3cyB0aGUgc3lzdGVtJ3MgQlZIIHRvIGEgQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEJ3MgY3VycmVudCBwYXRoLiBUaGlzIGlzIHVzZWZ1bCBmb3IgdGVzdGluZyBvdXQgZGlmZmVyZW50IHBhZGRpbmcgdmFsdWVzIGZvciBib2RpZXMuXG5cdCAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBjb250ZXh0IFRoZSBjb250ZXh0IHRvIGRyYXcgdG9cblx0ICovXG5cdGRyYXdCVkgoY29udGV4dCkge1xuXHRcdHJldHVybiB0aGlzLl9idmguZHJhd0JWSChjb250ZXh0KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgbGlzdCBvZiBwb3RlbnRpYWwgY29sbGlzaW9ucyBmb3IgYSBib2R5XG5cdCAqIEBwYXJhbSB7Q2lyY2xlfFBvbHlnb258UG9pbnR9IGJvZHkgVGhlIGJvZHkgdG8gdGVzdCBmb3IgcG90ZW50aWFsIGNvbGxpc2lvbnMgYWdhaW5zdFxuXHQgKiBAcmV0dXJucyB7QXJyYXk8Qm9keT59XG5cdCAqL1xuXHRwb3RlbnRpYWxzKGJvZHkpIHtcblx0XHRyZXR1cm4gdGhpcy5fYnZoLnBvdGVudGlhbHMoYm9keSk7XG5cdH1cblxuXHQvKipcblx0ICogRGV0ZXJtaW5lcyBpZiB0d28gYm9kaWVzIGFyZSBjb2xsaWRpbmdcblx0ICogQHBhcmFtIHtDaXJjbGV8UG9seWdvbnxQb2ludH0gdGFyZ2V0IFRoZSB0YXJnZXQgYm9keSB0byB0ZXN0IGFnYWluc3Rcblx0ICogQHBhcmFtIHtSZXN1bHR9IFtyZXN1bHQgPSBudWxsXSBBIFJlc3VsdCBvYmplY3Qgb24gd2hpY2ggdG8gc3RvcmUgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGNvbGxpc2lvblxuXHQgKiBAcGFyYW0ge0Jvb2xlYW59IFthYWJiID0gdHJ1ZV0gU2V0IHRvIGZhbHNlIHRvIHNraXAgdGhlIEFBQkIgdGVzdCAodXNlZnVsIGlmIHlvdSB1c2UgeW91ciBvd24gcG90ZW50aWFsIGNvbGxpc2lvbiBoZXVyaXN0aWMpXG5cdCAqIEByZXR1cm5zIHtCb29sZWFufVxuXHQgKi9cblx0Y29sbGlkZXMoc291cmNlLCB0YXJnZXQsIHJlc3VsdCA9IG51bGwsIGFhYmIgPSB0cnVlKSB7XG5cdFx0cmV0dXJuIFNBVChzb3VyY2UsIHRhcmdldCwgcmVzdWx0LCBhYWJiKTtcblx0fVxufTtcblxuZXhwb3J0IHtcblx0Q29sbGlzaW9ucyBhcyBkZWZhdWx0LFxuXHRDb2xsaXNpb25zLFxuXHRSZXN1bHQsXG5cdENpcmNsZSxcblx0UG9seWdvbixcblx0UG9pbnQsXG59O1xuIiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG52YXIgdG9Qb2ludHMgPSBmdW5jdGlvbiB0b1BvaW50cyhfcmVmKSB7XG4gIHZhciB0eXBlID0gX3JlZi50eXBlLFxuICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZiwgWyd0eXBlJ10pO1xuXG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ2NpcmNsZSc6XG4gICAgICByZXR1cm4gZ2V0UG9pbnRzRnJvbUNpcmNsZShwcm9wcyk7XG4gICAgY2FzZSAnZWxsaXBzZSc6XG4gICAgICByZXR1cm4gZ2V0UG9pbnRzRnJvbUVsbGlwc2UocHJvcHMpO1xuICAgIGNhc2UgJ2xpbmUnOlxuICAgICAgcmV0dXJuIGdldFBvaW50c0Zyb21MaW5lKHByb3BzKTtcbiAgICBjYXNlICdwYXRoJzpcbiAgICAgIHJldHVybiBnZXRQb2ludHNGcm9tUGF0aChwcm9wcyk7XG4gICAgY2FzZSAncG9seWdvbic6XG4gICAgICByZXR1cm4gZ2V0UG9pbnRzRnJvbVBvbHlnb24ocHJvcHMpO1xuICAgIGNhc2UgJ3BvbHlsaW5lJzpcbiAgICAgIHJldHVybiBnZXRQb2ludHNGcm9tUG9seWxpbmUocHJvcHMpO1xuICAgIGNhc2UgJ3JlY3QnOlxuICAgICAgcmV0dXJuIGdldFBvaW50c0Zyb21SZWN0KHByb3BzKTtcbiAgICBjYXNlICdnJzpcbiAgICAgIHJldHVybiBnZXRQb2ludHNGcm9tRyhwcm9wcyk7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcignTm90IGEgdmFsaWQgc2hhcGUgdHlwZScpO1xuICB9XG59O1xuXG52YXIgZ2V0UG9pbnRzRnJvbUNpcmNsZSA9IGZ1bmN0aW9uIGdldFBvaW50c0Zyb21DaXJjbGUoX3JlZjIpIHtcbiAgdmFyIGN4ID0gX3JlZjIuY3gsXG4gICAgICBjeSA9IF9yZWYyLmN5LFxuICAgICAgciA9IF9yZWYyLnI7XG5cbiAgcmV0dXJuIFt7IHg6IGN4LCB5OiBjeSAtIHIsIG1vdmVUbzogdHJ1ZSB9LCB7IHg6IGN4LCB5OiBjeSArIHIsIGN1cnZlOiB7IHR5cGU6ICdhcmMnLCByeDogciwgcnk6IHIsIHN3ZWVwRmxhZzogMSB9IH0sIHsgeDogY3gsIHk6IGN5IC0gciwgY3VydmU6IHsgdHlwZTogJ2FyYycsIHJ4OiByLCByeTogciwgc3dlZXBGbGFnOiAxIH0gfV07XG59O1xuXG52YXIgZ2V0UG9pbnRzRnJvbUVsbGlwc2UgPSBmdW5jdGlvbiBnZXRQb2ludHNGcm9tRWxsaXBzZShfcmVmMykge1xuICB2YXIgY3ggPSBfcmVmMy5jeCxcbiAgICAgIGN5ID0gX3JlZjMuY3ksXG4gICAgICByeCA9IF9yZWYzLnJ4LFxuICAgICAgcnkgPSBfcmVmMy5yeTtcblxuICByZXR1cm4gW3sgeDogY3gsIHk6IGN5IC0gcnksIG1vdmVUbzogdHJ1ZSB9LCB7IHg6IGN4LCB5OiBjeSArIHJ5LCBjdXJ2ZTogeyB0eXBlOiAnYXJjJywgcng6IHJ4LCByeTogcnksIHN3ZWVwRmxhZzogMSB9IH0sIHsgeDogY3gsIHk6IGN5IC0gcnksIGN1cnZlOiB7IHR5cGU6ICdhcmMnLCByeDogcngsIHJ5OiByeSwgc3dlZXBGbGFnOiAxIH0gfV07XG59O1xuXG52YXIgZ2V0UG9pbnRzRnJvbUxpbmUgPSBmdW5jdGlvbiBnZXRQb2ludHNGcm9tTGluZShfcmVmNCkge1xuICB2YXIgeDEgPSBfcmVmNC54MSxcbiAgICAgIHgyID0gX3JlZjQueDIsXG4gICAgICB5MSA9IF9yZWY0LnkxLFxuICAgICAgeTIgPSBfcmVmNC55MjtcblxuICByZXR1cm4gW3sgeDogeDEsIHk6IHkxLCBtb3ZlVG86IHRydWUgfSwgeyB4OiB4MiwgeTogeTIgfV07XG59O1xuXG52YXIgdmFsaWRDb21tYW5kcyA9IC9bTW1MbEhoVnZDY1NzUXFUdEFhWnpdL2c7XG5cbnZhciBjb21tYW5kTGVuZ3RocyA9IHtcbiAgQTogNyxcbiAgQzogNixcbiAgSDogMSxcbiAgTDogMixcbiAgTTogMixcbiAgUTogNCxcbiAgUzogNCxcbiAgVDogMixcbiAgVjogMSxcbiAgWjogMFxufTtcblxudmFyIHJlbGF0aXZlQ29tbWFuZHMgPSBbJ2EnLCAnYycsICdoJywgJ2wnLCAnbScsICdxJywgJ3MnLCAndCcsICd2J107XG5cbnZhciBpc1JlbGF0aXZlID0gZnVuY3Rpb24gaXNSZWxhdGl2ZShjb21tYW5kKSB7XG4gIHJldHVybiByZWxhdGl2ZUNvbW1hbmRzLmluZGV4T2YoY29tbWFuZCkgIT09IC0xO1xufTtcblxudmFyIG9wdGlvbmFsQXJjS2V5cyA9IFsneEF4aXNSb3RhdGlvbicsICdsYXJnZUFyY0ZsYWcnLCAnc3dlZXBGbGFnJ107XG5cbnZhciBnZXRDb21tYW5kcyA9IGZ1bmN0aW9uIGdldENvbW1hbmRzKGQpIHtcbiAgcmV0dXJuIGQubWF0Y2godmFsaWRDb21tYW5kcyk7XG59O1xuXG52YXIgZ2V0UGFyYW1zID0gZnVuY3Rpb24gZ2V0UGFyYW1zKGQpIHtcbiAgcmV0dXJuIGQuc3BsaXQodmFsaWRDb21tYW5kcykubWFwKGZ1bmN0aW9uICh2KSB7XG4gICAgcmV0dXJuIHYucmVwbGFjZSgvWzAtOV0rLS9nLCBmdW5jdGlvbiAobSkge1xuICAgICAgcmV0dXJuIG0uc2xpY2UoMCwgLTEpICsgJyAtJztcbiAgICB9KTtcbiAgfSkubWFwKGZ1bmN0aW9uICh2KSB7XG4gICAgcmV0dXJuIHYucmVwbGFjZSgvXFwuWzAtOV0rL2csIGZ1bmN0aW9uIChtKSB7XG4gICAgICByZXR1cm4gbSArICcgJztcbiAgICB9KTtcbiAgfSkubWFwKGZ1bmN0aW9uICh2KSB7XG4gICAgcmV0dXJuIHYudHJpbSgpO1xuICB9KS5maWx0ZXIoZnVuY3Rpb24gKHYpIHtcbiAgICByZXR1cm4gdi5sZW5ndGggPiAwO1xuICB9KS5tYXAoZnVuY3Rpb24gKHYpIHtcbiAgICByZXR1cm4gdi5zcGxpdCgvWyAsXSsvKS5tYXAocGFyc2VGbG9hdCkuZmlsdGVyKGZ1bmN0aW9uIChuKSB7XG4gICAgICByZXR1cm4gIWlzTmFOKG4pO1xuICAgIH0pO1xuICB9KTtcbn07XG5cbnZhciBnZXRQb2ludHNGcm9tUGF0aCA9IGZ1bmN0aW9uIGdldFBvaW50c0Zyb21QYXRoKF9yZWY1KSB7XG4gIHZhciBkID0gX3JlZjUuZDtcblxuICB2YXIgY29tbWFuZHMgPSBnZXRDb21tYW5kcyhkKTtcbiAgdmFyIHBhcmFtcyA9IGdldFBhcmFtcyhkKTtcblxuICB2YXIgcG9pbnRzID0gW107XG5cbiAgdmFyIG1vdmVUbyA9IHZvaWQgMDtcblxuICBmb3IgKHZhciBpID0gMCwgbCA9IGNvbW1hbmRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIHZhciBjb21tYW5kID0gY29tbWFuZHNbaV07XG4gICAgdmFyIHVwcGVyQ2FzZUNvbW1hbmQgPSBjb21tYW5kLnRvVXBwZXJDYXNlKCk7XG4gICAgdmFyIGNvbW1hbmRMZW5ndGggPSBjb21tYW5kTGVuZ3Roc1t1cHBlckNhc2VDb21tYW5kXTtcbiAgICB2YXIgcmVsYXRpdmUgPSBpc1JlbGF0aXZlKGNvbW1hbmQpO1xuXG4gICAgaWYgKGNvbW1hbmRMZW5ndGggPiAwKSB7XG4gICAgICB2YXIgY29tbWFuZFBhcmFtcyA9IHBhcmFtcy5zaGlmdCgpO1xuICAgICAgdmFyIGl0ZXJhdGlvbnMgPSBjb21tYW5kUGFyYW1zLmxlbmd0aCAvIGNvbW1hbmRMZW5ndGg7XG5cbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgaXRlcmF0aW9uczsgaisrKSB7XG4gICAgICAgIHZhciBwcmV2UG9pbnQgPSBwb2ludHNbcG9pbnRzLmxlbmd0aCAtIDFdIHx8IHsgeDogMCwgeTogMCB9O1xuXG4gICAgICAgIHN3aXRjaCAodXBwZXJDYXNlQ29tbWFuZCkge1xuICAgICAgICAgIGNhc2UgJ00nOlxuICAgICAgICAgICAgdmFyIHggPSAocmVsYXRpdmUgPyBwcmV2UG9pbnQueCA6IDApICsgY29tbWFuZFBhcmFtcy5zaGlmdCgpO1xuICAgICAgICAgICAgdmFyIHkgPSAocmVsYXRpdmUgPyBwcmV2UG9pbnQueSA6IDApICsgY29tbWFuZFBhcmFtcy5zaGlmdCgpO1xuXG4gICAgICAgICAgICBpZiAoaiA9PT0gMCkge1xuICAgICAgICAgICAgICBtb3ZlVG8gPSB7IHg6IHgsIHk6IHkgfTtcbiAgICAgICAgICAgICAgcG9pbnRzLnB1c2goeyB4OiB4LCB5OiB5LCBtb3ZlVG86IHRydWUgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwb2ludHMucHVzaCh7IHg6IHgsIHk6IHkgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAnTCc6XG4gICAgICAgICAgICBwb2ludHMucHVzaCh7XG4gICAgICAgICAgICAgIHg6IChyZWxhdGl2ZSA/IHByZXZQb2ludC54IDogMCkgKyBjb21tYW5kUGFyYW1zLnNoaWZ0KCksXG4gICAgICAgICAgICAgIHk6IChyZWxhdGl2ZSA/IHByZXZQb2ludC55IDogMCkgKyBjb21tYW5kUGFyYW1zLnNoaWZ0KClcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgJ0gnOlxuICAgICAgICAgICAgcG9pbnRzLnB1c2goe1xuICAgICAgICAgICAgICB4OiAocmVsYXRpdmUgPyBwcmV2UG9pbnQueCA6IDApICsgY29tbWFuZFBhcmFtcy5zaGlmdCgpLFxuICAgICAgICAgICAgICB5OiBwcmV2UG9pbnQueVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAnVic6XG4gICAgICAgICAgICBwb2ludHMucHVzaCh7XG4gICAgICAgICAgICAgIHg6IHByZXZQb2ludC54LFxuICAgICAgICAgICAgICB5OiAocmVsYXRpdmUgPyBwcmV2UG9pbnQueSA6IDApICsgY29tbWFuZFBhcmFtcy5zaGlmdCgpXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlICdBJzpcbiAgICAgICAgICAgIHBvaW50cy5wdXNoKHtcbiAgICAgICAgICAgICAgY3VydmU6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnYXJjJyxcbiAgICAgICAgICAgICAgICByeDogY29tbWFuZFBhcmFtcy5zaGlmdCgpLFxuICAgICAgICAgICAgICAgIHJ5OiBjb21tYW5kUGFyYW1zLnNoaWZ0KCksXG4gICAgICAgICAgICAgICAgeEF4aXNSb3RhdGlvbjogY29tbWFuZFBhcmFtcy5zaGlmdCgpLFxuICAgICAgICAgICAgICAgIGxhcmdlQXJjRmxhZzogY29tbWFuZFBhcmFtcy5zaGlmdCgpLFxuICAgICAgICAgICAgICAgIHN3ZWVwRmxhZzogY29tbWFuZFBhcmFtcy5zaGlmdCgpXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHg6IChyZWxhdGl2ZSA/IHByZXZQb2ludC54IDogMCkgKyBjb21tYW5kUGFyYW1zLnNoaWZ0KCksXG4gICAgICAgICAgICAgIHk6IChyZWxhdGl2ZSA/IHByZXZQb2ludC55IDogMCkgKyBjb21tYW5kUGFyYW1zLnNoaWZ0KClcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWU7XG4gICAgICAgICAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3IgPSBmYWxzZTtcbiAgICAgICAgICAgIHZhciBfaXRlcmF0b3JFcnJvciA9IHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yID0gb3B0aW9uYWxBcmNLZXlzW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXA7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IChfc3RlcCA9IF9pdGVyYXRvci5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIHZhciBrID0gX3N0ZXAudmFsdWU7XG5cbiAgICAgICAgICAgICAgICBpZiAocG9pbnRzW3BvaW50cy5sZW5ndGggLSAxXVsnY3VydmUnXVtrXSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgZGVsZXRlIHBvaW50c1twb2ludHMubGVuZ3RoIC0gMV1bJ2N1cnZlJ11ba107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICBfaXRlcmF0b3JFcnJvciA9IGVycjtcbiAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uICYmIF9pdGVyYXRvci5yZXR1cm4pIHtcbiAgICAgICAgICAgICAgICAgIF9pdGVyYXRvci5yZXR1cm4oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yKSB7XG4gICAgICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlICdDJzpcbiAgICAgICAgICAgIHBvaW50cy5wdXNoKHtcbiAgICAgICAgICAgICAgY3VydmU6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnY3ViaWMnLFxuICAgICAgICAgICAgICAgIHgxOiAocmVsYXRpdmUgPyBwcmV2UG9pbnQueCA6IDApICsgY29tbWFuZFBhcmFtcy5zaGlmdCgpLFxuICAgICAgICAgICAgICAgIHkxOiAocmVsYXRpdmUgPyBwcmV2UG9pbnQueSA6IDApICsgY29tbWFuZFBhcmFtcy5zaGlmdCgpLFxuICAgICAgICAgICAgICAgIHgyOiAocmVsYXRpdmUgPyBwcmV2UG9pbnQueCA6IDApICsgY29tbWFuZFBhcmFtcy5zaGlmdCgpLFxuICAgICAgICAgICAgICAgIHkyOiAocmVsYXRpdmUgPyBwcmV2UG9pbnQueSA6IDApICsgY29tbWFuZFBhcmFtcy5zaGlmdCgpXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHg6IChyZWxhdGl2ZSA/IHByZXZQb2ludC54IDogMCkgKyBjb21tYW5kUGFyYW1zLnNoaWZ0KCksXG4gICAgICAgICAgICAgIHk6IChyZWxhdGl2ZSA/IHByZXZQb2ludC55IDogMCkgKyBjb21tYW5kUGFyYW1zLnNoaWZ0KClcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgJ1MnOlxuICAgICAgICAgICAgdmFyIHN4MiA9IChyZWxhdGl2ZSA/IHByZXZQb2ludC54IDogMCkgKyBjb21tYW5kUGFyYW1zLnNoaWZ0KCk7XG4gICAgICAgICAgICB2YXIgc3kyID0gKHJlbGF0aXZlID8gcHJldlBvaW50LnkgOiAwKSArIGNvbW1hbmRQYXJhbXMuc2hpZnQoKTtcbiAgICAgICAgICAgIHZhciBzeCA9IChyZWxhdGl2ZSA/IHByZXZQb2ludC54IDogMCkgKyBjb21tYW5kUGFyYW1zLnNoaWZ0KCk7XG4gICAgICAgICAgICB2YXIgc3kgPSAocmVsYXRpdmUgPyBwcmV2UG9pbnQueSA6IDApICsgY29tbWFuZFBhcmFtcy5zaGlmdCgpO1xuXG4gICAgICAgICAgICB2YXIgZGlmZiA9IHt9O1xuXG4gICAgICAgICAgICB2YXIgc3gxID0gdm9pZCAwO1xuICAgICAgICAgICAgdmFyIHN5MSA9IHZvaWQgMDtcblxuICAgICAgICAgICAgaWYgKHByZXZQb2ludC5jdXJ2ZSAmJiBwcmV2UG9pbnQuY3VydmUudHlwZSA9PT0gJ2N1YmljJykge1xuICAgICAgICAgICAgICBkaWZmLnggPSBNYXRoLmFicyhwcmV2UG9pbnQueCAtIHByZXZQb2ludC5jdXJ2ZS54Mik7XG4gICAgICAgICAgICAgIGRpZmYueSA9IE1hdGguYWJzKHByZXZQb2ludC55IC0gcHJldlBvaW50LmN1cnZlLnkyKTtcbiAgICAgICAgICAgICAgc3gxID0gcHJldlBvaW50LnggPCBwcmV2UG9pbnQuY3VydmUueDIgPyBwcmV2UG9pbnQueCAtIGRpZmYueCA6IHByZXZQb2ludC54ICsgZGlmZi54O1xuICAgICAgICAgICAgICBzeTEgPSBwcmV2UG9pbnQueSA8IHByZXZQb2ludC5jdXJ2ZS55MiA/IHByZXZQb2ludC55IC0gZGlmZi55IDogcHJldlBvaW50LnkgKyBkaWZmLnk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBkaWZmLnggPSBNYXRoLmFicyhzeCAtIHN4Mik7XG4gICAgICAgICAgICAgIGRpZmYueSA9IE1hdGguYWJzKHN5IC0gc3kyKTtcbiAgICAgICAgICAgICAgc3gxID0gcHJldlBvaW50Lng7XG4gICAgICAgICAgICAgIHN5MSA9IHByZXZQb2ludC55O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBwb2ludHMucHVzaCh7IGN1cnZlOiB7IHR5cGU6ICdjdWJpYycsIHgxOiBzeDEsIHkxOiBzeTEsIHgyOiBzeDIsIHkyOiBzeTIgfSwgeDogc3gsIHk6IHN5IH0pO1xuXG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgJ1EnOlxuICAgICAgICAgICAgcG9pbnRzLnB1c2goe1xuICAgICAgICAgICAgICBjdXJ2ZToge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdxdWFkcmF0aWMnLFxuICAgICAgICAgICAgICAgIHgxOiAocmVsYXRpdmUgPyBwcmV2UG9pbnQueCA6IDApICsgY29tbWFuZFBhcmFtcy5zaGlmdCgpLFxuICAgICAgICAgICAgICAgIHkxOiAocmVsYXRpdmUgPyBwcmV2UG9pbnQueSA6IDApICsgY29tbWFuZFBhcmFtcy5zaGlmdCgpXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHg6IChyZWxhdGl2ZSA/IHByZXZQb2ludC54IDogMCkgKyBjb21tYW5kUGFyYW1zLnNoaWZ0KCksXG4gICAgICAgICAgICAgIHk6IChyZWxhdGl2ZSA/IHByZXZQb2ludC55IDogMCkgKyBjb21tYW5kUGFyYW1zLnNoaWZ0KClcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgJ1QnOlxuICAgICAgICAgICAgdmFyIHR4ID0gKHJlbGF0aXZlID8gcHJldlBvaW50LnggOiAwKSArIGNvbW1hbmRQYXJhbXMuc2hpZnQoKTtcbiAgICAgICAgICAgIHZhciB0eSA9IChyZWxhdGl2ZSA/IHByZXZQb2ludC55IDogMCkgKyBjb21tYW5kUGFyYW1zLnNoaWZ0KCk7XG5cbiAgICAgICAgICAgIHZhciB0eDEgPSB2b2lkIDA7XG4gICAgICAgICAgICB2YXIgdHkxID0gdm9pZCAwO1xuXG4gICAgICAgICAgICBpZiAocHJldlBvaW50LmN1cnZlICYmIHByZXZQb2ludC5jdXJ2ZS50eXBlID09PSAncXVhZHJhdGljJykge1xuICAgICAgICAgICAgICB2YXIgX2RpZmYgPSB7XG4gICAgICAgICAgICAgICAgeDogTWF0aC5hYnMocHJldlBvaW50LnggLSBwcmV2UG9pbnQuY3VydmUueDEpLFxuICAgICAgICAgICAgICAgIHk6IE1hdGguYWJzKHByZXZQb2ludC55IC0gcHJldlBvaW50LmN1cnZlLnkxKVxuICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgIHR4MSA9IHByZXZQb2ludC54IDwgcHJldlBvaW50LmN1cnZlLngxID8gcHJldlBvaW50LnggLSBfZGlmZi54IDogcHJldlBvaW50LnggKyBfZGlmZi54O1xuICAgICAgICAgICAgICB0eTEgPSBwcmV2UG9pbnQueSA8IHByZXZQb2ludC5jdXJ2ZS55MSA/IHByZXZQb2ludC55IC0gX2RpZmYueSA6IHByZXZQb2ludC55ICsgX2RpZmYueTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHR4MSA9IHByZXZQb2ludC54O1xuICAgICAgICAgICAgICB0eTEgPSBwcmV2UG9pbnQueTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcG9pbnRzLnB1c2goeyBjdXJ2ZTogeyB0eXBlOiAncXVhZHJhdGljJywgeDE6IHR4MSwgeTE6IHR5MSB9LCB4OiB0eCwgeTogdHkgfSk7XG5cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBfcHJldlBvaW50ID0gcG9pbnRzW3BvaW50cy5sZW5ndGggLSAxXSB8fCB7IHg6IDAsIHk6IDAgfTtcblxuICAgICAgaWYgKF9wcmV2UG9pbnQueCAhPT0gbW92ZVRvLnggfHwgX3ByZXZQb2ludC55ICE9PSBtb3ZlVG8ueSkge1xuICAgICAgICBwb2ludHMucHVzaCh7IHg6IG1vdmVUby54LCB5OiBtb3ZlVG8ueSB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gcG9pbnRzO1xufTtcblxudmFyIGdldFBvaW50c0Zyb21Qb2x5Z29uID0gZnVuY3Rpb24gZ2V0UG9pbnRzRnJvbVBvbHlnb24oX3JlZjYpIHtcbiAgdmFyIHBvaW50cyA9IF9yZWY2LnBvaW50cztcblxuICByZXR1cm4gZ2V0UG9pbnRzRnJvbVBvaW50cyh7IGNsb3NlZDogdHJ1ZSwgcG9pbnRzOiBwb2ludHMgfSk7XG59O1xuXG52YXIgZ2V0UG9pbnRzRnJvbVBvbHlsaW5lID0gZnVuY3Rpb24gZ2V0UG9pbnRzRnJvbVBvbHlsaW5lKF9yZWY3KSB7XG4gIHZhciBwb2ludHMgPSBfcmVmNy5wb2ludHM7XG5cbiAgcmV0dXJuIGdldFBvaW50c0Zyb21Qb2ludHMoeyBjbG9zZWQ6IGZhbHNlLCBwb2ludHM6IHBvaW50cyB9KTtcbn07XG5cbnZhciBnZXRQb2ludHNGcm9tUG9pbnRzID0gZnVuY3Rpb24gZ2V0UG9pbnRzRnJvbVBvaW50cyhfcmVmOCkge1xuICB2YXIgY2xvc2VkID0gX3JlZjguY2xvc2VkLFxuICAgICAgcG9pbnRzID0gX3JlZjgucG9pbnRzO1xuXG4gIHZhciBudW1iZXJzID0gcG9pbnRzLnNwbGl0KC9bXFxzLF0rLykubWFwKGZ1bmN0aW9uIChuKSB7XG4gICAgcmV0dXJuIHBhcnNlRmxvYXQobik7XG4gIH0pO1xuXG4gIHZhciBwID0gbnVtYmVycy5yZWR1Y2UoZnVuY3Rpb24gKGFyciwgcG9pbnQsIGkpIHtcbiAgICBpZiAoaSAlIDIgPT09IDApIHtcbiAgICAgIGFyci5wdXNoKHsgeDogcG9pbnQgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFyclsoaSAtIDEpIC8gMl0ueSA9IHBvaW50O1xuICAgIH1cblxuICAgIHJldHVybiBhcnI7XG4gIH0sIFtdKTtcblxuICBpZiAoY2xvc2VkKSB7XG4gICAgcC5wdXNoKF9leHRlbmRzKHt9LCBwWzBdKSk7XG4gIH1cblxuICBwWzBdLm1vdmVUbyA9IHRydWU7XG5cbiAgcmV0dXJuIHA7XG59O1xuXG52YXIgZ2V0UG9pbnRzRnJvbVJlY3QgPSBmdW5jdGlvbiBnZXRQb2ludHNGcm9tUmVjdChfcmVmOSkge1xuICB2YXIgaGVpZ2h0ID0gX3JlZjkuaGVpZ2h0LFxuICAgICAgcnggPSBfcmVmOS5yeCxcbiAgICAgIHJ5ID0gX3JlZjkucnksXG4gICAgICB3aWR0aCA9IF9yZWY5LndpZHRoLFxuICAgICAgeCA9IF9yZWY5LngsXG4gICAgICB5ID0gX3JlZjkueTtcblxuICBpZiAocnggfHwgcnkpIHtcbiAgICByZXR1cm4gZ2V0UG9pbnRzRnJvbVJlY3RXaXRoQ29ybmVyUmFkaXVzKHtcbiAgICAgIGhlaWdodDogaGVpZ2h0LFxuICAgICAgcng6IHJ4IHx8IHJ5LFxuICAgICAgcnk6IHJ5IHx8IHJ4LFxuICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgeDogeCxcbiAgICAgIHk6IHlcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBnZXRQb2ludHNGcm9tQmFzaWNSZWN0KHsgaGVpZ2h0OiBoZWlnaHQsIHdpZHRoOiB3aWR0aCwgeDogeCwgeTogeSB9KTtcbn07XG5cbnZhciBnZXRQb2ludHNGcm9tQmFzaWNSZWN0ID0gZnVuY3Rpb24gZ2V0UG9pbnRzRnJvbUJhc2ljUmVjdChfcmVmMTApIHtcbiAgdmFyIGhlaWdodCA9IF9yZWYxMC5oZWlnaHQsXG4gICAgICB3aWR0aCA9IF9yZWYxMC53aWR0aCxcbiAgICAgIHggPSBfcmVmMTAueCxcbiAgICAgIHkgPSBfcmVmMTAueTtcblxuICByZXR1cm4gW3sgeDogeCwgeTogeSwgbW92ZVRvOiB0cnVlIH0sIHsgeDogeCArIHdpZHRoLCB5OiB5IH0sIHsgeDogeCArIHdpZHRoLCB5OiB5ICsgaGVpZ2h0IH0sIHsgeDogeCwgeTogeSArIGhlaWdodCB9LCB7IHg6IHgsIHk6IHkgfV07XG59O1xuXG52YXIgZ2V0UG9pbnRzRnJvbVJlY3RXaXRoQ29ybmVyUmFkaXVzID0gZnVuY3Rpb24gZ2V0UG9pbnRzRnJvbVJlY3RXaXRoQ29ybmVyUmFkaXVzKF9yZWYxMSkge1xuICB2YXIgaGVpZ2h0ID0gX3JlZjExLmhlaWdodCxcbiAgICAgIHJ4ID0gX3JlZjExLnJ4LFxuICAgICAgcnkgPSBfcmVmMTEucnksXG4gICAgICB3aWR0aCA9IF9yZWYxMS53aWR0aCxcbiAgICAgIHggPSBfcmVmMTEueCxcbiAgICAgIHkgPSBfcmVmMTEueTtcblxuICB2YXIgY3VydmUgPSB7IHR5cGU6ICdhcmMnLCByeDogcngsIHJ5OiByeSwgc3dlZXBGbGFnOiAxIH07XG5cbiAgcmV0dXJuIFt7IHg6IHggKyByeCwgeTogeSwgbW92ZVRvOiB0cnVlIH0sIHsgeDogeCArIHdpZHRoIC0gcngsIHk6IHkgfSwgeyB4OiB4ICsgd2lkdGgsIHk6IHkgKyByeSwgY3VydmU6IGN1cnZlIH0sIHsgeDogeCArIHdpZHRoLCB5OiB5ICsgaGVpZ2h0IC0gcnkgfSwgeyB4OiB4ICsgd2lkdGggLSByeCwgeTogeSArIGhlaWdodCwgY3VydmU6IGN1cnZlIH0sIHsgeDogeCArIHJ4LCB5OiB5ICsgaGVpZ2h0IH0sIHsgeDogeCwgeTogeSArIGhlaWdodCAtIHJ5LCBjdXJ2ZTogY3VydmUgfSwgeyB4OiB4LCB5OiB5ICsgcnkgfSwgeyB4OiB4ICsgcngsIHk6IHksIGN1cnZlOiBjdXJ2ZSB9XTtcbn07XG5cbnZhciBnZXRQb2ludHNGcm9tRyA9IGZ1bmN0aW9uIGdldFBvaW50c0Zyb21HKF9yZWYxMikge1xuICB2YXIgc2hhcGVzID0gX3JlZjEyLnNoYXBlcztcbiAgcmV0dXJuIHNoYXBlcy5tYXAoZnVuY3Rpb24gKHMpIHtcbiAgICByZXR1cm4gdG9Qb2ludHMocyk7XG4gIH0pO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgdG9Qb2ludHM7IiwiaW1wb3J0IHRvUG9pbnRzIGZyb20gJy4vdG9Qb2ludHMnO1xuXG52YXIgcG9pbnRzVG9EID0gZnVuY3Rpb24gcG9pbnRzVG9EKHApIHtcbiAgdmFyIGQgPSAnJztcbiAgdmFyIGkgPSAwO1xuICB2YXIgZmlyc3RQb2ludCA9IHZvaWQgMDtcblxuICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWU7XG4gIHZhciBfZGlkSXRlcmF0b3JFcnJvciA9IGZhbHNlO1xuICB2YXIgX2l0ZXJhdG9yRXJyb3IgPSB1bmRlZmluZWQ7XG5cbiAgdHJ5IHtcbiAgICBmb3IgKHZhciBfaXRlcmF0b3IgPSBwW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXA7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IChfc3RlcCA9IF9pdGVyYXRvci5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZSkge1xuICAgICAgdmFyIHBvaW50ID0gX3N0ZXAudmFsdWU7XG4gICAgICB2YXIgX3BvaW50JGN1cnZlID0gcG9pbnQuY3VydmUsXG4gICAgICAgICAgY3VydmUgPSBfcG9pbnQkY3VydmUgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogX3BvaW50JGN1cnZlLFxuICAgICAgICAgIG1vdmVUbyA9IHBvaW50Lm1vdmVUbyxcbiAgICAgICAgICB4ID0gcG9pbnQueCxcbiAgICAgICAgICB5ID0gcG9pbnQueTtcblxuICAgICAgdmFyIGlzRmlyc3RQb2ludCA9IGkgPT09IDAgfHwgbW92ZVRvO1xuICAgICAgdmFyIGlzTGFzdFBvaW50ID0gaSA9PT0gcC5sZW5ndGggLSAxIHx8IHBbaSArIDFdLm1vdmVUbztcbiAgICAgIHZhciBwcmV2UG9pbnQgPSBpID09PSAwID8gbnVsbCA6IHBbaSAtIDFdO1xuXG4gICAgICBpZiAoaXNGaXJzdFBvaW50KSB7XG4gICAgICAgIGZpcnN0UG9pbnQgPSBwb2ludDtcblxuICAgICAgICBpZiAoIWlzTGFzdFBvaW50KSB7XG4gICAgICAgICAgZCArPSAnTScgKyB4ICsgJywnICsgeTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChjdXJ2ZSkge1xuICAgICAgICBzd2l0Y2ggKGN1cnZlLnR5cGUpIHtcbiAgICAgICAgICBjYXNlICdhcmMnOlxuICAgICAgICAgICAgdmFyIF9wb2ludCRjdXJ2ZTIgPSBwb2ludC5jdXJ2ZSxcbiAgICAgICAgICAgICAgICBfcG9pbnQkY3VydmUyJGxhcmdlQXIgPSBfcG9pbnQkY3VydmUyLmxhcmdlQXJjRmxhZyxcbiAgICAgICAgICAgICAgICBsYXJnZUFyY0ZsYWcgPSBfcG9pbnQkY3VydmUyJGxhcmdlQXIgPT09IHVuZGVmaW5lZCA/IDAgOiBfcG9pbnQkY3VydmUyJGxhcmdlQXIsXG4gICAgICAgICAgICAgICAgcnggPSBfcG9pbnQkY3VydmUyLnJ4LFxuICAgICAgICAgICAgICAgIHJ5ID0gX3BvaW50JGN1cnZlMi5yeSxcbiAgICAgICAgICAgICAgICBfcG9pbnQkY3VydmUyJHN3ZWVwRmwgPSBfcG9pbnQkY3VydmUyLnN3ZWVwRmxhZyxcbiAgICAgICAgICAgICAgICBzd2VlcEZsYWcgPSBfcG9pbnQkY3VydmUyJHN3ZWVwRmwgPT09IHVuZGVmaW5lZCA/IDAgOiBfcG9pbnQkY3VydmUyJHN3ZWVwRmwsXG4gICAgICAgICAgICAgICAgX3BvaW50JGN1cnZlMiR4QXhpc1JvID0gX3BvaW50JGN1cnZlMi54QXhpc1JvdGF0aW9uLFxuICAgICAgICAgICAgICAgIHhBeGlzUm90YXRpb24gPSBfcG9pbnQkY3VydmUyJHhBeGlzUm8gPT09IHVuZGVmaW5lZCA/IDAgOiBfcG9pbnQkY3VydmUyJHhBeGlzUm87XG5cbiAgICAgICAgICAgIGQgKz0gJ0EnICsgcnggKyAnLCcgKyByeSArICcsJyArIHhBeGlzUm90YXRpb24gKyAnLCcgKyBsYXJnZUFyY0ZsYWcgKyAnLCcgKyBzd2VlcEZsYWcgKyAnLCcgKyB4ICsgJywnICsgeTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ2N1YmljJzpcbiAgICAgICAgICAgIHZhciBfcG9pbnQkY3VydmUzID0gcG9pbnQuY3VydmUsXG4gICAgICAgICAgICAgICAgY3gxID0gX3BvaW50JGN1cnZlMy54MSxcbiAgICAgICAgICAgICAgICBjeTEgPSBfcG9pbnQkY3VydmUzLnkxLFxuICAgICAgICAgICAgICAgIGN4MiA9IF9wb2ludCRjdXJ2ZTMueDIsXG4gICAgICAgICAgICAgICAgY3kyID0gX3BvaW50JGN1cnZlMy55MjtcblxuICAgICAgICAgICAgZCArPSAnQycgKyBjeDEgKyAnLCcgKyBjeTEgKyAnLCcgKyBjeDIgKyAnLCcgKyBjeTIgKyAnLCcgKyB4ICsgJywnICsgeTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ3F1YWRyYXRpYyc6XG4gICAgICAgICAgICB2YXIgX3BvaW50JGN1cnZlNCA9IHBvaW50LmN1cnZlLFxuICAgICAgICAgICAgICAgIHF4MSA9IF9wb2ludCRjdXJ2ZTQueDEsXG4gICAgICAgICAgICAgICAgcXkxID0gX3BvaW50JGN1cnZlNC55MTtcblxuICAgICAgICAgICAgZCArPSAnUScgKyBxeDEgKyAnLCcgKyBxeTEgKyAnLCcgKyB4ICsgJywnICsgeTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzTGFzdFBvaW50ICYmIHggPT09IGZpcnN0UG9pbnQueCAmJiB5ID09PSBmaXJzdFBvaW50LnkpIHtcbiAgICAgICAgICBkICs9ICdaJztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChpc0xhc3RQb2ludCAmJiB4ID09PSBmaXJzdFBvaW50LnggJiYgeSA9PT0gZmlyc3RQb2ludC55KSB7XG4gICAgICAgIGQgKz0gJ1onO1xuICAgICAgfSBlbHNlIGlmICh4ICE9PSBwcmV2UG9pbnQueCAmJiB5ICE9PSBwcmV2UG9pbnQueSkge1xuICAgICAgICBkICs9ICdMJyArIHggKyAnLCcgKyB5O1xuICAgICAgfSBlbHNlIGlmICh4ICE9PSBwcmV2UG9pbnQueCkge1xuICAgICAgICBkICs9ICdIJyArIHg7XG4gICAgICB9IGVsc2UgaWYgKHkgIT09IHByZXZQb2ludC55KSB7XG4gICAgICAgIGQgKz0gJ1YnICsgeTtcbiAgICAgIH1cblxuICAgICAgaSsrO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgX2RpZEl0ZXJhdG9yRXJyb3IgPSB0cnVlO1xuICAgIF9pdGVyYXRvckVycm9yID0gZXJyO1xuICB9IGZpbmFsbHkge1xuICAgIHRyeSB7XG4gICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gJiYgX2l0ZXJhdG9yLnJldHVybikge1xuICAgICAgICBfaXRlcmF0b3IucmV0dXJuKCk7XG4gICAgICB9XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcikge1xuICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gZDtcbn07XG5cbnZhciB0b1BhdGggPSBmdW5jdGlvbiB0b1BhdGgocykge1xuICB2YXIgaXNQb2ludHMgPSBBcnJheS5pc0FycmF5KHMpO1xuICB2YXIgaXNHcm91cCA9IGlzUG9pbnRzID8gQXJyYXkuaXNBcnJheShzWzBdKSA6IHMudHlwZSA9PT0gJ2cnO1xuICB2YXIgcG9pbnRzID0gaXNQb2ludHMgPyBzIDogaXNHcm91cCA/IHMuc2hhcGVzLm1hcChmdW5jdGlvbiAoc2hwKSB7XG4gICAgcmV0dXJuIHRvUG9pbnRzKHNocCk7XG4gIH0pIDogdG9Qb2ludHMocyk7XG5cbiAgaWYgKGlzR3JvdXApIHtcbiAgICByZXR1cm4gcG9pbnRzLm1hcChmdW5jdGlvbiAocCkge1xuICAgICAgcmV0dXJuIHBvaW50c1RvRChwKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBwb2ludHNUb0QocG9pbnRzKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHRvUGF0aDsiLCJ2YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbnZhciBnZXRFcnJvcnMgPSBmdW5jdGlvbiBnZXRFcnJvcnMoc2hhcGUpIHtcbiAgdmFyIHJ1bGVzID0gZ2V0UnVsZXMoc2hhcGUpO1xuICB2YXIgZXJyb3JzID0gW107XG5cbiAgcnVsZXMubWFwKGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgdmFyIG1hdGNoID0gX3JlZi5tYXRjaCxcbiAgICAgICAgcHJvcCA9IF9yZWYucHJvcCxcbiAgICAgICAgcmVxdWlyZWQgPSBfcmVmLnJlcXVpcmVkLFxuICAgICAgICB0eXBlID0gX3JlZi50eXBlO1xuXG4gICAgaWYgKHR5cGVvZiBzaGFwZVtwcm9wXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGlmIChyZXF1aXJlZCkge1xuICAgICAgICBlcnJvcnMucHVzaChwcm9wICsgJyBwcm9wIGlzIHJlcXVpcmVkJyArIChwcm9wID09PSAndHlwZScgPyAnJyA6ICcgb24gYSAnICsgc2hhcGUudHlwZSkpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodHlwZW9mIHR5cGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGlmICh0eXBlID09PSAnYXJyYXknKSB7XG4gICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHNoYXBlW3Byb3BdKSkge1xuICAgICAgICAgICAgZXJyb3JzLnB1c2gocHJvcCArICcgcHJvcCBtdXN0IGJlIG9mIHR5cGUgYXJyYXknKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoX3R5cGVvZihzaGFwZVtwcm9wXSkgIT09IHR5cGUpIHtcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHZhbGlkLXR5cGVvZlxuICAgICAgICAgIGVycm9ycy5wdXNoKHByb3AgKyAnIHByb3AgbXVzdCBiZSBvZiB0eXBlICcgKyB0eXBlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShtYXRjaCkpIHtcbiAgICAgICAgaWYgKG1hdGNoLmluZGV4T2Yoc2hhcGVbcHJvcF0pID09PSAtMSkge1xuICAgICAgICAgIGVycm9ycy5wdXNoKHByb3AgKyAnIHByb3AgbXVzdCBiZSBvbmUgb2YgJyArIG1hdGNoLmpvaW4oJywgJykpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICBpZiAoc2hhcGUudHlwZSA9PT0gJ2cnICYmIEFycmF5LmlzQXJyYXkoc2hhcGUuc2hhcGVzKSkge1xuICAgIHZhciBjaGlsZEVycm9ycyA9IHNoYXBlLnNoYXBlcy5tYXAoZnVuY3Rpb24gKHMpIHtcbiAgICAgIHJldHVybiBnZXRFcnJvcnMocyk7XG4gICAgfSk7XG4gICAgcmV0dXJuIFtdLmNvbmNhdC5hcHBseShlcnJvcnMsIGNoaWxkRXJyb3JzKTtcbiAgfVxuXG4gIHJldHVybiBlcnJvcnM7XG59O1xuXG52YXIgZ2V0UnVsZXMgPSBmdW5jdGlvbiBnZXRSdWxlcyhzaGFwZSkge1xuICB2YXIgcnVsZXMgPSBbe1xuICAgIG1hdGNoOiBbJ2NpcmNsZScsICdlbGxpcHNlJywgJ2xpbmUnLCAncGF0aCcsICdwb2x5Z29uJywgJ3BvbHlsaW5lJywgJ3JlY3QnLCAnZyddLFxuICAgIHByb3A6ICd0eXBlJyxcbiAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICB0eXBlOiAnc3RyaW5nJ1xuICB9XTtcblxuICBzd2l0Y2ggKHNoYXBlLnR5cGUpIHtcbiAgICBjYXNlICdjaXJjbGUnOlxuICAgICAgcnVsZXMucHVzaCh7IHByb3A6ICdjeCcsIHJlcXVpcmVkOiB0cnVlLCB0eXBlOiAnbnVtYmVyJyB9KTtcbiAgICAgIHJ1bGVzLnB1c2goeyBwcm9wOiAnY3knLCByZXF1aXJlZDogdHJ1ZSwgdHlwZTogJ251bWJlcicgfSk7XG4gICAgICBydWxlcy5wdXNoKHsgcHJvcDogJ3InLCByZXF1aXJlZDogdHJ1ZSwgdHlwZTogJ251bWJlcicgfSk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ2VsbGlwc2UnOlxuICAgICAgcnVsZXMucHVzaCh7IHByb3A6ICdjeCcsIHJlcXVpcmVkOiB0cnVlLCB0eXBlOiAnbnVtYmVyJyB9KTtcbiAgICAgIHJ1bGVzLnB1c2goeyBwcm9wOiAnY3knLCByZXF1aXJlZDogdHJ1ZSwgdHlwZTogJ251bWJlcicgfSk7XG4gICAgICBydWxlcy5wdXNoKHsgcHJvcDogJ3J4JywgcmVxdWlyZWQ6IHRydWUsIHR5cGU6ICdudW1iZXInIH0pO1xuICAgICAgcnVsZXMucHVzaCh7IHByb3A6ICdyeScsIHJlcXVpcmVkOiB0cnVlLCB0eXBlOiAnbnVtYmVyJyB9KTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnbGluZSc6XG4gICAgICBydWxlcy5wdXNoKHsgcHJvcDogJ3gxJywgcmVxdWlyZWQ6IHRydWUsIHR5cGU6ICdudW1iZXInIH0pO1xuICAgICAgcnVsZXMucHVzaCh7IHByb3A6ICd4MicsIHJlcXVpcmVkOiB0cnVlLCB0eXBlOiAnbnVtYmVyJyB9KTtcbiAgICAgIHJ1bGVzLnB1c2goeyBwcm9wOiAneTEnLCByZXF1aXJlZDogdHJ1ZSwgdHlwZTogJ251bWJlcicgfSk7XG4gICAgICBydWxlcy5wdXNoKHsgcHJvcDogJ3kyJywgcmVxdWlyZWQ6IHRydWUsIHR5cGU6ICdudW1iZXInIH0pO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdwYXRoJzpcbiAgICAgIHJ1bGVzLnB1c2goeyBwcm9wOiAnZCcsIHJlcXVpcmVkOiB0cnVlLCB0eXBlOiAnc3RyaW5nJyB9KTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAncG9seWdvbic6XG4gICAgY2FzZSAncG9seWxpbmUnOlxuICAgICAgcnVsZXMucHVzaCh7IHByb3A6ICdwb2ludHMnLCByZXF1aXJlZDogdHJ1ZSwgdHlwZTogJ3N0cmluZycgfSk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ3JlY3QnOlxuICAgICAgcnVsZXMucHVzaCh7IHByb3A6ICdoZWlnaHQnLCByZXF1aXJlZDogdHJ1ZSwgdHlwZTogJ251bWJlcicgfSk7XG4gICAgICBydWxlcy5wdXNoKHsgcHJvcDogJ3J4JywgdHlwZTogJ251bWJlcicgfSk7XG4gICAgICBydWxlcy5wdXNoKHsgcHJvcDogJ3J5JywgdHlwZTogJ251bWJlcicgfSk7XG4gICAgICBydWxlcy5wdXNoKHsgcHJvcDogJ3dpZHRoJywgcmVxdWlyZWQ6IHRydWUsIHR5cGU6ICdudW1iZXInIH0pO1xuICAgICAgcnVsZXMucHVzaCh7IHByb3A6ICd4JywgcmVxdWlyZWQ6IHRydWUsIHR5cGU6ICdudW1iZXInIH0pO1xuICAgICAgcnVsZXMucHVzaCh7IHByb3A6ICd5JywgcmVxdWlyZWQ6IHRydWUsIHR5cGU6ICdudW1iZXInIH0pO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdnJzpcbiAgICAgIHJ1bGVzLnB1c2goeyBwcm9wOiAnc2hhcGVzJywgcmVxdWlyZWQ6IHRydWUsIHR5cGU6ICdhcnJheScgfSk7XG4gICAgICBicmVhaztcbiAgfVxuXG4gIHJldHVybiBydWxlcztcbn07XG5cbnZhciB2YWxpZCA9IGZ1bmN0aW9uIHZhbGlkKHNoYXBlKSB7XG4gIHZhciBlcnJvcnMgPSBnZXRFcnJvcnMoc2hhcGUpO1xuXG4gIHJldHVybiB7XG4gICAgZXJyb3JzOiBlcnJvcnMsXG4gICAgdmFsaWQ6IGVycm9ycy5sZW5ndGggPT09IDBcbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHZhbGlkOyIsIi8qKiBAbW9kdWxlIERMQSAqL1xyXG5cclxuaW1wb3J0IERlZmF1bHRzIGZyb20gJy4vRGVmYXVsdHMnO1xyXG5pbXBvcnQgQ29sbGlzaW9ucyBmcm9tICdjb2xsaXNpb25zJztcclxuaW1wb3J0IHsgdG9QYXRoIH0gZnJvbSAnc3ZnLXBvaW50cyc7XHJcbmltcG9ydCB7IHNhdmVBcyB9IGZyb20gJ2ZpbGUtc2F2ZXInO1xyXG5cclxuLyoqIFN0cnVjdHVyZSBmb3IgbWFuYWdpbmcgc3RhdGUgYW5kIHByb3BlcnRpZXMgb2YgYWxsIHdhbGtlcnMsIGNsdXN0ZXJzLCBzaGFwZXMsIGFuZCB0aGUgY29sbGlzaW9uIHN5c3RlbS4gKi9cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRExBIHtcclxuICAvKipcclxuICAgKiBDcmVhdGUgYSBuZXcgRExBIG9iamVjdCB3aXRoIHJlZmVyZW5jZSB0byBnbG9iYWwgUDUgaW5zdGFuY2UgYW5kIGFueSBsb2NhbCBza2V0Y2ggU2V0dGluZ3NcclxuICAgKiBAcGFyYW0ge29iamVjdH0gcDUgLSBHbG9iYWwgcDUuanMgaW5zdGFuY2UgcGFzc2VkIGZyb20gbWFpbiBza2V0Y2hcclxuICAgKiBAcGFyYW0ge29iamVjdH0gc2V0dGluZ3MgIC0gT2JqZWN0IGNvbnRhaW5pbmcgYW55IG92ZXJyaWRlIHZhbHVlcyBwYXNzZWQgZnJvbSBza2V0Y2ggdG8gYmUgbWVyZ2VkIHdpdGggZ2xvYmFsIERlZmF1bHRzXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IocDUsIHNldHRpbmdzKSB7XHJcbiAgICB0aGlzLnA1ID0gcDU7XHJcbiAgICB0aGlzLnNldHRpbmdzID0gT2JqZWN0LmFzc2lnbih7fSwgRGVmYXVsdHMsIHNldHRpbmdzKTtcclxuXHJcbiAgICAvLyBTdGF0ZSBmbGFnc1xyXG4gICAgdGhpcy5wYXVzZWQgPSBmYWxzZTtcclxuICAgIHRoaXMuc2hvd1dhbGtlcnMgPSB0aGlzLnNldHRpbmdzLlNob3dXYWxrZXJzO1xyXG4gICAgdGhpcy5zaG93Q2x1c3RlcnMgPSB0aGlzLnNldHRpbmdzLlNob3dDbHVzdGVycztcclxuICAgIHRoaXMuc2hvd1NoYXBlcyA9IHRoaXMuc2V0dGluZ3MuU2hvd1NoYXBlcztcclxuICAgIHRoaXMudXNlRnJhbWUgPSB0aGlzLnNldHRpbmdzLlVzZUZyYW1lO1xyXG4gICAgdGhpcy5yZW5kZXJNb2RlID0gdGhpcy5zZXR0aW5ncy5SZW5kZXJNb2RlO1xyXG5cclxuICAgIC8vIE51bWJlciBvZiBhY3RpdmUgd2Fsa2Vyc1xyXG4gICAgdGhpcy5udW1XYWxrZXJzID0gMDtcclxuXHJcbiAgICAvLyBDdXN0b20gbW92ZW1lbnQgZnVuY3Rpb24gZm9yIGRpcmVjdGVkIGdyb3d0aCBwYXR0ZXJuc1xyXG4gICAgdGhpcy5jdXN0b21Nb3ZlbWVudEZ1bmN0aW9uID0gdW5kZWZpbmVkO1xyXG5cclxuICAgIC8vIE91dGVyIGVkZ2VzIG9mIGFjdGl2ZSBza2V0Y2ggYXJlYSAoc2NyZWVuIG9yIGNvbmZpbmVkIFwiZnJhbWVcIilcclxuICAgIHRoaXMuZWRnZU1hcmdpbiA9IHRoaXMuc2V0dGluZ3MuRWRnZU1hcmdpbjtcclxuICAgIHRoaXMuZWRnZXMgPSB7fTtcclxuICAgIHRoaXMuZnJhbWUgPSB7fTtcclxuXHJcbiAgICBpZiAodHlwZW9mIHRoaXMuc2V0dGluZ3MuRnJhbWVTaXplID09ICdudW1iZXInKSB7XHJcbiAgICAgIHRoaXMuZnJhbWUubGVmdCA9IHdpbmRvdy5pbm5lcldpZHRoIC8gMiAtIHRoaXMuc2V0dGluZ3MuRnJhbWVTaXplIC8gMjtcclxuICAgICAgdGhpcy5mcmFtZS5yaWdodCA9IHdpbmRvdy5pbm5lcldpZHRoIC8gMiArIHRoaXMuc2V0dGluZ3MuRnJhbWVTaXplIC8gMjtcclxuICAgICAgdGhpcy5mcmFtZS50b3AgPSB3aW5kb3cuaW5uZXJIZWlnaHQgLyAyIC0gdGhpcy5zZXR0aW5ncy5GcmFtZVNpemUgLyAyO1xyXG4gICAgICB0aGlzLmZyYW1lLmJvdHRvbSA9IHdpbmRvdy5pbm5lckhlaWdodCAvIDIgKyB0aGlzLnNldHRpbmdzLkZyYW1lU2l6ZSAvIDI7XHJcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB0aGlzLnNldHRpbmdzLkZyYW1lU2l6ZSA9PSAnb2JqZWN0Jykge1xyXG4gICAgICB0aGlzLmZyYW1lLmxlZnQgPSB3aW5kb3cuaW5uZXJXaWR0aCAvIDIgLSB0aGlzLnNldHRpbmdzLkZyYW1lU2l6ZVswXSAvIDI7XHJcbiAgICAgIHRoaXMuZnJhbWUucmlnaHQgPSB3aW5kb3cuaW5uZXJXaWR0aCAvIDIgKyB0aGlzLnNldHRpbmdzLkZyYW1lU2l6ZVswXSAvIDI7XHJcbiAgICAgIHRoaXMuZnJhbWUudG9wID0gd2luZG93LmlubmVySGVpZ2h0IC8gMiAtIHRoaXMuc2V0dGluZ3MuRnJhbWVTaXplWzFdIC8gMjtcclxuICAgICAgdGhpcy5mcmFtZS5ib3R0b20gPSB3aW5kb3cuaW5uZXJIZWlnaHQgLyAyICsgdGhpcy5zZXR0aW5ncy5GcmFtZVNpemVbMV0gLyAyO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMucmVzZXRFZGdlcygpO1xyXG5cclxuICAgIC8vIFByZWNhbGN1bGF0ZSB0aGUgbGFyZ2VzdCBwb3NzaWJsZSBkaXN0YW5jZSBvZiBhbnkgcGFydGljbGUgdG8gY2VudGVyIGZvciB1c2UgaW4gZGlzdGFuY2UtYmFzZWQgZWZmZWN0cyBsYXRlclxyXG4gICAgdGhpcy5tYXhEaXN0YW5jZSA9IHRoaXMucDUuZGlzdCh0aGlzLmVkZ2VzLmxlZnQsIHRoaXMuZWRnZXMudG9wLCB3aW5kb3cuaW5uZXJXaWR0aCAvIDIsIHdpbmRvdy5pbm5lckhlaWdodCAvIDIpO1xyXG5cclxuICAgIC8vIENvbGxpc2lvbiBzeXN0ZW1cclxuICAgIHRoaXMuc3lzdGVtID0gbmV3IENvbGxpc2lvbnMoKTtcclxuICAgIHRoaXMuYm9kaWVzID0gW107XHJcbiAgICB0aGlzLnNoYXBlcyA9IFtdO1xyXG4gICAgdGhpcy5saW5lcyA9IFtdO1xyXG4gIH1cclxuXHJcbiAgLyoqIFJ1biBvbmUgXCJ0aWNrXCIgb2YgdGhlIHNpbXVsYXRpb24gKi9cclxuICBpdGVyYXRlKCkge1xyXG4gICAgLy8gU2tpcCB0aGlzIGl0ZXJhdGlvbiB3aGVuIHRoZSBzaW11bGF0aW9uIGlzIHBhdXNlZFxyXG4gICAgaWYgKHRoaXMucGF1c2VkKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICAvLyBSZXBsZW5pc2ggYW55IHdhbGtlcnMgdGhhdCBzdHVjayB0byB0aGUgY2x1c3RlcihzKSBpbiB0aGUgbGFzdCBpdGVyYXRpb25cclxuICAgIGlmICh0aGlzLnNldHRpbmdzLlJlcGxlbmlzaFdhbGtlcnMgJiYgdGhpcy5udW1XYWxrZXJzIDwgdGhpcy5zZXR0aW5ncy5NYXhXYWxrZXJzKSB7XHJcbiAgICAgIHRoaXMuY3JlYXRlRGVmYXVsdFdhbGtlcnModGhpcy5zZXR0aW5ncy5NYXhXYWxrZXJzIC0gdGhpcy5udW1XYWxrZXJzLCB0aGlzLnNldHRpbmdzLlJlcGxlbmlzaG1lbnRTb3VyY2UpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIE1vdmUgYWxsIHRoZSB3YWxrZXJzXHJcbiAgICB0aGlzLm1vdmVXYWxrZXJzKCk7XHJcblxyXG4gICAgLy8gVXBkYXRlIHRoZSBjb2xsaXNpb24gc3lzdGVtXHJcbiAgICB0aGlzLnN5c3RlbS51cGRhdGUoKTtcclxuXHJcbiAgICAvLyBDaGVjayBmb3IgY29sbGlzaW9ucyBhbmQgY29udmVydCB3YWxrZXJzIHRvIGNsdXN0ZXIgcGFydGljbGVzIGFzIG5lZWRlZFxyXG4gICAgdGhpcy5oYW5kbGVDb2xsaXNpb25zKCk7XHJcblxyXG4gICAgLy8gUmVtb3ZlIGFueSB3YWxrZXJzIHRoYXQgaGF2ZSBiZWVuIHdhbGtpbmcgYXJvdW5kIGZvciB0b28gbG9uZ1xyXG4gICAgdGhpcy5wcnVuZVdhbGtlcnMoKTtcclxuICB9XHJcblxyXG5cclxuICAvKiogRHJhdyBhbGwgb2JqZWN0cyBiYXNlZCBvbiBjdXJyZW50IHZpc2liaWxpdHkgZmxhZ3MgYW5kIGNvbG9ycyAqL1xyXG4gIGRyYXcoKSB7XHJcbiAgICBpZih0aGlzLnNldHRpbmdzLlVzZUNvbG9ycykge1xyXG4gICAgICB0aGlzLnA1LmJhY2tncm91bmQodGhpcy5nZXRDb2xvclN0cmluZ0Zyb21PYmplY3QodGhpcy5zZXR0aW5ncy5CYWNrZ3JvdW5kQ29sb3IpKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMucDUuYmFja2dyb3VuZCgyNTUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIERyYXcgYWxsIGN1c3RvbSBzaGFwZXNcclxuICAgIGlmKHRoaXMuc2hvd1NoYXBlcykge1xyXG4gICAgICBmb3IgKGxldCBzaGFwZSBvZiB0aGlzLnNoYXBlcykge1xyXG4gICAgICAgIGlmKHRoaXMuc2V0dGluZ3MuVXNlQ29sb3JzKSB7XHJcbiAgICAgICAgICB0aGlzLnA1LmZpbGwodGhpcy5nZXRDb2xvclN0cmluZ0Zyb21PYmplY3QodGhpcy5zZXR0aW5ncy5TaGFwZUNvbG9yKSk7XHJcbiAgICAgICAgICB0aGlzLnA1LnN0cm9rZSh0aGlzLmdldENvbG9yU3RyaW5nRnJvbU9iamVjdCh0aGlzLnNldHRpbmdzLlNoYXBlQ29sb3IpKTsgIFxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB0aGlzLnA1Lm5vRmlsbCgpO1xyXG4gICAgICAgICAgdGhpcy5wNS5zdHJva2UoMTAwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5wNS5iZWdpblNoYXBlKCk7XHJcblxyXG4gICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaGFwZS5fY29vcmRzLmxlbmd0aDsgaSArPSAyKSB7XHJcbiAgICAgICAgICAgIHRoaXMucDUudmVydGV4KHNoYXBlLl9jb29yZHNbaV0sIHNoYXBlLl9jb29yZHNbaSArIDFdKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5wNS5lbmRTaGFwZSgpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gRHJhdyBhbGwgd2Fsa2VycyBhbmQgY2x1c3RlcmVkIHBhcnRpY2xlc1xyXG4gICAgaWYodGhpcy5yZW5kZXJNb2RlID09ICdMaW5lcycpIHtcclxuICAgICAgaWYodGhpcy5zZXR0aW5ncy5Vc2VDb2xvcnMpIHtcclxuICAgICAgICB0aGlzLnA1LnN0cm9rZSh0aGlzLmdldENvbG9yU3RyaW5nRnJvbU9iamVjdCh0aGlzLnNldHRpbmdzLkxpbmVDb2xvcikpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMucDUuc3Ryb2tlKDc1KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYodGhpcy5saW5lcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgZm9yKGxldCBsaW5lIG9mIHRoaXMubGluZXMpIHtcclxuICAgICAgICAgIHRoaXMucDUubGluZShsaW5lLnAxLngsIGxpbmUucDEueSwgbGluZS5wMi54LCBsaW5lLnAyLnkpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgZm9yIChsZXQgYm9keSBvZiB0aGlzLmJvZGllcykge1xyXG4gICAgICAgIC8vIFBvaW50c1xyXG4gICAgICAgIGlmIChib2R5Ll9wb2ludCkge1xyXG4gICAgICAgICAgdGhpcy5wNS5ub0ZpbGwoKTtcclxuXHJcbiAgICAgICAgICBpZiAoYm9keS5zdHVjayAmJiB0aGlzLnNob3dDbHVzdGVycykge1xyXG4gICAgICAgICAgICB0aGlzLnA1Lm5vU3Ryb2tlKCk7XHJcblxyXG4gICAgICAgICAgICBpZih0aGlzLnNldHRpbmdzLlVzZUNvbG9ycykge1xyXG4gICAgICAgICAgICAgIHRoaXMucDUuZmlsbCh0aGlzLmdldENvbG9yU3RyaW5nRnJvbU9iamVjdCh0aGlzLnNldHRpbmdzLkNsdXN0ZXJDb2xvcikpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIHRoaXMucDUuZmlsbCgyMDApO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLnA1LmVsbGlwc2UoYm9keS54LCBib2R5LnksIDUpO1xyXG5cclxuICAgICAgICAgIH0gZWxzZSBpZiAoIWJvZHkuc3R1Y2sgJiYgdGhpcy5zaG93V2Fsa2Vycykge1xyXG4gICAgICAgICAgICBpZih0aGlzLnNldHRpbmdzLlVzZUNvbG9ycykge1xyXG4gICAgICAgICAgICAgIHRoaXMucDUuc3Ryb2tlKHRoaXMuZ2V0Q29sb3JTdHJpbmdGcm9tT2JqZWN0KHRoaXMuc2V0dGluZ3MuV2Fsa2VyQ29sb3IpKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICB0aGlzLnA1LnN0cm9rZSgwKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnA1Lm5vU3Ryb2tlKCk7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgdGhpcy5wNS5wb2ludChib2R5LngsIGJvZHkueSk7XHJcblxyXG4gICAgICAgIC8vIENpcmNsZXNcclxuICAgICAgICB9IGVsc2UgaWYgKGJvZHkuX2NpcmNsZSkge1xyXG4gICAgICAgICAgaWYodGhpcy5zZXR0aW5ncy5Vc2VTdHJva2UpIHtcclxuICAgICAgICAgICAgaWYodGhpcy5zZXR0aW5ncy5Vc2VDb2xvcnMpIHtcclxuICAgICAgICAgICAgICB0aGlzLnA1LnN0cm9rZSh0aGlzLmdldENvbG9yU3RyaW5nRnJvbU9iamVjdCh0aGlzLnNldHRpbmdzLkJhY2tncm91bmRDb2xvcikpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIHRoaXMucDUuc3Ryb2tlKDI1NSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMucDUubm9TdHJva2UoKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBpZiAoYm9keS5zdHVjayAmJiB0aGlzLnNob3dDbHVzdGVycykge1xyXG4gICAgICAgICAgICBpZih0aGlzLnNldHRpbmdzLlVzZUNvbG9ycykge1xyXG4gICAgICAgICAgICAgIHRoaXMucDUuZmlsbCh0aGlzLmdldENvbG9yU3RyaW5nRnJvbU9iamVjdCh0aGlzLnNldHRpbmdzLkNsdXN0ZXJDb2xvcikpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIHRoaXMucDUuZmlsbCgxMjApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9IGVsc2UgaWYgKCFib2R5LnN0dWNrICYmIHRoaXMuc2hvd1dhbGtlcnMpIHtcclxuICAgICAgICAgICAgaWYodGhpcy5zZXR0aW5ncy5Vc2VDb2xvcnMpIHtcclxuICAgICAgICAgICAgICB0aGlzLnA1LmZpbGwodGhpcy5nZXRDb2xvclN0cmluZ0Zyb21PYmplY3QodGhpcy5zZXR0aW5ncy5XYWxrZXJDb2xvcikpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIHRoaXMucDUuZmlsbCgyMzApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnA1Lm5vRmlsbCgpO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIHRoaXMucDUuZWxsaXBzZShib2R5LngsIGJvZHkueSwgYm9keS5yYWRpdXMgKiAyKTtcclxuXHJcbiAgICAgICAgLy8gUG9seWdvbnNcclxuICAgICAgICB9IGVsc2UgaWYgKGJvZHkuX3BvbHlnb24pIHtcclxuICAgICAgICAgIGlmKHRoaXMuc2V0dGluZ3MuVXNlU3Ryb2tlKSB7XHJcbiAgICAgICAgICAgIGlmKHRoaXMuc2V0dGluZ3MuVXNlQ29sb3JzKSB7XHJcbiAgICAgICAgICAgICAgdGhpcy5wNS5zdHJva2UodGhpcy5nZXRDb2xvclN0cmluZ0Zyb21PYmplY3QodGhpcy5zZXR0aW5ncy5CYWNrZ3JvdW5kQ29sb3IpKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICB0aGlzLnA1LnN0cm9rZSgyNTUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnA1Lm5vU3Ryb2tlKCk7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgaWYgKGJvZHkuc3R1Y2sgJiYgdGhpcy5zaG93Q2x1c3RlcnMpIHtcclxuICAgICAgICAgICAgaWYodGhpcy5zZXR0aW5ncy5Vc2VDb2xvcnMpIHtcclxuICAgICAgICAgICAgICB0aGlzLnA1LmZpbGwodGhpcy5nZXRDb2xvclN0cmluZ0Zyb21PYmplY3QodGhpcy5zZXR0aW5ncy5DbHVzdGVyQ29sb3IpKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICB0aGlzLnA1LmZpbGwoMTIwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSBlbHNlIGlmICghYm9keS5zdHVjayAmJiB0aGlzLnNob3dXYWxrZXJzKSB7XHJcbiAgICAgICAgICAgIGlmKHRoaXMuc2V0dGluZ3MuVXNlQ29sb3JzKSB7XHJcbiAgICAgICAgICAgICAgdGhpcy5wNS5maWxsKHRoaXMuZ2V0Q29sb3JTdHJpbmdGcm9tT2JqZWN0KHRoaXMuc2V0dGluZ3MuV2Fsa2VyQ29sb3IpKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICB0aGlzLnA1LmZpbGwoMjMwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5wNS5ub0ZpbGwoKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICB0aGlzLnA1LmJlZ2luU2hhcGUoKTtcclxuXHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYm9keS5fY29vcmRzLmxlbmd0aCAtIDE7IGkgKz0gMikge1xyXG4gICAgICAgICAgICAgIHRoaXMucDUudmVydGV4KGJvZHkuX2Nvb3Jkc1tpXSwgYm9keS5fY29vcmRzW2kgKyAxXSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICB0aGlzLnA1LmVuZFNoYXBlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gRHJhdyBhIHNxdWFyZSBhcm91bmQgdGhlIGFjdGl2ZSBhcmVhLCBpZiBzZXRcclxuICAgIGlmICh0aGlzLnVzZUZyYW1lKSB7XHJcbiAgICAgIHRoaXMuZHJhd0ZyYW1lKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKiogRHJhdyBhIHJlY3RhbmdsZSB0byByZXByZXNlbnQgdGhlIGZyYW1lIChib3VuZGluZyBib3gpLCBpZiBhY3RpdmUgKi9cclxuICBkcmF3RnJhbWUoKSB7XHJcbiAgICB0aGlzLnA1Lm5vRmlsbCgpO1xyXG5cclxuICAgIGlmKHRoaXMuc2V0dGluZ3MuVXNlQ29sb3JzKSB7XHJcbiAgICAgIHRoaXMucDUuc3Ryb2tlKHRoaXMuZ2V0Q29sb3JTdHJpbmdGcm9tT2JqZWN0KHRoaXMuc2V0dGluZ3MuRnJhbWVDb2xvcikpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5wNS5zdHJva2UoMCk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHR5cGVvZiB0aGlzLnNldHRpbmdzLkZyYW1lU2l6ZSA9PSAnbnVtYmVyJykge1xyXG4gICAgICB0aGlzLnA1LnJlY3QoXHJcbiAgICAgICAgd2luZG93LmlubmVyV2lkdGggLyAyIC0gdGhpcy5zZXR0aW5ncy5GcmFtZVNpemUgLyAyIC0gMSxcclxuICAgICAgICB3aW5kb3cuaW5uZXJIZWlnaHQgLyAyIC0gdGhpcy5zZXR0aW5ncy5GcmFtZVNpemUgLyAyIC0gMSxcclxuICAgICAgICB0aGlzLnNldHRpbmdzLkZyYW1lU2l6ZSArIDIsXHJcbiAgICAgICAgdGhpcy5zZXR0aW5ncy5GcmFtZVNpemUgKyAyXHJcbiAgICAgICk7XHJcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB0aGlzLnNldHRpbmdzLkZyYW1lU2l6ZSA9PSAnb2JqZWN0Jykge1xyXG4gICAgICB0aGlzLnA1LnJlY3QoXHJcbiAgICAgICAgd2luZG93LmlubmVyV2lkdGggLyAyIC0gdGhpcy5zZXR0aW5ncy5GcmFtZVNpemVbMF0gLyAyIC0gMSxcclxuICAgICAgICB3aW5kb3cuaW5uZXJIZWlnaHQgLyAyIC0gdGhpcy5zZXR0aW5ncy5GcmFtZVNpemVbMV0gLyAyIC0gMSxcclxuICAgICAgICB0aGlzLnNldHRpbmdzLkZyYW1lU2l6ZVswXSArIDIsXHJcbiAgICAgICAgdGhpcy5zZXR0aW5ncy5GcmFtZVNpemVbMV0gKyAyXHJcbiAgICAgIClcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKiBSZWNhbGN1bGF0ZSB0aGUgcG9zaXRpb25zIG9mIHRoZSBmb3VyIGVkZ2VzIG9mIHRoZSBzaW11bGF0aW9uIGJhc2VkIG9uIHdoZXRoZXIgdGhlIGZyYW1lIGlzIGluIHVzZSBvciBub3QuICovXHJcbiAgcmVzZXRFZGdlcygpIHtcclxuICAgIHRoaXMuZWRnZXMubGVmdCA9IHRoaXMudXNlRnJhbWUgPyB0aGlzLmZyYW1lLmxlZnQgOiAwO1xyXG4gICAgdGhpcy5lZGdlcy5yaWdodCA9IHRoaXMudXNlRnJhbWUgPyB0aGlzLmZyYW1lLnJpZ2h0IDogd2luZG93LmlubmVyV2lkdGg7XHJcbiAgICB0aGlzLmVkZ2VzLnRvcCA9IHRoaXMudXNlRnJhbWUgPyB0aGlzLmZyYW1lLnRvcCA6IDA7XHJcbiAgICB0aGlzLmVkZ2VzLmJvdHRvbSA9IHRoaXMudXNlRnJhbWUgPyB0aGlzLmZyYW1lLmJvdHRvbSA6IHdpbmRvdy5pbm5lckhlaWdodDtcclxuICB9XHJcblxyXG4gIFxyXG4gIC8qKiBBcHBseSBCcm93bmlhbiBtb3Rpb24gYW5kIGJpYXMgZm9yY2VzIHRvIGFsbCB3YWxrZXJzIHRvIG1ha2UgdGhlbSBtb3ZlIGEgbGl0dGxlIGJpdC4gKi9cclxuICBtb3ZlV2Fsa2VycygpIHtcclxuICAgIGlmICh0aGlzLmJvZGllcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgIGZvciAobGV0IGJvZHkgb2YgdGhpcy5ib2RpZXMpIHtcclxuICAgICAgICBpZiAoIWJvZHkuc3R1Y2spIHtcclxuICAgICAgICAgIC8vIFN0YXJ0IHdpdGggYSByYW5kb21pemVkIG1vdmVtZW50IChCcm93bmlhbiBtb3Rpb24pXHJcbiAgICAgICAgICBsZXQgZGVsdGFYID0gdGhpcy5wNS5yYW5kb20oLTEsIDEpLFxyXG4gICAgICAgICAgICBkZWx0YVkgPSB0aGlzLnA1LnJhbmRvbSgtMSwgMSksXHJcbiAgICAgICAgICAgIGRlbHRhcztcclxuXHJcbiAgICAgICAgICAvLyBBZGQgaW4gcGVyLXdhbGtlciBiaWFzLCBpZiBlbmFibGVkXHJcbiAgICAgICAgICBpZih0aGlzLnNldHRpbmdzLlVzZVBlcldhbGtlckJpYXMgJiYgYm9keS5oYXNPd25Qcm9wZXJ0eSgnQmlhc1Rvd2FyZHMnKSkge1xyXG4gICAgICAgICAgICBkZWx0YXMgPSB0aGlzLmdldERlbHRhc1Rvd2FyZHMoYm9keS54LCBib2R5LnksIGJvZHkuQmlhc1Rvd2FyZHMueCwgYm9keS5CaWFzVG93YXJkcy55KTtcclxuICAgICAgICAgICAgZGVsdGFYICs9IGRlbHRhcy54O1xyXG4gICAgICAgICAgICBkZWx0YVkgKz0gZGVsdGFzLnk7XHJcblxyXG4gICAgICAgICAgLy8gT3RoZXJ3aXNlIGFkZCBpbiB1bmlmb3JtIGJpYXMgdG8gYWxsIHdhbGtlcnMgKGlmIGRlZmluZWQpXHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgLy8gQWRkIGluIGEgYmlhcyB0b3dhcmRzIGEgc3BlY2lmaWMgZGlyZWN0aW9uLCBpZiBzZXRcclxuICAgICAgICAgICAgc3dpdGNoICh0aGlzLnNldHRpbmdzLkJpYXNUb3dhcmRzKSB7XHJcbiAgICAgICAgICAgICAgY2FzZSAnVG9wJzpcclxuICAgICAgICAgICAgICAgIGRlbHRhWSAtPSB0aGlzLnNldHRpbmdzLkJpYXNGb3JjZTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICBjYXNlICdCb3R0b20nOlxyXG4gICAgICAgICAgICAgICAgZGVsdGFZICs9IHRoaXMuc2V0dGluZ3MuQmlhc0ZvcmNlO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgIGNhc2UgJ0xlZnQnOlxyXG4gICAgICAgICAgICAgICAgZGVsdGFYIC09IHRoaXMuc2V0dGluZ3MuQmlhc0ZvcmNlO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgIGNhc2UgJ1JpZ2h0JzpcclxuICAgICAgICAgICAgICAgIGRlbHRhWCArPSB0aGlzLnNldHRpbmdzLkJpYXNGb3JjZTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICBjYXNlICdDZW50ZXInOlxyXG4gICAgICAgICAgICAgICAgZGVsdGFzID0gdGhpcy5nZXREZWx0YXNUb3dhcmRzKGJvZHkueCwgYm9keS55LCB3aW5kb3cuaW5uZXJXaWR0aCAvIDIsIHdpbmRvdy5pbm5lckhlaWdodCAvIDIpO1xyXG4gICAgICAgICAgICAgICAgZGVsdGFYICs9IGRlbHRhcy54O1xyXG4gICAgICAgICAgICAgICAgZGVsdGFZICs9IGRlbHRhcy55O1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgIGNhc2UgJ0VkZ2VzJzpcclxuICAgICAgICAgICAgICAgIGRlbHRhcyA9IHRoaXMuZ2V0RGVsdGFzVG93YXJkcyhib2R5LngsIGJvZHkueSwgd2luZG93LmlubmVyV2lkdGggLyAyLCB3aW5kb3cuaW5uZXJIZWlnaHQgLyAyKTtcclxuICAgICAgICAgICAgICAgIGRlbHRhWCAtPSBkZWx0YXMueDtcclxuICAgICAgICAgICAgICAgIGRlbHRhWSAtPSBkZWx0YXMueTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICBjYXNlICdFcXVhdG9yJzpcclxuICAgICAgICAgICAgICAgIGlmIChib2R5LnkgPCB3aW5kb3cuaW5uZXJIZWlnaHQgLyAyKSB7XHJcbiAgICAgICAgICAgICAgICAgIGRlbHRhWSArPSB0aGlzLnNldHRpbmdzLkJpYXNGb3JjZTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgIGRlbHRhWSAtPSB0aGlzLnNldHRpbmdzLkJpYXNGb3JjZTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgY2FzZSAnTWVyaWRpYW4nOlxyXG4gICAgICAgICAgICAgICAgaWYgKGJvZHkueCA8IHdpbmRvdy5pbm5lcldpZHRoIC8gMikge1xyXG4gICAgICAgICAgICAgICAgICBkZWx0YVggKz0gdGhpcy5zZXR0aW5ncy5CaWFzRm9yY2U7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICBkZWx0YVggLT0gdGhpcy5zZXR0aW5ncy5CaWFzRm9yY2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgLy8gQXBwbHkgY3VzdG9tIG1vdmVtZW50IGZ1bmN0aW9uLCBpZiBpdCBoYXMgYmVlIHByb3ZpZGVkXHJcbiAgICAgICAgICBpZih0eXBlb2YgdGhpcy5jdXN0b21Nb3ZlbWVudEZ1bmN0aW9uICE9IHVuZGVmaW5lZCAmJiB0aGlzLmN1c3RvbU1vdmVtZW50RnVuY3Rpb24gaW5zdGFuY2VvZiBGdW5jdGlvbikge1xyXG4gICAgICAgICAgICBsZXQgZGVsdGFzID0gdGhpcy5jdXN0b21Nb3ZlbWVudEZ1bmN0aW9uKGJvZHkpO1xyXG4gICAgICAgICAgICBkZWx0YVggKz0gZGVsdGFzLmR4O1xyXG4gICAgICAgICAgICBkZWx0YVkgKz0gZGVsdGFzLmR5O1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIC8vIEVuc3VyZSBvbmx5IHdob2xlIG51bWJlcnMgZm9yIHNpbmdsZS1waXhlbCBwYXJ0aWNsZXMgc28gdGhleSBhcmUgYWx3YXlzIFwib24gbGF0dGljZVwiXHJcbiAgICAgICAgICBpZiAoYm9keS5fcG9pbnQpIHtcclxuICAgICAgICAgICAgZGVsdGFYID0gTWF0aC5yb3VuZChkZWx0YVgpO1xyXG4gICAgICAgICAgICBkZWx0YVkgPSBNYXRoLnJvdW5kKGRlbHRhWSk7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgLy8gQXBwbHkgZGVsdGFzIHRvIHdhbGtlclxyXG4gICAgICAgICAgYm9keS54ICs9IGRlbHRhWDtcclxuICAgICAgICAgIGJvZHkueSArPSBkZWx0YVk7XHJcblxyXG4gICAgICAgICAgLy8gSW5jcmVtZW50IGFnZSBvZiB0aGUgd2Fsa2VyXHJcbiAgICAgICAgICBib2R5LmFnZSsrO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2FsY3VsYXRlcyBtb3ZlbWVudCBkZWx0YXMgZm9yIGEgZ2l2ZW4gd2Fsa2VyIGluIG9yZGVyIHRvIG1vdmUgaXQgdG93YXJkcyBhIGdpdmVuIHBvaW50IGluIHNwYWNlLlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBib2R5WCAtIFggY29vcmRpbmF0ZSBvZiB3YWxrZXIgdG8gbW92ZVxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBib2R5WSAgLSBZIGNvb3JkaW5hdGUgb2Ygd2Fsa2VyIHRvIG1vdmVcclxuICAgKiBAcGFyYW0ge251bWJlcn0gdGFyZ2V0WCAgLSBYIGNvb3JkaW5hdGUgb2YgdGFyZ2V0IHdlIHdhbnQgdG8gbW92ZSB0aGUgd2Fsa2VyIHRvd2FyZHNcclxuICAgKiBAcGFyYW0ge251bWJlcn0gdGFyZ2V0WSAgLSBZWSBjb29yZGluYXRlIG9mIHRhcmdldCB3ZSB3YW50IHRvIG1vdmUgdGhlIHdhbGtlciB0b3dhcmRzXHJcbiAgICogQHJldHVybnMge09iamVjdH0gT2JqZWN0IHdpdGggcHJvcGVydGllcyB4IGFuZCB5IHJlcHJlc2VudGluZyBkaXJlY3Rpb25hbCBmb3JjZXMgdG8gYXBwbHkgdG8gd2Fsa2VyXHJcbiAgICovXHJcbiAgZ2V0RGVsdGFzVG93YXJkcyhib2R5WCwgYm9keVksIHRhcmdldFgsIHRhcmdldFkpIHtcclxuICAgIGxldCBhbmdsZSA9IE1hdGguYXRhbjIodGFyZ2V0WSAtIGJvZHlZLCB0YXJnZXRYIC0gYm9keVgpO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIHg6IE1hdGguY29zKGFuZ2xlKSAqIHRoaXMuc2V0dGluZ3MuQmlhc0ZvcmNlLFxyXG4gICAgICB5OiBNYXRoLnNpbihhbmdsZSkgKiB0aGlzLnNldHRpbmdzLkJpYXNGb3JjZVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqIExvb2sgZm9yIGNvbGxpc2lvbnMgYmV0d2VlbiB3YWxrZXJzIGFuZCBjbHVzdGVyZWQgZWxlbWVudHMsIGNvbnZlcnRpbmcgd2Fsa2VycyB0byBjbHVzdGVyZWQgcGFydGljbGVzIGFzIG5lZWRlZC4gKi9cclxuICBoYW5kbGVDb2xsaXNpb25zKCkge1xyXG4gICAgLy8gTG9vayBmb3IgY29sbGlzaW9ucyBiZXR3ZWVuIHdhbGtlcnMgYW5kIGN1c3RvbSBzaGFwZXNcclxuICAgIGZvciAobGV0IHNoYXBlIG9mIHRoaXMuc2hhcGVzKSB7XHJcbiAgICAgIGNvbnN0IHBvdGVudGlhbHMgPSBzaGFwZS5wb3RlbnRpYWxzKCk7XHJcblxyXG4gICAgICBmb3IgKGxldCBzZWNvbmRCb2R5IG9mIHBvdGVudGlhbHMpIHtcclxuICAgICAgICBpZiAoc2hhcGUuY29sbGlkZXMoc2Vjb25kQm9keSkpIHtcclxuICAgICAgICAgIHNlY29uZEJvZHkuc3R1Y2sgPSB0cnVlO1xyXG4gICAgICAgICAgdGhpcy5udW1XYWxrZXJzLS07XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gTG9vayBmb3IgY29sbGlzaW9ucyBiZXR3ZWVuIHdhbGtlcnMgYW5kIGNsdXN0ZXJlZCBwYXJ0aWNsZXNcclxuICAgIGZvciAobGV0IGJvZHkgb2YgdGhpcy5ib2RpZXMpIHtcclxuICAgICAgLy8gQ3V0IGRvd24gb24gZHVwbGljYXRlIGNvbXB1dGF0aW9ucyBieSBvbmx5IGxvb2tpbmcgZm9yIGNvbGxpc2lvbnMgb24gd2Fsa2Vyc1xyXG4gICAgICBpZiAoYm9keS5zdHVjaykge1xyXG4gICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBMb29rIGZvciBicm9hZHBoYXNlIGNvbGxpc2lvbnNcclxuICAgICAgY29uc3QgcG90ZW50aWFscyA9IGJvZHkucG90ZW50aWFscygpO1xyXG5cclxuICAgICAgZm9yIChsZXQgc2Vjb25kQm9keSBvZiBwb3RlbnRpYWxzKSB7XHJcblxyXG4gICAgICAgIC8vIFBvaW50cyBzaG91bGQgYmUgY2hlY2tlZCBmb3IgYWRqYWNlbmN5IHRvIGEgc3R1Y2sgcGFydGljbGUgXHJcbiAgICAgICAgaWYgKGJvZHkuX3BvaW50KSB7XHJcbiAgICAgICAgICBpZiAoc2Vjb25kQm9keS5zdHVjaykge1xyXG4gICAgICAgICAgICBib2R5LnN0dWNrID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5udW1XYWxrZXJzLS07XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIENpcmNsZXMgYW5kIHBvbHlnb25zIHNob3VsZCBiZSBjaGVja2VkIGZvciBjb2xsaXNpb24gKG92ZXJsYXApIHdpdGggcG90ZW50aWFsc1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBpZiAoc2Vjb25kQm9keS5zdHVjayAmJiBib2R5LmNvbGxpZGVzKHNlY29uZEJvZHkpKSB7XHJcbiAgICAgICAgICAgIGJvZHkuc3R1Y2sgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLm51bVdhbGtlcnMtLTtcclxuXHJcbiAgICAgICAgICAgIGlmKHRoaXMuc2V0dGluZ3MuQ2FwdHVyZUxpbmVzKSB7XHJcbiAgICAgICAgICAgICAgdGhpcy5saW5lcy5wdXNoKHtcclxuICAgICAgICAgICAgICAgIHAxOiB7IHg6IGJvZHkueCwgeTogYm9keS55IH0sXHJcbiAgICAgICAgICAgICAgICBwMjogeyB4OiBzZWNvbmRCb2R5LngsIHk6IHNlY29uZEJvZHkueSB9XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKiBSZW1vdmUgYW55IHdhbGtlcnMgdGhhdCBhcmUgbm8gbG9uZ2VyIFwidXNlZnVsXCIgaW4gYW4gZWZmb3J0IHRvIG1ha2UgdGhlIHNpbXVsYXRpb24gbW9yZSBlZmZpY2llbnQuICovXHJcbiAgcHJ1bmVXYWxrZXJzKCkge1xyXG4gICAgLy8gUmVtb3ZlIGFueSB3YWxrZXJzIHRoYXQgaGF2ZSBiZWVuIHdhbmRlcmluZyBhcm91bmQgZm9yIHRvbyBsb25nXHJcbiAgICBpZih0aGlzLnNldHRpbmdzLlBydW5lT2xkV2Fsa2VycyB8fCB0aGlzLnNldHRpbmdzLlBydW5lRGlzdGFudFdhbGtlcnMpIHtcclxuICAgICAgZm9yKGxldCBbaW5kZXgsIGJvZHldIG9mIHRoaXMuYm9kaWVzLmVudHJpZXMoKSkge1xyXG4gICAgICAgIGlmKFxyXG4gICAgICAgICAgIWJvZHkuc3R1Y2sgJiYgXHJcbiAgICAgICAgICAoXHJcbiAgICAgICAgICAgICh0aGlzLnNldHRpbmdzLlBydW5lT2xkV2Fsa2VycyAmJiBib2R5LmFnZSA+IHRoaXMuc2V0dGluZ3MuTWF4QWdlKSB8fFxyXG4gICAgICAgICAgICAodGhpcy5zZXR0aW5ncy5QcnVuZURpc3RhbnRXYWxrZXJzICYmIHRoaXMucDUuZGlzdChib2R5LngsIGJvZHkueSwgYm9keS5vcmlnaW5hbFgsIGJvZHkub3JpZ2luYWxZKSA+IHRoaXMuc2V0dGluZ3MuTWF4V2FuZGVyRGlzdGFuY2UpXHJcbiAgICAgICAgICApXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICBib2R5LnJlbW92ZSgpO1xyXG4gICAgICAgICAgdGhpcy5ib2RpZXMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICAgIHRoaXMubnVtV2Fsa2Vycy0tO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcblxyXG4gIC8qKlxyXG4gICAqIENyZWF0ZXMgYSBuZXcgYm9keSAod2Fsa2VyIG9yIGNsdXN0ZXJlZCBwYXJ0aWNsZSkgdXNpbmcgdGhlIHByb3ZpZGVkIHBhcmFtZXRlcnMgaW4gdGhlIGNvbGxpc2lvbiBzeXN0ZW0gYW5kIHN0b3JlcyBpdCBpbiBhIHByaXZhdGUgYXJyYXkgZm9yIG1hbmlwdWxhdGlvbiBsYXRlci5cclxuICAgKiBAcGFyYW0ge29iamVjdH0gcGFyYW1zIC0gT2JqZWN0IG9mIHBhcnRpY2xlIHBhcmFtZXRlcnMgc3VjaCBhcyBYL1kgY29vcmRpbmF0ZXMsIHR5cGUsIHNoYXBlLCBhbmQgcm90YXRpb25cclxuICAgKi9cclxuICBjcmVhdGVQYXJ0aWNsZShwYXJhbXMpIHtcclxuICAgIGlmICh0eXBlb2YgcGFyYW1zID09ICd1bmRlZmluZWQnIHx8IHR5cGVvZiBwYXJhbXMgIT0gJ29iamVjdCcpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBib2R5O1xyXG5cclxuICAgIGlmIChwYXJhbXMuaGFzT3duUHJvcGVydHkoJ3R5cGUnKSkge1xyXG4gICAgICBzd2l0Y2ggKHBhcmFtcy50eXBlKSB7XHJcbiAgICAgICAgY2FzZSAnUG9pbnQnOlxyXG4gICAgICAgICAgYm9keSA9IHRoaXMuc3lzdGVtLmNyZWF0ZVBvaW50KE1hdGgucm91bmQocGFyYW1zLngpLCBNYXRoLnJvdW5kKHBhcmFtcy55KSk7XHJcbiAgICAgICAgICBib2R5Ll9wb2ludCA9IHRydWU7XHJcbiAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgY2FzZSAnQ2lyY2xlJzpcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgYm9keSA9IHRoaXMuc3lzdGVtLmNyZWF0ZUNpcmNsZShwYXJhbXMueCwgcGFyYW1zLnksIHBhcmFtcy5kaWFtZXRlciAvIDIpO1xyXG4gICAgICAgICAgYm9keS5fY2lyY2xlID0gdHJ1ZTtcclxuICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICBjYXNlICdQb2x5Z29uJzpcclxuICAgICAgICAgIGJvZHkgPSB0aGlzLnN5c3RlbS5jcmVhdGVQb2x5Z29uKHBhcmFtcy54LCBwYXJhbXMueSwgcGFyYW1zLnBvbHlnb24sIHBhcmFtcy5oYXNPd25Qcm9wZXJ0eSgncm90YXRpb24nKSA/IHRoaXMucDUucmFkaWFucyhwYXJhbXMucm90YXRpb24pIDogMCk7XHJcbiAgICAgICAgICBib2R5Ll9wb2x5Z29uID0gdHJ1ZTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb25zdCBkaWFtZXRlciA9IHBhcmFtcy5oYXNPd25Qcm9wZXJ0eSgnZGlhbWV0ZXInKSA/IHBhcmFtcy5kaWFtZXRlciA6IHRoaXMuc2V0dGluZ3MuQ2lyY2xlRGlhbWV0ZXI7XHJcbiAgICAgIGJvZHkgPSB0aGlzLnN5c3RlbS5jcmVhdGVDaXJjbGUocGFyYW1zLngsIHBhcmFtcy55LCBkaWFtZXRlciAvIDIpO1xyXG4gICAgICBib2R5Ll9jaXJjbGUgPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIGJvZHkuc3R1Y2sgPSBwYXJhbXMuaGFzT3duUHJvcGVydHkoJ3N0dWNrJykgPyBwYXJhbXMuc3R1Y2sgOiBmYWxzZTtcclxuICAgIGJvZHkuYWdlID0gMDtcclxuXHJcbiAgICBpZihwYXJhbXMuaGFzT3duUHJvcGVydHkoJ0JpYXNUb3dhcmRzJykpIHtcclxuICAgICAgYm9keS5CaWFzVG93YXJkcyA9IHBhcmFtcy5CaWFzVG93YXJkcztcclxuICAgIH1cclxuXHJcbiAgICBib2R5Lm9yaWdpbmFsWCA9IGJvZHkueDtcclxuICAgIGJvZHkub3JpZ2luYWxZID0gYm9keS55O1xyXG5cclxuICAgIHRoaXMuYm9kaWVzLnB1c2goYm9keSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBXcmFwcGVyIGZvciBjcmVhdGVQYXJ0aWNsZSgpIHRoYXQgaW5jcmVtZW50cyBpbnRlcm5hbCBjb3VudCBvZiB3YWxrZXJzLlxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXMgLSBPYmplY3Qgb2YgcGFydGljbGUgcGFyYW1ldGVycyBzdWNoIGFzIFgvWSBjb29yZGluYXRlcywgdHlwZSwgc2hhcGUsIGFuZCByb3RhdGlvblxyXG4gICAqL1xyXG4gIGNyZWF0ZVdhbGtlcihwYXJhbXMpIHtcclxuICAgIHRoaXMuY3JlYXRlUGFydGljbGUocGFyYW1zKTtcclxuICAgIHRoaXMubnVtV2Fsa2VycysrO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlIGEgc2V0IG9mIHdhbGtlcnMgaW4gYSBzcGVjaWZpYyBhcmVhIGluIHRoZSBzaW11bGF0aW9uIChjZW50ZXIsIGVkZ2VzLCByYW5kb21seSwgZXRjKS5cclxuICAgKiBAcGFyYW0ge251bWJlcn0gY291bnQgLSBOdW1iZXIgb2Ygd2Fsa2VycyB0byBjcmVhdGVcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gc291cmNlIC0gTG9jYXRpb24gd2hlcmUgd2Fsa2VycyBzaG91bGQgYmUgY3JlYXRlZC5cclxuICAgKi9cclxuICBjcmVhdGVEZWZhdWx0V2Fsa2Vycyhjb3VudCA9IHRoaXMuc2V0dGluZ3MuTWF4V2Fsa2Vycywgc291cmNlID0gdGhpcy5zZXR0aW5ncy5XYWxrZXJTb3VyY2UpIHtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xyXG4gICAgICBsZXQgcGFyYW1zID0ge307XHJcblxyXG4gICAgICBzd2l0Y2ggKHNvdXJjZSkge1xyXG4gICAgICAgIC8vIEVkZ2VzID0gc3Bhd24gd2Fsa2VycyBhdCBzY3JlZW4gZWRnZXNcclxuICAgICAgICBjYXNlICdFZGdlcyc6XHJcbiAgICAgICAgICBsZXQgZWRnZSA9IE1hdGgucm91bmQodGhpcy5wNS5yYW5kb20oMSwgNCkpO1xyXG5cclxuICAgICAgICAgIHN3aXRjaCAoZWRnZSkge1xyXG4gICAgICAgICAgICBjYXNlIDE6IC8vIHRvcFxyXG4gICAgICAgICAgICAgIHBhcmFtcy54ID0gdGhpcy5wNS5yYW5kb20odGhpcy5lZGdlcy5sZWZ0ICsgdGhpcy5lZGdlTWFyZ2luLCB0aGlzLmVkZ2VzLnJpZ2h0IC0gdGhpcy5lZGdlTWFyZ2luKTtcclxuICAgICAgICAgICAgICBwYXJhbXMueSA9IHRoaXMucDUucmFuZG9tKHRoaXMuZWRnZXMudG9wLCB0aGlzLmVkZ2VzLnRvcCArIHRoaXMuZWRnZU1hcmdpbik7XHJcbiAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICBjYXNlIDM6IC8vIGJvdHRvbVxyXG4gICAgICAgICAgICAgIHBhcmFtcy54ID0gdGhpcy5wNS5yYW5kb20odGhpcy5lZGdlcy5sZWZ0ICsgdGhpcy5lZGdlTWFyZ2luLCB0aGlzLmVkZ2VzLnJpZ2h0IC0gdGhpcy5lZGdlTWFyZ2luKTtcclxuICAgICAgICAgICAgICBwYXJhbXMueSA9IHRoaXMucDUucmFuZG9tKHRoaXMuZWRnZXMuYm90dG9tIC0gdGhpcy5lZGdlTWFyZ2luLCB0aGlzLmVkZ2VzLmJvdHRvbSk7XHJcbiAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICBjYXNlIDQ6IC8vIGxlZnRcclxuICAgICAgICAgICAgICBwYXJhbXMueCA9IHRoaXMucDUucmFuZG9tKHRoaXMuZWRnZXMubGVmdCwgdGhpcy5lZGdlcy5sZWZ0ICsgdGhpcy5lZGdlTWFyZ2luKTtcclxuICAgICAgICAgICAgICBwYXJhbXMueSA9IHRoaXMucDUucmFuZG9tKHRoaXMuZWRnZXMudG9wLCB0aGlzLmVkZ2VzLmJvdHRvbSk7XHJcbiAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICBjYXNlIDI6IC8vIHJpZ2h0XHJcbiAgICAgICAgICAgICAgcGFyYW1zLnggPSB0aGlzLnA1LnJhbmRvbSh0aGlzLmVkZ2VzLnJpZ2h0IC0gdGhpcy5lZGdlTWFyZ2luLCB0aGlzLmVkZ2VzLnJpZ2h0KTtcclxuICAgICAgICAgICAgICBwYXJhbXMueSA9IHRoaXMucDUucmFuZG9tKHRoaXMuZWRnZXMudG9wLCB0aGlzLmVkZ2VzLmJvdHRvbSk7XHJcbiAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgIC8vIENpcmNsZSA9IHNwYXduIHdhbGtlcnMgaW4gYSBjaXJjbGUgYXJvdW5kIHRoZSBjZW50ZXIgb2YgdGhlIHNjcmVlblxyXG4gICAgICAgIGNhc2UgJ0NpcmNsZSc6XHJcbiAgICAgICAgICBsZXQgcmFkaXVzID0gdGhpcy5wNS5yYW5kb20oNSwgMjAwIC8gMiAtIDIwKSxcclxuICAgICAgICAgICAgYW5nbGUgPSB0aGlzLnA1LnJhbmRvbSgzNjApLFxyXG4gICAgICAgICAgICBjZW50ZXIgPSB0aGlzLnNldHRpbmdzLmhhc093blByb3BlcnR5KCdDaXJjbGVDZW50ZXInKSA/IHRoaXMuc2V0dGluZ3MuQ2lyY2xlQ2VudGVyIDoge3g6IHdpbmRvdy5pbm5lcldpZHRoIC8gMiwgeTogd2luZG93LmlubmVySGVpZ2h0IC8gMn07XHJcblxyXG4gICAgICAgICAgcGFyYW1zLnggPSBjZW50ZXIueCArIHJhZGl1cyAqIE1hdGguY29zKGFuZ2xlICogTWF0aC5QSSAvIDE4MCk7XHJcbiAgICAgICAgICBwYXJhbXMueSA9IGNlbnRlci55ICsgcmFkaXVzICogTWF0aC5zaW4oYW5nbGUgKiBNYXRoLlBJIC8gMTgwKTtcclxuICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAvLyBSYW5kb20gPSBzcGF3biB3YWxrZXJzIHJhbmRvbWx5IHRocm91Z2hvdXQgdGhlIGVudGlyZSBzY3JlZW5cclxuICAgICAgICBjYXNlICdSYW5kb20nOlxyXG4gICAgICAgICAgcGFyYW1zLnggPSB0aGlzLnA1LnJhbmRvbSh0aGlzLmVkZ2VzLmxlZnQsIHRoaXMuZWRnZXMucmlnaHQpO1xyXG4gICAgICAgICAgcGFyYW1zLnkgPSB0aGlzLnA1LnJhbmRvbSh0aGlzLmVkZ2VzLnRvcCwgdGhpcy5lZGdlcy5ib3R0b20pO1xyXG4gICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgIC8vIENlbnRlciA9IHNwYXduIGFsbCB3YWxrZXJzIGF0IHNjcmVlbiBjZW50ZXJcclxuICAgICAgICBjYXNlICdDZW50ZXInOlxyXG4gICAgICAgICAgcGFyYW1zLnggPSB3aW5kb3cuaW5uZXJXaWR0aCAvIDI7XHJcbiAgICAgICAgICBwYXJhbXMueSA9IHdpbmRvdy5pbm5lckhlaWdodCAvIDI7XHJcbiAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgLy8gT2Zmc2NyZWVuID0gc3Bhd24gYWxsIHdhbGtlcnMgb3V0c2lkZSBvZiB0aGUgc2NyZWVuIGVkZ2VzXHJcbiAgICAgICAgY2FzZSAnT2Zmc2NyZWVuJzpcclxuICAgICAgICAgIHBhcmFtcy54ID0gdGhpcy5wNS5yYW5kb20odGhpcy5lZGdlcy5sZWZ0IC0gMjAwLCB0aGlzLmVkZ2VzLnJpZ2h0ICsgMjAwKTtcclxuICAgICAgICAgIHBhcmFtcy55ID0gdGhpcy5wNS5yYW5kb20odGhpcy5lZGdlcy50b3AgLSAyMDAsIHRoaXMuZWRnZXMuYm90dG9tICsgMjAwKTtcclxuXHJcbiAgICAgICAgICBpZihcclxuICAgICAgICAgICAgKHBhcmFtcy54ID4gdGhpcy5lZGdlcy5sZWZ0ICYmIHBhcmFtcy54IDwgdGhpcy5lZGdlcy5yaWdodCkgJiZcclxuICAgICAgICAgICAgKHBhcmFtcy55ID4gdGhpcy5lZGdlcy50b3AgJiYgcGFyYW1zLnkgPCB0aGlzLmVkZ2VzLmJvdHRvbSlcclxuICAgICAgICAgICkge1xyXG4gICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIFxyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIFZhcnkgZGlhbWV0ZXIgYmFzZWQgb24gZGlzdGFuY2UsIGlmIGVuYWJsZWRcclxuICAgICAgaWYgKHRoaXMuc2V0dGluZ3MuVmFyeURpYW1ldGVyQnlEaXN0YW5jZSkge1xyXG4gICAgICAgIGxldCBkaXN0ID0gdGhpcy5wNS5kaXN0KHBhcmFtcy54LCBwYXJhbXMueSwgd2luZG93LmlubmVyV2lkdGggLyAyLCB3aW5kb3cuaW5uZXJIZWlnaHQgLyAyKTtcclxuICAgICAgICBwYXJhbXMuZGlhbWV0ZXIgPSB0aGlzLnA1Lm1hcChkaXN0LCAwLCB0aGlzLm1heERpc3RhbmNlLCB0aGlzLnNldHRpbmdzLkNpcmNsZURpYW1ldGVyUmFuZ2VbMF0sIHRoaXMuc2V0dGluZ3MuQ2lyY2xlRGlhbWV0ZXJSYW5nZVsxXSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIENyZWF0ZSBhIHdhbGtlciB3aXRoIHRoZSBjb29yZGluYXRlc1xyXG4gICAgICB0aGlzLmNyZWF0ZVdhbGtlcihwYXJhbXMpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlIGEgc2V0IG9mIGNsdXN0ZXJlZCBwYXJ0aWNsZXMgd2l0aCB0aGUgcHJvdmlkZWQgcGF0dGVybi5cclxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2x1c3RlclR5cGUgLSBQYXR0ZXJuIHRvIGNyZWF0ZSBhbGwgY2x1c3RlcmVkIHBhcnRpY2xlcyB3aXRoLiBDYW4gYmUgUG9pbnQsIFJpbmcsIFJhbmRvbSwgb3IgV2FsbFxyXG4gICAqL1xyXG4gIGNyZWF0ZURlZmF1bHRDbHVzdGVycyhjbHVzdGVyVHlwZSA9IHRoaXMuc2V0dGluZ3MuSW5pdGlhbENsdXN0ZXJUeXBlKSB7XHJcbiAgICBsZXQgcGFyYW1zTGlzdCA9IFtdO1xyXG5cclxuICAgIHN3aXRjaCAoY2x1c3RlclR5cGUpIHtcclxuICAgICAgLy8gU2luZ2xlIHBhcnRpY2xlIGluIGNlbnRlciBvZiBzY3JlZW5cclxuICAgICAgY2FzZSAnUG9pbnQnOlxyXG4gICAgICAgIHBhcmFtc0xpc3QucHVzaCh7XHJcbiAgICAgICAgICB4OiB3aW5kb3cuaW5uZXJXaWR0aCAvIDIsXHJcbiAgICAgICAgICB5OiB3aW5kb3cuaW5uZXJIZWlnaHQgLyAyLFxyXG4gICAgICAgICAgZGlhbWV0ZXI6IHRoaXMuc2V0dGluZ3MuQ2lyY2xlRGlhbWV0ZXJcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAvLyBTZXJpZXMgb2YgcGFydGljbGVzIGV2ZW5seSBzcGFjZWQgaW4gYSBjaXJjbGUgYXJvdW5kIGNlbnRlciBvZiBzY3JlZW5cclxuICAgICAgY2FzZSAnUmluZyc6XHJcbiAgICAgICAgbGV0IHJhZGl1cyA9IDEwMCxcclxuICAgICAgICAgIG51bVBhcnRpY2xlcyA9IDIwO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bVBhcnRpY2xlczsgaSsrKSB7XHJcbiAgICAgICAgICBwYXJhbXNMaXN0LnB1c2goe1xyXG4gICAgICAgICAgICB4OiB3aW5kb3cuaW5uZXJXaWR0aCAvIDIgKyByYWRpdXMgKiBNYXRoLmNvcygoMzYwIC8gbnVtUGFydGljbGVzKSAqIGkgKiBNYXRoLlBJIC8gMTgwKSxcclxuICAgICAgICAgICAgeTogd2luZG93LmlubmVySGVpZ2h0IC8gMiArIHJhZGl1cyAqIE1hdGguc2luKCgzNjAgLyBudW1QYXJ0aWNsZXMpICogaSAqIE1hdGguUEkgLyAxODApLFxyXG4gICAgICAgICAgICBkaWFtZXRlcjogdGhpcy5zZXR0aW5ncy5DaXJjbGVEaWFtZXRlclxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBicmVhaztcclxuXHJcbiAgICAgIC8vIEluZGl2aWR1YWwgcGFydGljbGVzIHJhbmRvbWx5IGRpc3RyaWJ1dGVkIGFjcm9zcyBlbnRpcmUgc2NyZWVuXHJcbiAgICAgIGNhc2UgJ1JhbmRvbSc6XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCA0MDsgaSsrKSB7XHJcbiAgICAgICAgICBwYXJhbXNMaXN0LnB1c2goe1xyXG4gICAgICAgICAgICB4OiB0aGlzLnA1LnJhbmRvbSh0aGlzLmVkZ2VzLmxlZnQsIHRoaXMuZWRnZXMucmlnaHQpLFxyXG4gICAgICAgICAgICB5OiB0aGlzLnA1LnJhbmRvbSh0aGlzLmVkZ2VzLnRvcCwgdGhpcy5lZGdlcy5ib3R0b20pLFxyXG4gICAgICAgICAgICBkaWFtZXRlcjogdGhpcy5zZXR0aW5ncy5DaXJjbGVEaWFtZXRlclxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBicmVhaztcclxuXHJcbiAgICAgIC8vIExpbmUgb2YgcGFydGljbGVzIGFsb25nIGFuIGVkZ2Ugb2YgdGhlIHNjcmVlbiBvciBmcmFtZVxyXG4gICAgICBjYXNlICdXYWxsJzpcclxuICAgICAgICBzd2l0Y2ggKHRoaXMuc2V0dGluZ3MuQmlhc1Rvd2FyZHMpIHtcclxuICAgICAgICAgIGNhc2UgJ1RvcCc6XHJcbiAgICAgICAgICAgIHBhcmFtc0xpc3QgPSB0aGlzLmNyZWF0ZUhvcml6b250YWxDbHVzdGVyV2FsbCh0aGlzLmVkZ2VzLnRvcCk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgIGNhc2UgJ0JvdHRvbSc6XHJcbiAgICAgICAgICAgIHBhcmFtc0xpc3QgPSB0aGlzLmNyZWF0ZUhvcml6b250YWxDbHVzdGVyV2FsbCh0aGlzLmVkZ2VzLmJvdHRvbSk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgIGNhc2UgJ0xlZnQnOlxyXG4gICAgICAgICAgICBwYXJhbXNMaXN0ID0gdGhpcy5jcmVhdGVWZXJ0aWNhbENsdXN0ZXJXYWxsKHRoaXMuZWRnZXMubGVmdCk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgIGNhc2UgJ1JpZ2h0JzpcclxuICAgICAgICAgICAgcGFyYW1zTGlzdCA9IHRoaXMuY3JlYXRlVmVydGljYWxDbHVzdGVyV2FsbCh0aGlzLmVkZ2VzLnJpZ2h0KTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgY2FzZSAnRWRnZXMnOlxyXG4gICAgICAgICAgICBwYXJhbXNMaXN0ID0gcGFyYW1zTGlzdC5jb25jYXQodGhpcy5jcmVhdGVIb3Jpem9udGFsQ2x1c3RlcldhbGwodGhpcy5lZGdlcy50b3ApKTtcclxuICAgICAgICAgICAgcGFyYW1zTGlzdCA9IHBhcmFtc0xpc3QuY29uY2F0KHRoaXMuY3JlYXRlSG9yaXpvbnRhbENsdXN0ZXJXYWxsKHRoaXMuZWRnZXMuYm90dG9tKSk7XHJcbiAgICAgICAgICAgIHBhcmFtc0xpc3QgPSBwYXJhbXNMaXN0LmNvbmNhdCh0aGlzLmNyZWF0ZVZlcnRpY2FsQ2x1c3RlcldhbGwodGhpcy5lZGdlcy5sZWZ0KSk7XHJcbiAgICAgICAgICAgIHBhcmFtc0xpc3QgPSBwYXJhbXNMaXN0LmNvbmNhdCh0aGlzLmNyZWF0ZVZlcnRpY2FsQ2x1c3RlcldhbGwodGhpcy5lZGdlcy5yaWdodCkpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICBjYXNlICdFcXVhdG9yJzpcclxuICAgICAgICAgICAgcGFyYW1zTGlzdCA9IHBhcmFtc0xpc3QuY29uY2F0KHRoaXMuY3JlYXRlSG9yaXpvbnRhbENsdXN0ZXJXYWxsKHdpbmRvdy5pbm5lckhlaWdodCAvIDIpKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgY2FzZSAnTWVyaWRpYW4nOlxyXG4gICAgICAgICAgICBwYXJhbXNMaXN0ID0gcGFyYW1zTGlzdC5jb25jYXQodGhpcy5jcmVhdGVWZXJ0aWNhbENsdXN0ZXJXYWxsKHdpbmRvdy5pbm5lcldpZHRoIC8gMikpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuY3JlYXRlQ2x1c3RlckZyb21QYXJhbXMocGFyYW1zTGlzdCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDcmVhdGUgYSBob3Jpem9udGFsIGxpbmUgb2YgY2x1c3RlcmVkIHBhcnRpY2xlcyBhdCBhIGdpdmVuIFkgY29vcmRpbmF0ZVxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB5UG9zIC0gdmVydGljYWwgY29vcmRpbmF0ZSB3aGVyZSBsaW5lIG9mIHBhcnRpY2xlcyBpcyBjcmVhdGVkXHJcbiAgICogQHJldHVybnMge09iamVjdH0gT2JqZWN0IGNvbnRhaW5pbmcgWCBhbmQgWSBjb29yZGluYXRlcyBvZiBhbGwgY2x1c3RlcmVkIHBhcnRpY2xlcyBpbiBsaW5lXHJcbiAgICovXHJcbiAgY3JlYXRlSG9yaXpvbnRhbENsdXN0ZXJXYWxsKHlQb3MpIHtcclxuICAgIGxldCBjb29yZHMgPSBbXSxcclxuICAgICAgd2lkdGggPSB0aGlzLnVzZUZyYW1lID8gdGhpcy5lZGdlcy5yaWdodCAtIHRoaXMuZWRnZXMubGVmdCA6IHdpbmRvdy5pbm5lcldpZHRoO1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDw9IHdpZHRoIC8gdGhpcy5zZXR0aW5ncy5DaXJjbGVEaWFtZXRlcjsgaSsrKSB7XHJcbiAgICAgIGNvb3Jkcy5wdXNoKHtcclxuICAgICAgICB4OiB0aGlzLmVkZ2VzLmxlZnQgKyBpICogdGhpcy5zZXR0aW5ncy5DaXJjbGVEaWFtZXRlcixcclxuICAgICAgICB5OiB5UG9zLFxyXG4gICAgICAgIGRpYW1ldGVyOiB0aGlzLnNldHRpbmdzLkNpcmNsZURpYW1ldGVyXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBjb29yZHM7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDcmVhdGUgYSB2ZXJ0aWNhbCBsaW5lIG9mIGNsdXN0ZXJlZCBwYXJ0aWNsZXMgYXQgYSBnaXZlbiBYIGNvb3JkaW5hdGVcclxuICAgKiBAcGFyYW0ge251bWJlcn0geFBvcyAtIGhvcml6b250YWwgY29vcmRpbmF0ZSB3aGVyZSBsaW5lIG9mIHBhcnRpY2xlcyBpcyBjcmVhdGVkIFxyXG4gICAqIEByZXR1cm4ge09iamVjdH0gT2JqZWN0IGNvbnRhaW5pbmcgdGhlIFggYW5kIFkgY29vcmRpbmF0ZXMgb2YgYWxsIGNsdXN0ZXJlZCBwYXJ0aWNsZXMgaW4gbGluZVxyXG4gICAqL1xyXG4gIGNyZWF0ZVZlcnRpY2FsQ2x1c3RlcldhbGwoeFBvcykge1xyXG4gICAgbGV0IGNvb3JkcyA9IFtdLFxyXG4gICAgICBoZWlnaHQgPSB0aGlzLnVzZUZyYW1lID8gdGhpcy5lZGdlcy5ib3R0b20gLSB0aGlzLmVkZ2VzLnRvcCA6IHdpbmRvdy5pbm5lckhlaWdodDtcclxuXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8PSBoZWlnaHQgLyB0aGlzLnNldHRpbmdzLkNpcmNsZURpYW1ldGVyOyBpKyspIHtcclxuICAgICAgY29vcmRzLnB1c2goe1xyXG4gICAgICAgIHg6IHhQb3MsXHJcbiAgICAgICAgeTogdGhpcy5lZGdlcy50b3AgKyBpICogdGhpcy5zZXR0aW5ncy5DaXJjbGVEaWFtZXRlcixcclxuICAgICAgICBkaWFtZXRlcjogdGhpcy5zZXR0aW5ncy5DaXJjbGVEaWFtZXRlclxyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gY29vcmRzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlIGEgc2V0IG9mIGNsdXN0ZXJlZCBwYXJ0aWNsZXMgZnJvbSBhbiBhcnJheSBvZiBpbmRpdmlkdWFsIHBhcnRpY2xlIHBhcmFtZXRlcnNcclxuICAgKiBAcGFyYW0ge0FycmF5fSBwYXJhbXNMaXN0IC0gQXJyYXkgb2Ygb2JqZWN0cyBjb250YWluaW5nIHBhcnRpY2xlIHBhcmFtZXRlcnMuICBcclxuICAgKi9cclxuICBjcmVhdGVDbHVzdGVyRnJvbVBhcmFtcyhwYXJhbXNMaXN0KSB7XHJcbiAgICBpZiAocGFyYW1zTGlzdC5sZW5ndGggPiAwKSB7XHJcbiAgICAgIGZvciAobGV0IHBhcmFtcyBvZiBwYXJhbXNMaXN0KSB7XHJcbiAgICAgICAgcGFyYW1zLnN0dWNrID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmNyZWF0ZVBhcnRpY2xlKHBhcmFtcyk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENyZWF0ZSBzaGFwZXMgaW4gdGhlIGludGVybmFsIGNvbGxpc2lvbiBkZXRlY3Rpb24gc3lzdGVtIGZyb20gYSBzZXQgb2YgcGF0aHNcclxuICAgKiBAcGFyYW0ge0FycmF5fSBwYXRocyAtIEFycmF5IG9mIG9iamVjdHMgZGVmaW5pbmcgcG9seWdvbnMgKHRlY2huaWNhbGx5IHBvbHlsaW5lcykgd2l0aCBzdGFydGluZyBYIGFuZCBZIGNvb3JkaW5hdGVzIGFuZCBhIGxpc3Qgb2YgcG9pbnRzXHJcbiAgICovXHJcbiAgY3JlYXRlU2hhcGVzRnJvbVBhdGhzKHBhdGhzKSB7XHJcbiAgICBpZiAoIXBhdGhzLmhhc093blByb3BlcnR5KCdwb2ludHMnKSAmJiBwYXRocy5sZW5ndGggPT0gMCkge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdVbmFibGUgdG8gY3JlYXRlIHNoYXBlcy4gUGF0aHMgbXVzdCBoYXZlIGFuIGFycmF5IG9mIHBvaW50cyBbW3gseV0sLi4uXScpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgZm9yIChsZXQgcGF0aCBvZiBwYXRocykge1xyXG4gICAgICAvLyBDcmVhdGUgYSBzaW5nbGUgcG9seWdvbiBpZiB0aGUgc2hhcGUgaXMgbWFya2VkIGFzIFwic29saWRcIlxyXG4gICAgICBpZiAocGF0aC5zb2xpZCkge1xyXG4gICAgICAgIGxldCBzaGFwZSA9IHRoaXMuc3lzdGVtLmNyZWF0ZVBvbHlnb24ocGF0aC54LCBwYXRoLnksIHBhdGgucG9pbnRzKTtcclxuICAgICAgICBzaGFwZS5zb2xpZCA9IHBhdGguc29saWQ7XHJcbiAgICAgICAgc2hhcGUuY2xvc2VkID0gcGF0aC5jbG9zZWQ7XHJcbiAgICAgICAgdGhpcy5zaGFwZXMucHVzaChzaGFwZSk7XHJcblxyXG4gICAgICAvLyBDcmVhdGUgYSBzZXJpZXMgb2Ygc2VwYXJhdGUgbGluZSBzZWdtZW50cyBpZiBzaGFwZSBpcyBub3QgXCJzb2xpZFwiLCBwZXIgaHR0cHM6Ly9naXRodWIuY29tL1Npbm92YS9Db2xsaXNpb25zI2FuY2hvci1saW5lc1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgcGF0aC5wb2ludHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgIGxldCBsaW5lID0gdGhpcy5zeXN0ZW0uY3JlYXRlUG9seWdvbihwYXRoLngsIHBhdGgueSwgW1twYXRoLnBvaW50c1tpIC0gMV1bMF0sIHBhdGgucG9pbnRzW2kgLSAxXVsxXV0sIFtwYXRoLnBvaW50c1tpXVswXSwgcGF0aC5wb2ludHNbaV1bMV1dXSk7XHJcbiAgICAgICAgICBsaW5lLnNvbGlkID0gZmFsc2U7XHJcbiAgICAgICAgICBsaW5lLmNsb3NlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgdGhpcy5zaGFwZXMucHVzaChsaW5lKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG5cclxuICAvLz09PT09PT09PT09PT09XHJcbiAgLy8gIFJlbW92ZXJzXHJcbiAgLy89PT09PT09PT09PT09PVxyXG4gIC8qKiBSZW1vdmUgYWxsIHdhbGtlcnMsIGNsdXN0ZXJlZCBwYXJ0aWNsZXMsIHNoYXBlcywgYW5kIGxpbmVzIGZyb20gdGhlIHN5c3RlbSAqL1xyXG4gIHJlbW92ZUFsbCgpIHtcclxuICAgIGZvciAobGV0IGJvZHkgb2YgdGhpcy5ib2RpZXMpIHtcclxuICAgICAgdGhpcy5zeXN0ZW0ucmVtb3ZlKGJvZHkpO1xyXG4gICAgfVxyXG5cclxuICAgIGZvciAobGV0IHNoYXBlIG9mIHRoaXMuc2hhcGVzKSB7XHJcbiAgICAgIHRoaXMuc3lzdGVtLnJlbW92ZShzaGFwZSk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5ib2RpZXMgPSBbXTtcclxuICAgIHRoaXMuc2hhcGVzID0gW107XHJcbiAgICB0aGlzLmxpbmVzID0gW107XHJcbiAgICB0aGlzLm51bVdhbGtlcnMgPSAwO1xyXG4gIH1cclxuXHJcblxyXG4gIC8vPT09PT09PT09PT09PT1cclxuICAvLyAgVG9nZ2xlcnNcclxuICAvLz09PT09PT09PT09PT09XHJcbiAgLyoqIFRvZ2dsZSBiZXR3ZWVuIHBhdXNlZCBvciB1bnBhdXNlZCBzdGF0ZSAqL1xyXG4gIHRvZ2dsZVBhdXNlKCkge1xyXG4gICAgdGhpcy5wYXVzZWQgPSAhdGhpcy5wYXVzZWQ7XHJcbiAgfVxyXG5cclxuICAvKiogVG9nZ2xlIHRoZSB2aXNpYmlsaXR5IG9mIHdhbGtlcnMgKi9cclxuICB0b2dnbGVTaG93V2Fsa2VycygpIHtcclxuICAgIHRoaXMuc2hvd1dhbGtlcnMgPSAhdGhpcy5zaG93V2Fsa2VycztcclxuICB9XHJcblxyXG4gIC8qKiBUb2dnbGUgdGhlIHZpc2liaWxpdHkgb2YgY2x1c3RlcmVkIHBhcnRpY2xlcyAqL1xyXG4gIHRvZ2dsZVNob3dDbHVzdGVycygpIHtcclxuICAgIHRoaXMuc2hvd0NsdXN0ZXJzID0gIXRoaXMuc2hvd0NsdXN0ZXJzO1xyXG4gIH1cclxuXHJcbiAgLyoqIFRvZ2dsZSB0aGUgdmlzaWJpbGl0eSBvZiBzaGFwZXMgKi9cclxuICB0b2dnbGVTaG93U2hhcGVzKCkge1xyXG4gICAgdGhpcy5zaG93U2hhcGVzID0gIXRoaXMuc2hvd1NoYXBlcztcclxuICB9XHJcblxyXG4gIC8qKiBUb2dnbGUgdGhlIHVzZSBvZiBhIGN1c3RvbS1kZWZpbmVkIGZyYW1lIChib3VuZGluZyBib3gpICovXHJcbiAgdG9nZ2xlVXNlRnJhbWUoKSB7XHJcbiAgICB0aGlzLnVzZUZyYW1lID0gIXRoaXMudXNlRnJhbWU7XHJcbiAgICB0aGlzLnJlc2V0RWRnZXMoKTtcclxuICB9XHJcblxyXG4gIC8qKiBUb2dnbGUgdGhlIGxpbmUtYmFzZWQgcmVuZGVyaW5nIG1vZGUgKi9cclxuICB0b2dnbGVMaW5lUmVuZGVyaW5nTW9kZSgpIHtcclxuICAgIGlmKHRoaXMucmVuZGVyTW9kZSAhPSAnTGluZXMnKSB7XHJcbiAgICAgIGlmKHRoaXMuc2V0dGluZ3MuQ2FwdHVyZUxpbmVzKSB7XHJcbiAgICAgICAgdGhpcy5yZW5kZXJNb2RlID0gJ0xpbmVzJztcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKCdMaW5lIHJlbmRlcmluZyBtb2RlIG9ubHkgYWxsb3dlZCB3aGVuIENhcHR1cmVMaW5lcyBpcyBzZXQuJyk7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMucmVuZGVyTW9kZSA9ICdTaGFwZXMnO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcblxyXG4gIC8vPT09PT09PT09PT09PT09PT09PVxyXG4gIC8vICBQYXVzZS91bnBhdXNlXHJcbiAgLy89PT09PT09PT09PT09PT09PT09XHJcbiAgLyoqIFBhdXNlIHRoZSBzaW11bGF0aW9uICovXHJcbiAgcGF1c2UoKSB7XHJcbiAgICB0aGlzLnBhdXNlZCA9IHRydWU7XHJcbiAgfVxyXG5cclxuICAvKiogVW5wYXVzZSB0aGUgc2ltdWxhdGlvbiAqL1xyXG4gIHVucGF1c2UoKSB7XHJcbiAgICB0aGlzLnBhdXNlZCA9IGZhbHNlO1xyXG4gIH1cclxuXHJcblxyXG4gIC8vPT09PT09PT09PT09PT09PT09PT09PVxyXG4gIC8vICBVdGlsaXR5IGZ1bmN0aW9uc1xyXG4gIC8vPT09PT09PT09PT09PT09PT09PT09PVxyXG4gIC8qKlxyXG4gICAqIENyZWF0ZSBhbiBIU0wtZm9ybWF0dGVkIHN0cmluZyB0aGF0IHBsYXlzIHdlbGwgd2l0aCBwNS5qcyBmcm9tIGFuIG9iamVjdCB3aXRoIGFwcHJvcHJpYXRlIHByb3BlcnRpZXNcclxuICAgKiBAcGFyYW0ge29iamVjdH0gY29sb3JPYmplY3QgLSBPYmplY3Qgd2l0aCB0aGUgcHJvcGVydGllcyBoLCBzLCBhbmQgYiAoYWxsIG51bWJlcnMpIFxyXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IC0gU3RyaW5nIGluIHRoZSBmb3JtYXQgb2YgaHNsKHtofSwge3N9LCB7Yn0pXHJcbiAgICovXHJcbiAgZ2V0Q29sb3JTdHJpbmdGcm9tT2JqZWN0KGNvbG9yT2JqZWN0KSB7XHJcbiAgICByZXR1cm4gJ2hzbGEoJyArXHJcbiAgICAgIGNvbG9yT2JqZWN0LmggKyAnLCAnICtcclxuICAgICAgY29sb3JPYmplY3QucyArICclLCAnICtcclxuICAgICAgY29sb3JPYmplY3QuYiArICclLCAnICtcclxuICAgICAgY29sb3JPYmplY3QuYSArICcpJztcclxuICB9XHJcblxyXG5cclxuICAvLz09PT09PT09PT09PVxyXG4gIC8vICBFeHBvcnRcclxuICAvLz09PT09PT09PT09PVxyXG4gIC8qKiBDb25zdHJ1Y3RzIGFuIFNWRyBub2RlIHdpdGggcGF0aHMgYmFzZWQgb24gY3VycmVudCByZW5kZXJpbmcgbW9kZSBvZiB0aGUgc2ltdWxhdGlvbiwgdGhlbiBpbml0aWF0ZXMgYSBkb3dubG9hZCBvbiB0aGUgdXNlcidzIG1hY2hpbmUgb2YgdGhlIGdlbmVyYXRlZCBmaWxlICovXHJcbiAgZXhwb3J0KCkge1xyXG4gICAgLy8gU2V0IHVwIDxzdmc+IGVsZW1lbnRcclxuICAgIGxldCBzdmcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdmcnKTtcclxuICAgIHN2Zy5zZXRBdHRyaWJ1dGUoJ3htbG5zJywgJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyk7XHJcbiAgICBzdmcuc2V0QXR0cmlidXRlKCd4bWxuczp4bGluaycsICdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJyk7XHJcbiAgICBzdmcuc2V0QXR0cmlidXRlKCd3aWR0aCcsIHdpbmRvdy5pbm5lcldpZHRoKTtcclxuICAgIHN2Zy5zZXRBdHRyaWJ1dGUoJ2hlaWdodCcsIHdpbmRvdy5pbm5lckhlaWdodCk7XHJcbiAgICBzdmcuc2V0QXR0cmlidXRlKCd2aWV3Qm94JywgJzAgMCAnICsgd2luZG93LmlubmVyV2lkdGggKyAnICcgKyB3aW5kb3cuaW5uZXJIZWlnaHQpO1xyXG5cclxuICAgIC8vIEV4cG9ydCBhbGwgYm9kaWVzIGJhc2VkIG9uIHRoZSBjdXJyZW50IHJlbmRlcmluZyBtb2RlXHJcbiAgICBzd2l0Y2godGhpcy5yZW5kZXJNb2RlKSB7XHJcbiAgICAgIGNhc2UgJ1NoYXBlcyc6XHJcbiAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgZm9yKGxldCBib2R5IG9mIHRoaXMuYm9kaWVzKSB7XHJcbiAgICAgICAgICBpZighYm9keS5zdHVjayAmJiAhdGhpcy5zaG93V2Fsa2Vycykge1xyXG4gICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBpZihib2R5Ll9jaXJjbGUpIHtcclxuICAgICAgICAgICAgc3ZnLmFwcGVuZENoaWxkKCB0aGlzLmNyZWF0ZUNpcmNsZUVsRnJvbUJvZHkoYm9keSkgKTtcclxuICAgICAgICAgIH0gZWxzZSB7ICBcclxuICAgICAgICAgICAgc3ZnLmFwcGVuZENoaWxkKCB0aGlzLmNyZWF0ZVBhdGhFbEZyb21Qb2ludHMoIHRoaXMuZ2V0UG9pbnRzRnJvbUNvb3Jkcyhib2R5Ll9jb29yZHMpICkgKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgY2FzZSAnTGluZXMnOlxyXG4gICAgICAgIGlmKHRoaXMubGluZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgZm9yKGxldCBsaW5lIG9mIHRoaXMubGluZXMpIHtcclxuICAgICAgICAgICAgbGV0IHBvaW50cyA9IFtdO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgcG9pbnRzLnB1c2goe1xyXG4gICAgICAgICAgICAgIHg6IGxpbmUucDEueCwgXHJcbiAgICAgICAgICAgICAgeTogbGluZS5wMS55XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgcG9pbnRzLnB1c2goe1xyXG4gICAgICAgICAgICAgIHg6IGxpbmUucDIueCxcclxuICAgICAgICAgICAgICB5OiBsaW5lLnAyLnlcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBzdmcuYXBwZW5kQ2hpbGQoIHRoaXMuY3JlYXRlUGF0aEVsRnJvbVBvaW50cyhwb2ludHMpICk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBicmVhaztcclxuICAgIH1cclxuXHJcbiAgICAvLyBFeHBvcnQgYWxsIGN1c3RvbSBpbXBvcnRlZCBzaGFwZXMgYXMgcGF0aHNcclxuICAgIGlmKHRoaXMuc2hhcGVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgZm9yKGxldCBzaGFwZSBvZiB0aGlzLnNoYXBlcykge1xyXG4gICAgICAgIHN2Zy5hcHBlbmRDaGlsZCggdGhpcy5jcmVhdGVQYXRoRWxGcm9tUG9pbnRzKCB0aGlzLmdldFBvaW50c0Zyb21Db29yZHMoc2hhcGUuX2Nvb3JkcykgKSApO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIEZvcmNlIGRvd25sb2FkIG9mIC5zdmcgZmlsZSBiYXNlZCBvbiBodHRwczovL2pzZmlkZGxlLm5ldC9jaDc3ZTd5aC8xXHJcbiAgICBsZXQgc3ZnRG9jVHlwZSA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZURvY3VtZW50VHlwZSgnc3ZnJywgXCItLy9XM0MvL0RURCBTVkcgMS4xLy9FTlwiLCBcImh0dHA6Ly93d3cudzMub3JnL0dyYXBoaWNzL1NWRy8xLjEvRFREL3N2ZzExLmR0ZFwiKTtcclxuICAgIGxldCBzdmdEb2MgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVEb2N1bWVudCgnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCAnc3ZnJywgc3ZnRG9jVHlwZSk7XHJcbiAgICBzdmdEb2MucmVwbGFjZUNoaWxkKHN2Zywgc3ZnRG9jLmRvY3VtZW50RWxlbWVudCk7XHJcbiAgICBsZXQgc3ZnRGF0YSA9IChuZXcgWE1MU2VyaWFsaXplcigpKS5zZXJpYWxpemVUb1N0cmluZyhzdmdEb2MpO1xyXG5cclxuICAgIGxldCBibG9iID0gbmV3IEJsb2IoW3N2Z0RhdGEucmVwbGFjZSgvPjwvZywgJz5cXG5cXHI8JyldKTtcclxuICAgIHNhdmVBcyhibG9iLCAnZGxhLScgKyBEYXRlLm5vdygpICsgJy5zdmcnKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENvbnZlcnQgYSBmbGF0IGFycmF5IG9mIGNvb3JkcyAoW3gxLCB5MSwgeDIsIHkyLCAuLi5dKSwgdXNlZCBpbnRlcm5hbGx5IGJ5IGNvbGxpc2lvbnMgcGFja2FnZSBpbnRvIGFuIGFycmF5IG9mIG9iamVjdHMgZm9yIGVhc2llciB0cmF2ZXJzaW5nXHJcbiAgICogQHBhcmFtIHthcnJheX0gY29vcmRzIFxyXG4gICAqL1xyXG4gIGdldFBvaW50c0Zyb21Db29yZHMoY29vcmRzKSB7XHJcbiAgICBsZXQgcG9pbnRzID0gW107XHJcblxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb29yZHMubGVuZ3RoIC0gMTsgaSArPSAyKSB7XHJcbiAgICAgIHBvaW50cy5wdXNoKHtcclxuICAgICAgICB4OiBjb29yZHNbaV0sIFxyXG4gICAgICAgIHk6IGNvb3Jkc1tpICsgMV1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHBvaW50cztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENyZWF0ZSBhIDxwYXRoPiBlbGVtZW50IHdpdGggYSBcImRcIiBhdHRyaWJ1dGUgY29udGFpbmluZyBwcm92aWRlZCBwb2ludHNcclxuICAgKiBAcGFyYW0ge2FycmF5fSBwb2ludHMgXHJcbiAgICogQHJldHVybnMge25vZGV9IFNWRyA8cGF0aD4gZWxlbWVudCB3aXRoIFwiZFwiIGF0dHJpYnV0ZSBjb250YWluaW5nIHByb3ZpZGVkIHBvaW50c1xyXG4gICAqL1xyXG4gIGNyZWF0ZVBhdGhFbEZyb21Qb2ludHMocG9pbnRzKSB7XHJcbiAgICBsZXQgcG9pbnRzU3RyaW5nID0gJyc7XHJcblxyXG4gICAgZm9yKGxldCBbaW5kZXgsIHBvaW50XSBvZiBwb2ludHMuZW50cmllcygpKSB7XHJcbiAgICAgIHBvaW50c1N0cmluZyArPSBwb2ludC54ICsgJywnICsgcG9pbnQueTtcclxuXHJcbiAgICAgIGlmKGluZGV4IDwgcG9pbnRzLmxlbmd0aCAtIDEpIHtcclxuICAgICAgICBwb2ludHNTdHJpbmcgKz0gJyAnO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IGQgPSB0b1BhdGgoe1xyXG4gICAgICB0eXBlOiAncG9seWxpbmUnLFxyXG4gICAgICBwb2ludHM6IHBvaW50c1N0cmluZ1xyXG4gICAgfSk7XHJcblxyXG4gICAgbGV0IHBhdGhFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3BhdGgnKTtcclxuICAgIHBhdGhFbC5zZXRBdHRyaWJ1dGUoJ2QnLCBkKTtcclxuICAgIHBhdGhFbC5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgJ2ZpbGw6IG5vbmU7IHN0cm9rZTogYmxhY2s7IHN0cm9rZS13aWR0aDogMScpO1xyXG5cclxuICAgIHJldHVybiBwYXRoRWw7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDcmVhdGUgYW4gU1ZHIDxjaXJjbGU+IGVsZW1lbnQgd2l0aCBhdHRyaWJ1dGVzIGBjeGAsIGBjeWAsIGFuZCBgcmAgZXh0cmFjdGVkIGZyb20gcHJvdmlkZWQgYm9keVxyXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBib2R5IFxyXG4gICAqIEByZXR1cm5zIHtub2RlfSBTVkcgPGNpcmNsZT4gZWxlbWVudCB3aXRoIGBjeGAsIGBjeWAsIGFuZCBgcmAgYXR0cmlidXRlcyBmcm9tIGJvZHlcclxuICAgKi9cclxuICBjcmVhdGVDaXJjbGVFbEZyb21Cb2R5KGJvZHkpIHtcclxuICAgIGxldCBjaXJjbGVFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NpcmNsZScpO1xyXG4gICAgY2lyY2xlRWwuc2V0QXR0cmlidXRlKCdjeCcsIGJvZHkueCk7XHJcbiAgICBjaXJjbGVFbC5zZXRBdHRyaWJ1dGUoJ2N5JywgYm9keS55KTtcclxuICAgIGNpcmNsZUVsLnNldEF0dHJpYnV0ZSgncicsIGJvZHkucmFkaXVzKTtcclxuICAgIHJldHVybiBjaXJjbGVFbDtcclxuICB9XHJcblxyXG59IiwiZXhwb3J0IGRlZmF1bHQge1xyXG4gIC8vIERpYW1ldGVyIG9mIHBhcnRpY2xlc1xyXG4gIENpcmNsZURpYW1ldGVyOiA1LFxyXG5cclxuICAvLyBIaWRlIHdhbGtlcnMgYnkgZGVmYXVsdFxyXG4gIFNob3dXYWxrZXJzOiBmYWxzZVxyXG59OyIsImltcG9ydCBTZXR0aW5ncyBmcm9tICcuL1NldHRpbmdzJztcclxuaW1wb3J0IERMQSBmcm9tICcuLi8uLi9jb3JlL0RMQSc7XHJcblxyXG5sZXQgZGxhLFxyXG4gICAgY3VycmVudENsdXN0ZXJUeXBlID0gJ1dhbGwnO1xyXG5cclxuY29uc3Qgc2tldGNoID0gZnVuY3Rpb24gKHA1KSB7XHJcbiAgLy8gU2V0dXAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgcDUuc2V0dXAgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBwNS5jcmVhdGVDYW52YXMod2luZG93LmlubmVyV2lkdGgsIHdpbmRvdy5pbm5lckhlaWdodCk7XHJcbiAgICBwNS5jb2xvck1vZGUocDUuSFNCLCAyNTUpO1xyXG4gICAgcDUuZWxsaXBzZU1vZGUocDUuQ0VOVEVSKTtcclxuXHJcbiAgICAvLyBTZXQgdXAgdGhlIHNpbXVsYXRpb24gZW52aXJvbm1lbnRcclxuICAgIGRsYSA9IG5ldyBETEEocDUsIFNldHRpbmdzKTtcclxuICAgIGRsYS5zZXR0aW5ncy5CaWFzVG93YXJkcyA9ICdCb3R0b20nO1xyXG5cclxuICAgIGRsYS5jcmVhdGVEZWZhdWx0V2Fsa2VycygpO1xyXG4gICAgZGxhLmNyZWF0ZURlZmF1bHRDbHVzdGVycyhjdXJyZW50Q2x1c3RlclR5cGUpO1xyXG4gIH1cclxuXHJcbiAgLy8gRHJhdyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgcDUuZHJhdyA9IGZ1bmN0aW9uICgpIHtcclxuICAgIGRsYS5pdGVyYXRlKCk7XHJcbiAgICBkbGEuZHJhdygpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gcmVzZXQoKSB7XHJcbiAgICBkbGEucmVtb3ZlQWxsKCk7XHJcbiAgICBkbGEuY3JlYXRlRGVmYXVsdFdhbGtlcnMoKTtcclxuICAgIGRsYS5jcmVhdGVEZWZhdWx0Q2x1c3RlcnMoY3VycmVudENsdXN0ZXJUeXBlKTtcclxuICB9XHJcblxyXG4gIC8vIEtleSBoYW5kbGVyIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gIHA1LmtleVJlbGVhc2VkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgc3dpdGNoIChwNS5rZXkpIHtcclxuICAgICAgY2FzZSAnICc6XHJcbiAgICAgICAgZGxhLnRvZ2dsZVBhdXNlKCk7XHJcbiAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICBjYXNlICd3JzpcclxuICAgICAgICBkbGEudG9nZ2xlU2hvd1dhbGtlcnMoKTtcclxuICAgICAgICBicmVhaztcclxuXHJcbiAgICAgIGNhc2UgJ2MnOlxyXG4gICAgICAgIGRsYS50b2dnbGVTaG93Q2x1c3RlcnMoKTtcclxuICAgICAgICBicmVhaztcclxuXHJcbiAgICAgIGNhc2UgJ3InOlxyXG4gICAgICAgIHJlc2V0KCk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgIFxyXG4gICAgICBjYXNlICdmJzpcclxuICAgICAgICBkbGEudG9nZ2xlVXNlRnJhbWUoKTtcclxuICAgICAgICByZXNldCgpO1xyXG4gICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgY2FzZSAnbCc6XHJcbiAgICAgICAgZGxhLnRvZ2dsZUxpbmVSZW5kZXJpbmdNb2RlKCk7XHJcbiAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICBjYXNlICdlJzpcclxuICAgICAgICBkbGEuZXhwb3J0KCk7XHJcbiAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAvLyBVc2UgbnVtYmVycyB0byBjaGFuZ2UgYmlhcyBkaXJlY3Rpb25cclxuICAgICAgY2FzZSAnMSc6XHJcbiAgICAgICAgZGxhLnBhdXNlKCk7XHJcbiAgICAgICAgY3VycmVudENsdXN0ZXJUeXBlID0gJ1dhbGwnO1xyXG4gICAgICAgIGRsYS5zZXR0aW5ncy5CaWFzVG93YXJkcyA9ICdCb3R0b20nO1xyXG4gICAgICAgIHJlc2V0KCk7XHJcbiAgICAgICAgZGxhLnVucGF1c2UoKTtcclxuICAgICAgICBicmVhaztcclxuXHJcbiAgICAgIGNhc2UgJzInOlxyXG4gICAgICAgIGRsYS5wYXVzZSgpO1xyXG4gICAgICAgIGN1cnJlbnRDbHVzdGVyVHlwZSA9ICdXYWxsJztcclxuICAgICAgICBkbGEuc2V0dGluZ3MuQmlhc1Rvd2FyZHMgPSAnVG9wJztcclxuICAgICAgICByZXNldCgpO1xyXG4gICAgICAgIGRsYS51bnBhdXNlKCk7XHJcbiAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICBjYXNlICczJzpcclxuICAgICAgICBkbGEucGF1c2UoKTtcclxuICAgICAgICBjdXJyZW50Q2x1c3RlclR5cGUgPSAnV2FsbCc7XHJcbiAgICAgICAgZGxhLnNldHRpbmdzLkJpYXNUb3dhcmRzID0gJ0xlZnQnO1xyXG4gICAgICAgIHJlc2V0KCk7XHJcbiAgICAgICAgZGxhLnVucGF1c2UoKTtcclxuICAgICAgICBicmVhaztcclxuXHJcbiAgICAgIGNhc2UgJzQnOlxyXG4gICAgICAgIGRsYS5wYXVzZSgpO1xyXG4gICAgICAgIGN1cnJlbnRDbHVzdGVyVHlwZSA9ICdXYWxsJztcclxuICAgICAgICBkbGEuc2V0dGluZ3MuQmlhc1Rvd2FyZHMgPSAnUmlnaHQnO1xyXG4gICAgICAgIHJlc2V0KCk7XHJcbiAgICAgICAgZGxhLnVucGF1c2UoKTtcclxuICAgICAgICBicmVhaztcclxuXHJcbiAgICAgIGNhc2UgJzUnOlxyXG4gICAgICAgIGRsYS5wYXVzZSgpO1xyXG4gICAgICAgIGN1cnJlbnRDbHVzdGVyVHlwZSA9ICdXYWxsJztcclxuICAgICAgICBkbGEuc2V0dGluZ3MuQmlhc1Rvd2FyZHMgPSAnRXF1YXRvcic7XHJcbiAgICAgICAgcmVzZXQoKTtcclxuICAgICAgICBkbGEudW5wYXVzZSgpO1xyXG4gICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgY2FzZSAnNic6XHJcbiAgICAgICAgZGxhLnBhdXNlKCk7XHJcbiAgICAgICAgY3VycmVudENsdXN0ZXJUeXBlID0gJ1dhbGwnO1xyXG4gICAgICAgIGRsYS5zZXR0aW5ncy5CaWFzVG93YXJkcyA9ICdNZXJpZGlhbic7XHJcbiAgICAgICAgcmVzZXQoKTtcclxuICAgICAgICBkbGEudW5wYXVzZSgpO1xyXG4gICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgY2FzZSAnNyc6XHJcbiAgICAgICAgZGxhLnBhdXNlKCk7XHJcbiAgICAgICAgY3VycmVudENsdXN0ZXJUeXBlID0gJ1dhbGwnO1xyXG4gICAgICAgIGRsYS5zZXR0aW5ncy5CaWFzVG93YXJkcyA9ICdFZGdlcyc7XHJcbiAgICAgICAgcmVzZXQoKTtcclxuICAgICAgICBkbGEudW5wYXVzZSgpO1xyXG4gICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgY2FzZSAnOCc6XHJcbiAgICAgICAgZGxhLnBhdXNlKCk7XHJcbiAgICAgICAgY3VycmVudENsdXN0ZXJUeXBlID0gJ1BvaW50JztcclxuICAgICAgICBkbGEuc2V0dGluZ3MuQmlhc1Rvd2FyZHMgPSAnQ2VudGVyJztcclxuICAgICAgICByZXNldCgpO1xyXG4gICAgICAgIGRsYS51bnBhdXNlKCk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG4vLyBMYXVuY2ggdGhlIHNrZXRjaCB1c2luZyBwNWpzIGluIGluc3RhbnRpYXRlZCBtb2RlXHJcbm5ldyBwNShza2V0Y2gpOyIsInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpIHx8ICgxLCBldmFsKShcInRoaXNcIik7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iXSwic291cmNlUm9vdCI6IiJ9