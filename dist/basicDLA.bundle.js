!function(t){var e={};function s(_){if(e[_])return e[_].exports;var i=e[_]={i:_,l:!1,exports:{}};return t[_].call(i.exports,i,i.exports,s),i.l=!0,i.exports}s.m=t,s.c=e,s.d=function(t,e,_){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:_})},s.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var _=Object.create(null);if(s.r(_),Object.defineProperty(_,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)s.d(_,i,function(e){return t[e]}.bind(null,i));return _},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="",s(s.s=0)}([function(t,e,s){"use strict";s.r(e);var _={CircleDiameter:5,InitialClusterType:"Random"},i={ShowClusters:!0,ShowWalkers:!0,MaxWalkers:15e3,WalkerSource:"Random",ReplenishWalkers:!1};const n=[];class r{constructor(){this._bvh_parent=null,this._bvh_branch=!0,this._bvh_left=null,this._bvh_right=null,this._bvh_sort=0,this._bvh_min_x=0,this._bvh_min_y=0,this._bvh_max_x=0,this._bvh_max_y=0}static getBranch(){return n.length?n.pop():new r}static releaseBranch(t){n.push(t)}static sortBranches(t,e){return t.sort>e.sort?-1:1}}class h{constructor(){this._hierarchy=null,this._bodies=[],this._dirty_branches=[]}insert(t,e=!1){if(!e){const e=t._bvh;if(e&&e!==this)throw new Error("Body belongs to another collision system");t._bvh=this,this._bodies.push(t)}const s=t._polygon,_=t.x,i=t.y;s&&(t._dirty_coords||t.x!==t._x||t.y!==t._y||t.angle!==t._angle||t.scale_x!==t._scale_x||t.scale_y!==t._scale_y)&&t._calculateCoords();const n=t._bvh_padding,h=s?0:t.radius*t.scale,o=(s?t._min_x:_-h)-n,l=(s?t._min_y:i-h)-n,a=(s?t._max_x:_+h)+n,c=(s?t._max_y:i+h)+n;t._bvh_min_x=o,t._bvh_min_y=l,t._bvh_max_x=a,t._bvh_max_y=c;let b=this._hierarchy,u=0;if(b)for(;;){if(!b._bvh_branch){const e=b._bvh_parent,s=b._bvh_min_x,_=b._bvh_min_y,i=b._bvh_max_x,n=b._bvh_max_y,h=b._bvh_parent=t._bvh_parent=r.getBranch();h._bvh_parent=e,h._bvh_left=b,h._bvh_right=t,h._bvh_sort=u++,h._bvh_min_x=o<s?o:s,h._bvh_min_y=l<_?l:_,h._bvh_max_x=a>i?a:i,h._bvh_max_y=c>n?c:n,e?e._bvh_left===b?e._bvh_left=h:e._bvh_right=h:this._hierarchy=h;break}{const t=b._bvh_left,e=t._bvh_min_y,s=t._bvh_max_x,_=t._bvh_max_y,i=o<t._bvh_min_x?o:t._bvh_min_x,n=l<e?l:e,r=a>s?a:s,h=c>_?c:_,d=(r-i)*(h-n)-(s-t._bvh_min_x)*(_-e),v=b._bvh_right,m=v._bvh_min_x,y=v._bvh_min_y,x=v._bvh_max_x,f=v._bvh_max_y,p=o<m?o:m,g=l<y?l:y,w=a>x?a:x,k=c>f?c:f,W=(w-p)*(k-g)-(x-m)*(f-y);b._bvh_sort=u++,b._bvh_min_x=i<p?i:p,b._bvh_min_y=n<g?n:g,b._bvh_max_x=r>w?r:w,b._bvh_max_y=h>k?h:k,b=d<=W?t:v}}else this._hierarchy=t}remove(t,e=!1){if(!e){const e=t._bvh;if(e&&e!==this)throw new Error("Body belongs to another collision system");t._bvh=null,this._bodies.splice(this._bodies.indexOf(t),1)}if(this._hierarchy===t)return void(this._hierarchy=null);const s=t._bvh_parent,_=s._bvh_parent,i=s._bvh_left,n=i===t?s._bvh_right:i;if(n._bvh_parent=_,n._bvh_branch&&(n._bvh_sort=s._bvh_sort),_){_._bvh_left===s?_._bvh_left=n:_._bvh_right=n;let t=_;for(;t;){const e=t._bvh_left,s=e._bvh_min_x,_=e._bvh_min_y,i=e._bvh_max_x,n=e._bvh_max_y,r=t._bvh_right,h=r._bvh_min_x,o=r._bvh_min_y,l=r._bvh_max_x,a=r._bvh_max_y;t._bvh_min_x=s<h?s:h,t._bvh_min_y=_<o?_:o,t._bvh_max_x=i>l?i:l,t._bvh_max_y=n>a?n:a,t=t._bvh_parent}}else this._hierarchy=n;r.releaseBranch(s)}update(){const t=this._bodies,e=t.length;for(let s=0;s<e;++s){const e=t[s];let _=!1;if(_||e.padding===e._bvh_padding||(e._bvh_padding=e.padding,_=!0),!_){const t=e._polygon;t&&(e._dirty_coords||e.x!==e._x||e.y!==e._y||e.angle!==e._angle||e.scale_x!==e._scale_x||e.scale_y!==e._scale_y)&&e._calculateCoords();const s=e.x,i=e.y,n=t?0:e.radius*e.scale,r=t?e._min_x:s-n,h=t?e._min_y:i-n,o=t?e._max_x:s+n,l=t?e._max_y:i+n;_=r<e._bvh_min_x||h<e._bvh_min_y||o>e._bvh_max_x||l>e._bvh_max_y}_&&(this.remove(e,!0),this.insert(e,!0))}}potentials(t){const e=[],s=t._bvh_min_x,_=t._bvh_min_y,i=t._bvh_max_x,n=t._bvh_max_y;let r=this._hierarchy,h=!0;if(!r||!r._bvh_branch)return e;for(;r;){if(h){h=!1;let t=r._bvh_branch?r._bvh_left:null;for(;t&&t._bvh_max_x>=s&&t._bvh_max_y>=_&&t._bvh_min_x<=i&&t._bvh_min_y<=n;)t=(r=t)._bvh_branch?r._bvh_left:null}const o=r._bvh_branch,l=o?r._bvh_right:null;if(l&&l._bvh_max_x>s&&l._bvh_max_y>_&&l._bvh_min_x<i&&l._bvh_min_y<n)r=l,h=!0;else{o||r===t||e.push(r);let s=r._bvh_parent;if(!s)break;for(;s&&s._bvh_right===r;)s=(r=s)._bvh_parent;r=s}}return e}draw(t){const e=this._bodies,s=e.length;for(let _=0;_<s;++_)e[_].draw(t)}drawBVH(t){let e=this._hierarchy,s=!0;for(;e;){if(s){s=!1;let t=e._bvh_branch?e._bvh_left:null;for(;t;)t=(e=t)._bvh_branch?e._bvh_left:null}const _=e._bvh_branch,i=e._bvh_min_x,n=e._bvh_min_y,r=e._bvh_max_x,h=e._bvh_max_y,o=_?e._bvh_right:null;if(t.moveTo(i,n),t.lineTo(r,n),t.lineTo(r,h),t.lineTo(i,h),t.lineTo(i,n),o)e=o,s=!0;else{let t=e._bvh_parent;if(!t)break;for(;t&&t._bvh_right===e;)t=(e=t)._bvh_parent;e=t}}}}class o{constructor(){this.collision=!1,this.a=null,this.b=null,this.a_in_b=!1,this.a_in_b=!1,this.overlap=0,this.overlap_x=0,this.overlap_y=0}}function l(t,e,s=null,_=!0){const i=t._polygon,n=e._polygon;let r=!1;return s&&(s.a=t,s.b=e,s.a_in_b=!0,s.b_in_a=!0,s.overlap=null,s.overlap_x=0,s.overlap_y=0),i&&(t._dirty_coords||t.x!==t._x||t.y!==t._y||t.angle!==t._angle||t.scale_x!==t._scale_x||t.scale_y!==t._scale_y)&&t._calculateCoords(),n&&(e._dirty_coords||e.x!==e._x||e.y!==e._y||e.angle!==e._angle||e.scale_x!==e._scale_x||e.scale_y!==e._scale_y)&&e._calculateCoords(),_&&!function(t,e){const s=t._polygon,_=s?0:t.x,i=s?0:t.y,n=s?0:t.radius*t.scale,r=s?t._min_x:_-n,h=s?t._min_y:i-n,o=s?t._max_x:_+n,l=s?t._max_y:i+n,a=e._polygon,c=a?0:e.x,b=a?0:e.y,u=a?0:e.radius*e.scale,d=a?e._min_x:c-u,v=a?e._min_y:b-u,m=a?e._max_x:c+u,y=a?e._max_y:b+u;return r<m&&h<y&&o>d&&l>v}(t,e)||(i&&t._dirty_normals&&t._calculateNormals(),n&&e._dirty_normals&&e._calculateNormals(),r=i&&n?function(t,e,s=null){const _=t._coords.length,i=e._coords.length;if(2===_&&2===i){const _=t._coords,i=e._coords;return s&&(s.overlap=0),_[0]===i[0]&&_[1]===i[1]}const n=t._coords,r=e._coords,h=t._normals,o=e._normals;if(_>2)for(let t=0,e=1;t<_;t+=2,e+=2)if(c(n,r,h[t],h[e],s))return!1;if(i>2)for(let t=0,e=1;t<i;t+=2,e+=2)if(c(n,r,o[t],o[e],s))return!1;return!0}(t,e,s):i?a(t,e,s,!1):n?a(e,t,s,!0):function(t,e,s=null){const _=t.radius*t.scale,i=e.radius*e.scale,n=e.x-t.x,r=e.y-t.y,h=_+i,o=n*n+r*r;if(o>h*h)return!1;if(s){const t=Math.sqrt(o);s.a_in_b=_<=i&&t<=i-_,s.b_in_a=i<=_&&t<=_-i,s.overlap=h-t,s.overlap_x=n/t,s.overlap_y=r/t}return!0}(t,e,s)),s&&(s.collision=r),r}function a(t,e,s=null,_=!1){const i=t._coords,n=t._edges,r=t._normals,h=e.x,o=e.y,l=e.radius*e.scale,a=2*l,c=l*l,b=i.length;let u=!0,d=!0,v=null,m=0,y=0;if(2===b){const t=h-i[0],e=o-i[1],_=t*t+e*e;if(_>c)return!1;if(s){const s=Math.sqrt(_);v=l-s,m=t/s,y=e/s,d=!1}}else for(let t=0,e=1;t<b;t+=2,e+=2){const _=h-i[t],x=o-i[e],f=n[t],p=n[e],g=_*f+x*p,w=g<0?-1:g>f*f+p*p?1:0;let k=!1,W=0,C=0,M=0;if(s&&u&&_*_+x*x>c&&(u=!1),w){const e=-1===w,r=e?0===t?b-2:t-2:t===b-2?0:t+2,a=r+1,u=h-i[r],v=o-i[a],m=n[r],y=n[a],f=u*m+v*y;if((f<0?-1:f>m*m+y*y?1:0)===-w){const t=e?_:u,i=e?x:v,n=t*t+i*i;if(n>c)return!1;if(s){const e=Math.sqrt(n);k=!0,W=l-e,C=t/e,M=i/e,d=!1}}}else{const i=r[t],n=r[e],h=_*i+x*n,o=h<0?-h:h;if(h>0&&o>l)return!1;s&&(k=!0,W=l-h,C=i,M=n,(d&&h>=0||W<a)&&(d=!1))}k&&(null===v||v>W)&&(v=W,m=C,y=M)}return s&&(s.a_in_b=_?d:u,s.b_in_a=_?u:d,s.overlap=v,s.overlap_x=_?-m:m,s.overlap_y=_?-y:y),!0}function c(t,e,s,_,i=null){const n=t.length,r=e.length;if(!n||!r)return!0;let h=null,o=null,l=null,a=null;for(let e=0,i=1;e<n;e+=2,i+=2){const n=t[e]*s+t[i]*_;(null===h||h>n)&&(h=n),(null===o||o<n)&&(o=n)}for(let t=0,i=1;t<r;t+=2,i+=2){const n=e[t]*s+e[i]*_;(null===l||l>n)&&(l=n),(null===a||a<n)&&(a=n)}if(h>a||o<l)return!0;if(i){let t=0;if(h<l)if(i.a_in_b=!1,o<a)t=o-l,i.b_in_a=!1;else{const e=o-l,s=a-h;t=e<s?e:-s}else if(i.b_in_a=!1,o>a)t=h-a,i.a_in_b=!1;else{const e=o-l,s=a-h;t=e<s?e:-s}const e=i.overlap,n=t<0?-t:t;if(null===e||e>n){const e=t<0?-1:1;i.overlap=n,i.overlap_x=s*e,i.overlap_y=_*e}}return!1}class b{constructor(t=0,e=0,s=0){this.x=t,this.y=e,this.padding=s,this._circle=!1,this._polygon=!1,this._point=!1,this._bvh=null,this._bvh_parent=null,this._bvh_branch=!1,this._bvh_padding=s,this._bvh_min_x=0,this._bvh_min_y=0,this._bvh_max_x=0,this._bvh_max_y=0}collides(t,e=null,s=!0){return l(this,t,e,s)}potentials(){const t=this._bvh;if(null===t)throw new Error("Body does not belong to a collision system");return t.potentials(this)}remove(){const t=this._bvh;t&&t.remove(this,!1)}createResult(){return new o}static createResult(){return new o}}class u extends b{constructor(t=0,e=0,s=0,_=1,i=0){super(t,e,i),this.radius=s,this.scale=_}draw(t){const e=this.x,s=this.y,_=this.radius*this.scale;t.moveTo(e+_,s),t.arc(e,s,_,0,2*Math.PI)}}class d extends b{constructor(t=0,e=0,s=[],_=0,i=1,n=1,r=0){super(t,e,r),this.angle=_,this.scale_x=i,this.scale_y=n,this._polygon=!0,this._x=t,this._y=e,this._angle=_,this._scale_x=i,this._scale_y=n,this._min_x=0,this._min_y=0,this._max_x=0,this._max_y=0,this._points=null,this._coords=null,this._edges=null,this._normals=null,this._dirty_coords=!0,this._dirty_normals=!0,d.prototype.setPoints.call(this,s)}draw(t){(this._dirty_coords||this.x!==this._x||this.y!==this._y||this.angle!==this._angle||this.scale_x!==this._scale_x||this.scale_y!==this._scale_y)&&this._calculateCoords();const e=this._coords;if(2===e.length)t.moveTo(e[0],e[1]),t.arc(e[0],e[1],1,0,2*Math.PI);else{t.moveTo(e[0],e[1]);for(let s=2;s<e.length;s+=2)t.lineTo(e[s],e[s+1]);e.length>4&&t.lineTo(e[0],e[1])}}setPoints(t){const e=t.length;this._points=new Float64Array(2*e),this._coords=new Float64Array(2*e),this._edges=new Float64Array(2*e),this._normals=new Float64Array(2*e);const s=this._points;for(let _=0,i=0,n=1;_<e;++_,i+=2,n+=2){const e=t[_];s[i]=e[0],s[n]=e[1]}this._dirty_coords=!0}_calculateCoords(){const t=this.x,e=this.y,s=this.angle,_=this.scale_x,i=this.scale_y,n=this._points,r=this._coords,h=n.length;let o,l,a,c;for(let b=0,u=1;b<h;b+=2,u+=2){let h=n[b]*_,d=n[u]*i;if(s){const t=Math.cos(s),e=Math.sin(s),_=h;h=_*t-d*e,d=_*e+d*t}h+=t,d+=e,r[b]=h,r[u]=d,0===b?(o=l=h,a=c=d):(h<o?o=h:h>l&&(l=h),d<a?a=d:d>c&&(c=d))}this._x=t,this._y=e,this._angle=s,this._scale_x=_,this._scale_y=i,this._min_x=o,this._min_y=a,this._max_x=l,this._max_y=c,this._dirty_coords=!1,this._dirty_normals=!0}_calculateNormals(){const t=this._coords,e=this._edges,s=this._normals,_=t.length;for(let i=0,n=1;i<_;i+=2,n+=2){const r=i+2<_?i+2:0,h=t[r]-t[i],o=t[r+1]-t[n],l=h||o?Math.sqrt(h*h+o*o):0;e[i]=h,e[n]=o,s[i]=l?o/l:0,s[n]=l?-h/l:0}this._dirty_normals=!1}}class v extends d{constructor(t=0,e=0,s=0){super(t,e,[[0,0]],0,1,1,s),this._point=!0}}v.prototype.setPoints=void 0;class m{constructor(){this._bvh=new h}createCircle(t=0,e=0,s=0,_=1,i=0){const n=new u(t,e,s,_,i);return this._bvh.insert(n),n}createPolygon(t=0,e=0,s=[[0,0]],_=0,i=1,n=1,r=0){const h=new d(t,e,s,_,i,n,r);return this._bvh.insert(h),h}createPoint(t=0,e=0,s=0){const _=new v(t,e,s);return this._bvh.insert(_),_}createResult(){return new o}static createResult(){return new o}insert(...t){for(const e of t)this._bvh.insert(e,!1);return this}remove(...t){for(const e of t)this._bvh.remove(e,!1);return this}update(){return this._bvh.update(),this}draw(t){return this._bvh.draw(t)}drawBVH(t){return this._bvh.drawBVH(t)}potentials(t){return this._bvh.potentials(t)}collides(t,e,s=null,_=!0){return l(t,e,s,_)}}var y=class{constructor(t,e){this.p5=t,this.settings=Object.assign({},i,e),this.paused=!1,this.showWalkers=this.settings.ShowWalkers,this.showClusters=this.settings.showClusters,this.numWalkers=0,this.system=new m,this.bodies=[],this.createWalkers(this.settings.MaxWalkers)}iterate(){if(!this.paused){if(this.settings.ReplenishWalkers&&this.numWalkers<this.settings.MaxWalkers&&this.createWalkers(this.settings.MaxWalkers-this.numWalkers),this.bodies.length>0)for(let t of this.bodies){if(!t.stuck){let e=this.p5.random(-2,2),s=this.p5.random(-2,2);t.x+e>0&&t.x+e<window.innerWidth&&(t.x+=e),t.y+s>0&&t.y+s<window.innerHeight&&(t.y+=s)}t.age++}this.system.update(),this.handleCollisions()}}draw(){this.p5.background(255),this.p5.noStroke();for(let t of this.bodies)t.stuck?this.p5.fill(0,0,120):this.p5.fill(0,0,230),(this.showWalkers||t.stuck)&&this.p5.ellipse(t.x,t.y,this.settings.CircleDiameter)}handleCollisions(){for(let t of this.bodies){if(t.stuck)continue;const e=t.potentials();for(let s of e)s.stuck&&t.collides(s)&&(t.stuck=!0,this.numWalkers--)}}createParticle(t,e,s=!1){let _=this.system.createCircle(t,e,this.settings.CircleDiameter/2);_.stuck=s,_.age=0,this.bodies.push(_)}createWalker(t,e){this.createParticle(t,e),this.numWalkers++}createWalkers(t){for(let e=0;e<t;e++){let t,e;switch(this.settings.WalkerSource){case"Edges":switch(Math.round(p5.random(1,4))){case 1:t=p5.random(window.innerWidth),e=0;break;case 2:t=window.innerWidth,e=p5.random(window.innerHeight);break;case 3:t=p5.random(window.innerWidth),e=window.innerHeight;break;case 4:t=0,e=p5.random(window.innerHeight)}this.createWalker(t,e);break;case"Circle":let s=50,_=this.p5.random(360);t=window.innerWidth/2+s*Math.cos(_*Math.PI/180),e=window.innerHeight/2+s*Math.sin(_*Math.PI/180),this.createWalker(t,e);break;case"Random":t=this.p5.random(window.innerWidth),e=this.p5.random(window.innerHeight),this.createWalker(t,e)}}}createClusterFromCoords(t){if(t.length>0)for(let e of t)this.createParticle(e.x,e.y,!0)}removeAll(){for(let t of this.bodies)this.system.remove(t);this.bodies=[],this.numWalkers=0}togglePause(){this.paused=!this.paused}toggleShowWalkers(){this.showWalkers=!this.showWalkers}toggleShowClusters(){this.showClusters=!this.showClusters}};let x;new p5(function(t){function e(){let e=[];switch(_.InitialClusterType){case"Point":e.push({x:window.innerWidth/2,y:window.innerHeight/2});break;case"Ring":let s=100,i=20;for(let t=0;t<i;t++)e.push({x:window.innerWidth/2+s*Math.cos(360/i*t*Math.PI/180),y:window.innerHeight/2+s*Math.sin(360/i*t*Math.PI/180)});break;case"Random":for(let s=0;s<50;s++)e.push({x:t.random(window.innerWidth),y:t.random(window.innerHeight)})}x.createClusterFromCoords(e)}t.setup=function(){t.createCanvas(window.innerWidth,window.innerHeight),t.colorMode(t.HSB,255),t.ellipseMode(t.CENTER),x=new y(t,_),e()},t.draw=function(){x.iterate(),x.draw()},t.keyReleased=function(){switch(t.key){case" ":x.togglePause();break;case"w":x.toggleShowWalkers();break;case"c":x.toggleShowClusters();break;case"r":x.removeAll(),e()}}})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,