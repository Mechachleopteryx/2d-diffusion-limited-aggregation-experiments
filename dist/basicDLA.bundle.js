!function(t){var e={};function s(i){if(e[i])return e[i].exports;var r=e[i]={i:i,l:!1,exports:{}};return t[i].call(r.exports,r,r.exports,s),r.l=!0,r.exports}s.m=t,s.c=e,s.d=function(t,e,i){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},s.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(s.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)s.d(i,r,function(e){return t[e]}.bind(null,r));return i},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="",s(s.s=1)}([function(t,e,s){"use strict";var i={DefaultCircleDiameter:10,ShowClusters:!0,ShowWalkers:!0,MaxWalkers:2e4,WalkerSource:"Random",ReplenishWalkers:!1,Stickiness:.9,BiasTowards:"Center",BiasForce:1,UseFrame:!0,FrameSize:900};const r=[];class n{constructor(){this._bvh_parent=null,this._bvh_branch=!0,this._bvh_left=null,this._bvh_right=null,this._bvh_sort=0,this._bvh_min_x=0,this._bvh_min_y=0,this._bvh_max_x=0,this._bvh_max_y=0}static getBranch(){return r.length?r.pop():new n}static releaseBranch(t){r.push(t)}static sortBranches(t,e){return t.sort>e.sort?-1:1}}class h{constructor(){this._hierarchy=null,this._bodies=[],this._dirty_branches=[]}insert(t,e=!1){if(!e){const e=t._bvh;if(e&&e!==this)throw new Error("Body belongs to another collision system");t._bvh=this,this._bodies.push(t)}const s=t._polygon,i=t.x,r=t.y;s&&(t._dirty_coords||t.x!==t._x||t.y!==t._y||t.angle!==t._angle||t.scale_x!==t._scale_x||t.scale_y!==t._scale_y)&&t._calculateCoords();const h=t._bvh_padding,_=s?0:t.radius*t.scale,a=(s?t._min_x:i-_)-h,o=(s?t._min_y:r-_)-h,l=(s?t._max_x:i+_)+h,c=(s?t._max_y:r+_)+h;t._bvh_min_x=a,t._bvh_min_y=o,t._bvh_max_x=l,t._bvh_max_y=c;let d=this._hierarchy,b=0;if(d)for(;;){if(!d._bvh_branch){const e=d._bvh_parent,s=d._bvh_min_x,i=d._bvh_min_y,r=d._bvh_max_x,h=d._bvh_max_y,_=d._bvh_parent=t._bvh_parent=n.getBranch();_._bvh_parent=e,_._bvh_left=d,_._bvh_right=t,_._bvh_sort=b++,_._bvh_min_x=a<s?a:s,_._bvh_min_y=o<i?o:i,_._bvh_max_x=l>r?l:r,_._bvh_max_y=c>h?c:h,e?e._bvh_left===d?e._bvh_left=_:e._bvh_right=_:this._hierarchy=_;break}{const t=d._bvh_left,e=t._bvh_min_y,s=t._bvh_max_x,i=t._bvh_max_y,r=a<t._bvh_min_x?a:t._bvh_min_x,n=o<e?o:e,h=l>s?l:s,_=c>i?c:i,m=(h-r)*(_-n)-(s-t._bvh_min_x)*(i-e),u=d._bvh_right,g=u._bvh_min_x,y=u._bvh_min_y,v=u._bvh_max_x,p=u._bvh_max_y,f=a<g?a:g,x=o<y?o:y,w=l>v?l:v,k=c>p?c:p,W=(w-f)*(k-x)-(v-g)*(p-y);d._bvh_sort=b++,d._bvh_min_x=r<f?r:f,d._bvh_min_y=n<x?n:x,d._bvh_max_x=h>w?h:w,d._bvh_max_y=_>k?_:k,d=m<=W?t:u}}else this._hierarchy=t}remove(t,e=!1){if(!e){const e=t._bvh;if(e&&e!==this)throw new Error("Body belongs to another collision system");t._bvh=null,this._bodies.splice(this._bodies.indexOf(t),1)}if(this._hierarchy===t)return void(this._hierarchy=null);const s=t._bvh_parent,i=s._bvh_parent,r=s._bvh_left,h=r===t?s._bvh_right:r;if(h._bvh_parent=i,h._bvh_branch&&(h._bvh_sort=s._bvh_sort),i){i._bvh_left===s?i._bvh_left=h:i._bvh_right=h;let t=i;for(;t;){const e=t._bvh_left,s=e._bvh_min_x,i=e._bvh_min_y,r=e._bvh_max_x,n=e._bvh_max_y,h=t._bvh_right,_=h._bvh_min_x,a=h._bvh_min_y,o=h._bvh_max_x,l=h._bvh_max_y;t._bvh_min_x=s<_?s:_,t._bvh_min_y=i<a?i:a,t._bvh_max_x=r>o?r:o,t._bvh_max_y=n>l?n:l,t=t._bvh_parent}}else this._hierarchy=h;n.releaseBranch(s)}update(){const t=this._bodies,e=t.length;for(let s=0;s<e;++s){const e=t[s];let i=!1;if(i||e.padding===e._bvh_padding||(e._bvh_padding=e.padding,i=!0),!i){const t=e._polygon;t&&(e._dirty_coords||e.x!==e._x||e.y!==e._y||e.angle!==e._angle||e.scale_x!==e._scale_x||e.scale_y!==e._scale_y)&&e._calculateCoords();const s=e.x,r=e.y,n=t?0:e.radius*e.scale,h=t?e._min_x:s-n,_=t?e._min_y:r-n,a=t?e._max_x:s+n,o=t?e._max_y:r+n;i=h<e._bvh_min_x||_<e._bvh_min_y||a>e._bvh_max_x||o>e._bvh_max_y}i&&(this.remove(e,!0),this.insert(e,!0))}}potentials(t){const e=[],s=t._bvh_min_x,i=t._bvh_min_y,r=t._bvh_max_x,n=t._bvh_max_y;let h=this._hierarchy,_=!0;if(!h||!h._bvh_branch)return e;for(;h;){if(_){_=!1;let t=h._bvh_branch?h._bvh_left:null;for(;t&&t._bvh_max_x>=s&&t._bvh_max_y>=i&&t._bvh_min_x<=r&&t._bvh_min_y<=n;)t=(h=t)._bvh_branch?h._bvh_left:null}const a=h._bvh_branch,o=a?h._bvh_right:null;if(o&&o._bvh_max_x>s&&o._bvh_max_y>i&&o._bvh_min_x<r&&o._bvh_min_y<n)h=o,_=!0;else{a||h===t||e.push(h);let s=h._bvh_parent;if(!s)break;for(;s&&s._bvh_right===h;)s=(h=s)._bvh_parent;h=s}}return e}draw(t){const e=this._bodies,s=e.length;for(let i=0;i<s;++i)e[i].draw(t)}drawBVH(t){let e=this._hierarchy,s=!0;for(;e;){if(s){s=!1;let t=e._bvh_branch?e._bvh_left:null;for(;t;)t=(e=t)._bvh_branch?e._bvh_left:null}const i=e._bvh_branch,r=e._bvh_min_x,n=e._bvh_min_y,h=e._bvh_max_x,_=e._bvh_max_y,a=i?e._bvh_right:null;if(t.moveTo(r,n),t.lineTo(h,n),t.lineTo(h,_),t.lineTo(r,_),t.lineTo(r,n),a)e=a,s=!0;else{let t=e._bvh_parent;if(!t)break;for(;t&&t._bvh_right===e;)t=(e=t)._bvh_parent;e=t}}}}class _{constructor(){this.collision=!1,this.a=null,this.b=null,this.a_in_b=!1,this.a_in_b=!1,this.overlap=0,this.overlap_x=0,this.overlap_y=0}}function a(t,e,s=null,i=!0){const r=t._polygon,n=e._polygon;let h=!1;return s&&(s.a=t,s.b=e,s.a_in_b=!0,s.b_in_a=!0,s.overlap=null,s.overlap_x=0,s.overlap_y=0),r&&(t._dirty_coords||t.x!==t._x||t.y!==t._y||t.angle!==t._angle||t.scale_x!==t._scale_x||t.scale_y!==t._scale_y)&&t._calculateCoords(),n&&(e._dirty_coords||e.x!==e._x||e.y!==e._y||e.angle!==e._angle||e.scale_x!==e._scale_x||e.scale_y!==e._scale_y)&&e._calculateCoords(),i&&!function(t,e){const s=t._polygon,i=s?0:t.x,r=s?0:t.y,n=s?0:t.radius*t.scale,h=s?t._min_x:i-n,_=s?t._min_y:r-n,a=s?t._max_x:i+n,o=s?t._max_y:r+n,l=e._polygon,c=l?0:e.x,d=l?0:e.y,b=l?0:e.radius*e.scale,m=l?e._min_x:c-b,u=l?e._min_y:d-b,g=l?e._max_x:c+b,y=l?e._max_y:d+b;return h<g&&_<y&&a>m&&o>u}(t,e)||(r&&t._dirty_normals&&t._calculateNormals(),n&&e._dirty_normals&&e._calculateNormals(),h=r&&n?function(t,e,s=null){const i=t._coords.length,r=e._coords.length;if(2===i&&2===r){const i=t._coords,r=e._coords;return s&&(s.overlap=0),i[0]===r[0]&&i[1]===r[1]}const n=t._coords,h=e._coords,_=t._normals,a=e._normals;if(i>2)for(let t=0,e=1;t<i;t+=2,e+=2)if(l(n,h,_[t],_[e],s))return!1;if(r>2)for(let t=0,e=1;t<r;t+=2,e+=2)if(l(n,h,a[t],a[e],s))return!1;return!0}(t,e,s):r?o(t,e,s,!1):n?o(e,t,s,!0):function(t,e,s=null){const i=t.radius*t.scale,r=e.radius*e.scale,n=e.x-t.x,h=e.y-t.y,_=i+r,a=n*n+h*h;if(a>_*_)return!1;if(s){const t=Math.sqrt(a);s.a_in_b=i<=r&&t<=r-i,s.b_in_a=r<=i&&t<=i-r,s.overlap=_-t,s.overlap_x=n/t,s.overlap_y=h/t}return!0}(t,e,s)),s&&(s.collision=h),h}function o(t,e,s=null,i=!1){const r=t._coords,n=t._edges,h=t._normals,_=e.x,a=e.y,o=e.radius*e.scale,l=2*o,c=o*o,d=r.length;let b=!0,m=!0,u=null,g=0,y=0;if(2===d){const t=_-r[0],e=a-r[1],i=t*t+e*e;if(i>c)return!1;if(s){const s=Math.sqrt(i);u=o-s,g=t/s,y=e/s,m=!1}}else for(let t=0,e=1;t<d;t+=2,e+=2){const i=_-r[t],v=a-r[e],p=n[t],f=n[e],x=i*p+v*f,w=x<0?-1:x>p*p+f*f?1:0;let k=!1,W=0,F=0,S=0;if(s&&b&&i*i+v*v>c&&(b=!1),w){const e=-1===w,h=e?0===t?d-2:t-2:t===d-2?0:t+2,l=h+1,b=_-r[h],u=a-r[l],g=n[h],y=n[l],p=b*g+u*y;if((p<0?-1:p>g*g+y*y?1:0)===-w){const t=e?i:b,r=e?v:u,n=t*t+r*r;if(n>c)return!1;if(s){const e=Math.sqrt(n);k=!0,W=o-e,F=t/e,S=r/e,m=!1}}}else{const r=h[t],n=h[e],_=i*r+v*n,a=_<0?-_:_;if(_>0&&a>o)return!1;s&&(k=!0,W=o-_,F=r,S=n,(m&&_>=0||W<l)&&(m=!1))}k&&(null===u||u>W)&&(u=W,g=F,y=S)}return s&&(s.a_in_b=i?m:b,s.b_in_a=i?b:m,s.overlap=u,s.overlap_x=i?-g:g,s.overlap_y=i?-y:y),!0}function l(t,e,s,i,r=null){const n=t.length,h=e.length;if(!n||!h)return!0;let _=null,a=null,o=null,l=null;for(let e=0,r=1;e<n;e+=2,r+=2){const n=t[e]*s+t[r]*i;(null===_||_>n)&&(_=n),(null===a||a<n)&&(a=n)}for(let t=0,r=1;t<h;t+=2,r+=2){const n=e[t]*s+e[r]*i;(null===o||o>n)&&(o=n),(null===l||l<n)&&(l=n)}if(_>l||a<o)return!0;if(r){let t=0;if(_<o)if(r.a_in_b=!1,a<l)t=a-o,r.b_in_a=!1;else{const e=a-o,s=l-_;t=e<s?e:-s}else if(r.b_in_a=!1,a>l)t=_-l,r.a_in_b=!1;else{const e=a-o,s=l-_;t=e<s?e:-s}const e=r.overlap,n=t<0?-t:t;if(null===e||e>n){const e=t<0?-1:1;r.overlap=n,r.overlap_x=s*e,r.overlap_y=i*e}}return!1}class c{constructor(t=0,e=0,s=0){this.x=t,this.y=e,this.padding=s,this._circle=!1,this._polygon=!1,this._point=!1,this._bvh=null,this._bvh_parent=null,this._bvh_branch=!1,this._bvh_padding=s,this._bvh_min_x=0,this._bvh_min_y=0,this._bvh_max_x=0,this._bvh_max_y=0}collides(t,e=null,s=!0){return a(this,t,e,s)}potentials(){const t=this._bvh;if(null===t)throw new Error("Body does not belong to a collision system");return t.potentials(this)}remove(){const t=this._bvh;t&&t.remove(this,!1)}createResult(){return new _}static createResult(){return new _}}class d extends c{constructor(t=0,e=0,s=0,i=1,r=0){super(t,e,r),this.radius=s,this.scale=i}draw(t){const e=this.x,s=this.y,i=this.radius*this.scale;t.moveTo(e+i,s),t.arc(e,s,i,0,2*Math.PI)}}class b extends c{constructor(t=0,e=0,s=[],i=0,r=1,n=1,h=0){super(t,e,h),this.angle=i,this.scale_x=r,this.scale_y=n,this._polygon=!0,this._x=t,this._y=e,this._angle=i,this._scale_x=r,this._scale_y=n,this._min_x=0,this._min_y=0,this._max_x=0,this._max_y=0,this._points=null,this._coords=null,this._edges=null,this._normals=null,this._dirty_coords=!0,this._dirty_normals=!0,b.prototype.setPoints.call(this,s)}draw(t){(this._dirty_coords||this.x!==this._x||this.y!==this._y||this.angle!==this._angle||this.scale_x!==this._scale_x||this.scale_y!==this._scale_y)&&this._calculateCoords();const e=this._coords;if(2===e.length)t.moveTo(e[0],e[1]),t.arc(e[0],e[1],1,0,2*Math.PI);else{t.moveTo(e[0],e[1]);for(let s=2;s<e.length;s+=2)t.lineTo(e[s],e[s+1]);e.length>4&&t.lineTo(e[0],e[1])}}setPoints(t){const e=t.length;this._points=new Float64Array(2*e),this._coords=new Float64Array(2*e),this._edges=new Float64Array(2*e),this._normals=new Float64Array(2*e);const s=this._points;for(let i=0,r=0,n=1;i<e;++i,r+=2,n+=2){const e=t[i];s[r]=e[0],s[n]=e[1]}this._dirty_coords=!0}_calculateCoords(){const t=this.x,e=this.y,s=this.angle,i=this.scale_x,r=this.scale_y,n=this._points,h=this._coords,_=n.length;let a,o,l,c;for(let d=0,b=1;d<_;d+=2,b+=2){let _=n[d]*i,m=n[b]*r;if(s){const t=Math.cos(s),e=Math.sin(s),i=_;_=i*t-m*e,m=i*e+m*t}_+=t,m+=e,h[d]=_,h[b]=m,0===d?(a=o=_,l=c=m):(_<a?a=_:_>o&&(o=_),m<l?l=m:m>c&&(c=m))}this._x=t,this._y=e,this._angle=s,this._scale_x=i,this._scale_y=r,this._min_x=a,this._min_y=l,this._max_x=o,this._max_y=c,this._dirty_coords=!1,this._dirty_normals=!0}_calculateNormals(){const t=this._coords,e=this._edges,s=this._normals,i=t.length;for(let r=0,n=1;r<i;r+=2,n+=2){const h=r+2<i?r+2:0,_=t[h]-t[r],a=t[h+1]-t[n],o=_||a?Math.sqrt(_*_+a*a):0;e[r]=_,e[n]=a,s[r]=o?a/o:0,s[n]=o?-_/o:0}this._dirty_normals=!1}}class m extends b{constructor(t=0,e=0,s=0){super(t,e,[[0,0]],0,1,1,s),this._point=!0}}m.prototype.setPoints=void 0;class u{constructor(){this._bvh=new h}createCircle(t=0,e=0,s=0,i=1,r=0){const n=new d(t,e,s,i,r);return this._bvh.insert(n),n}createPolygon(t=0,e=0,s=[[0,0]],i=0,r=1,n=1,h=0){const _=new b(t,e,s,i,r,n,h);return this._bvh.insert(_),_}createPoint(t=0,e=0,s=0){const i=new m(t,e,s);return this._bvh.insert(i),i}createResult(){return new _}static createResult(){return new _}insert(...t){for(const e of t)this._bvh.insert(e,!1);return this}remove(...t){for(const e of t)this._bvh.remove(e,!1);return this}update(){return this._bvh.update(),this}draw(t){return this._bvh.draw(t)}drawBVH(t){return this._bvh.drawBVH(t)}potentials(t){return this._bvh.potentials(t)}collides(t,e,s=null,i=!0){return a(t,e,s,i)}}e.a=class{constructor(t,e){this.p5=t,this.settings=Object.assign({},i,e),this.paused=!1,this.showWalkers=this.settings.ShowWalkers,this.showClusters=this.settings.ShowClusters,this.numWalkers=0,this.edges={},this.frame={},"number"==typeof this.settings.FrameSize?(this.frame.left=window.innerWidth/2-this.settings.FrameSize/2,this.frame.right=window.innerWidth/2+this.settings.FrameSize/2,this.frame.top=window.innerHeight/2-this.settings.FrameSize/2,this.frame.bottom=window.innerHeight/2+this.settings.FrameSize/2):"object"==typeof this.settings.FrameSize&&(this.frame.left=window.innerWidth/2-this.settings.FrameSize[0]/2,this.frame.right=window.innerWidth/2+this.settings.FrameSize[0]/2,this.frame.top=window.innerHeight/2-this.settings.FrameSize[1]/2,this.frame.bottom=window.innerHeight/2+this.settings.FrameSize[1]/2),this.edges.left=this.settings.UseFrame?this.frame.left:0,this.edges.right=this.settings.UseFrame?this.frame.right:window.innerWidth,this.edges.top=this.settings.UseFrame?this.frame.top:0,this.edges.bottom=this.settings.UseFrame?this.frame.bottom:window.innerHeight,this.maxDistance=this.p5.dist(this.edges.left,this.edges.top,window.innerWidth/2,window.innerHeight/2),this.system=new u,this.bodies=[]}iterate(){this.paused||(this.settings.ReplenishWalkers&&this.numWalkers<this.settings.MaxWalkers&&this.createWalkers(this.settings.MaxWalkers-this.numWalkers),this.moveWalkers(),this.system.update(),this.handleCollisions())}draw(){this.p5.background(255);for(let t of this.bodies)if(t._point);else if(t._circle)this.p5.noStroke(),t.stuck&&this.showClusters?this.p5.fill(120):!t.stuck&&this.showWalkers?this.p5.fill(230):this.p5.noFill(),this.p5.ellipse(t.x,t.y,2*t.radius);else if(t._polygon){this.p5.noStroke(),t.stuck&&this.showClusters?this.p5.fill(120):!t.stuck&&this.showWalkers?this.p5.fill(230):this.p5.noFill(),this.p5.beginShape();for(let e=0;e<t._coords.length-1;e+=2)this.p5.vertex(t._coords[e],t._coords[e+1]);this.p5.endShape()}this.settings.UseFrame&&this.drawFrame()}drawFrame(){this.p5.noFill(),this.p5.stroke(0),"number"==typeof this.settings.FrameSize?this.p5.rect(window.innerWidth/2-this.settings.FrameSize/2-1,window.innerHeight/2-this.settings.FrameSize/2-1,this.settings.FrameSize+2,this.settings.FrameSize+2):"object"==typeof this.settings.FrameSize&&this.p5.rect(window.innerWidth/2-this.settings.FrameSize[0]/2-1,window.innerHeight/2-this.settings.FrameSize[1]/2-1,this.settings.FrameSize[0]+2,this.settings.FrameSize[1]+2)}moveWalkers(){if(this.bodies.length>0)for(let t of this.bodies)if(!t.stuck){let e,s=this.p5.random(-1,1),i=this.p5.random(-1,1);switch(t._point&&(s=Math.round(s),i=Math.round(i)),this.settings.BiasTowards){case"Top":i-=this.settings.BiasForce;break;case"Bottom":i+=this.settings.BiasForce;break;case"Left":s-=this.settings.BiasForce;break;case"Right":s+=this.settings.BiasForce;break;case"Center":e=Math.atan2(window.innerHeight/2-t.y,window.innerWidth/2-t.x),s+=Math.cos(e)*this.settings.BiasForce,i+=Math.sin(e)*this.settings.BiasForce;break;case"Edges":e=Math.atan2(window.innerHeight/2-t.y,window.innerWidth/2-t.x),s-=Math.cos(e)*this.settings.BiasForce,i-=Math.sin(e)*this.settings.BiasForce}t.x+s>this.edges.left&&t.x+s<this.edges.right&&(t.x+=s),t.y+i>this.edges.top&&t.y+i<this.edges.bottom&&(t.y+=i),t.age++}}handleCollisions(){for(let t of this.bodies){if(t.stuck)continue;const e=t.potentials();for(let s of e)t._point?s.stuck&&(t.stuck=!0,this.walkers--):s.stuck&&t.collides(s)&&(t.stuck=!0,this.numWalkers--)}}createParticle(t){if(void 0===t||"object"!=typeof t)return;let e;if(t.hasOwnProperty("type"))switch(t.type){case"Point":(e=this.system.createPoint(t.x,t.y))._point=!0;break;case"Circle":(e=this.system.createCircle(t.x,t.y,t.diameter/2))._circle=!0;break;case"Polygon":(e=this.system.createPolygon(t.x,t.y,t.polygon,t.hasOwnProperty("rotation")?this.p5.radians(t.rotation):0))._polygon=!0}else{const s=this.settings.hasOwnProperty("CircleDiameter")?this.settings.CircleDiameter:this.settings.DefaultCircleDiameter,i=t.hasOwnProperty("diameter")?t.diameter:s;(e=this.system.createCircle(t.x,t.y,i/2))._circle=!0}e.stuck=!!t.hasOwnProperty("stuck")&&t.stuck,e.age=0,this.bodies.push(e)}createWalker(t){this.createParticle(t),this.numWalkers++}createWalkers(t){for(let e=0;e<t;e++){let t={};switch(this.settings.WalkerSource){case"Edges":switch(Math.round(this.p5.random(1,4))){case 1:t.x=this.p5.random(this.edges.left,this.edges.right),t.y=this.edges.top;break;case 2:t.x=this.edges.right,t.y=this.p5.random(this.edges.top,this.edges.bottom);break;case 3:t.x=this.p5.random(this.edges.left,this.edges.right),t.y=this.edges.bottom;break;case 4:t.x=this.edges.left,t.y=this.p5.random(this.edges.top,this.edges.bottom)}break;case"Circle":let e=50,s=this.p5.random(360);t.x=window.innerWidth/2+e*Math.cos(s*Math.PI/180),t.y=window.innerHeight/2+e*Math.sin(s*Math.PI/180);break;case"Random":t.x=this.p5.random(this.edges.left,this.edges.right),t.y=this.p5.random(this.edges.top,this.edges.bottom);break;case"Random-Circle":let i=this.p5.random(360),r=this.p5.random(5,430);t.x=window.innerWidth/2+r*Math.cos(i*Math.PI/180),t.y=window.innerHeight/2+r*Math.sin(i*Math.PI/180);break;case"Center":t.x=window.innerWidth/2,t.y=window.innerHeight/2}if(this.settings.VaryDiameterByDistance){let e=this.p5.dist(t.x,t.y,window.innerWidth/2,window.innerHeight/2);t.diameter=this.p5.map(e,0,this.maxDistance,this.settings.CircleDiameterRange[0],this.settings.CircleDiameterRange[1])}this.createWalker(t)}}createInitialWalkers(){this.createWalkers(this.settings.MaxWalkers)}createClusterFromParams(t){if(t.length>0)for(let e of t)e.stuck=!0,this.createParticle(e)}removeAll(){for(let t of this.bodies)this.system.remove(t);this.bodies=[],this.numWalkers=0}togglePause(){this.paused=!this.paused}toggleShowWalkers(){this.showWalkers=!this.showWalkers}toggleShowClusters(){this.showClusters=!this.showClusters}pause(){this.paused=!0}unpause(){this.paused=!1}}},function(t,e,s){"use strict";s.r(e);var i={CircleDiameter:10,MaxWalkers:5e3,InitialClusterType:"Random",UseFrame:!0,BiasTowards:"None"},r=s(0);let n;new p5(function(t){function e(){let e=[];switch(i.InitialClusterType){case"Point":e.push({x:window.innerWidth/2,y:window.innerHeight/2});break;case"Ring":let s=100,r=20;for(let t=0;t<r;t++)e.push({x:window.innerWidth/2+s*Math.cos(360/r*t*Math.PI/180),y:window.innerHeight/2+s*Math.sin(360/r*t*Math.PI/180)});break;case"Random":for(let s=0;s<20;s++)e.push({x:t.random(n.edges.left,n.edges.right),y:t.random(n.edges.top,n.edges.bottom)})}n.createClusterFromParams(e)}t.setup=function(){t.createCanvas(window.innerWidth,window.innerHeight),t.colorMode(t.HSB,255),t.ellipseMode(t.CENTER),(n=new r.a(t,i)).createInitialWalkers(),e()},t.draw=function(){n.iterate(),n.draw()},t.keyReleased=function(){switch(t.key){case" ":n.togglePause();break;case"w":n.toggleShowWalkers();break;case"c":n.toggleShowClusters();break;case"r":n.removeAll(),n.createInitialWalkers(),e()}}})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,