!function(t){var s={};function e(i){if(s[i])return s[i].exports;var n=s[i]={i:i,l:!1,exports:{}};return t[i].call(n.exports,n,n.exports,e),n.l=!0,n.exports}e.m=t,e.c=s,e.d=function(t,s,i){e.o(t,s)||Object.defineProperty(t,s,{enumerable:!0,get:i})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,s){if(1&s&&(t=e(t)),8&s)return t;if(4&s&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(e.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&s&&"string"!=typeof t)for(var n in t)e.d(i,n,function(s){return t[s]}.bind(null,n));return i},e.n=function(t){var s=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(s,"a",s),s},e.o=function(t,s){return Object.prototype.hasOwnProperty.call(t,s)},e.p="",e(e.s=0)}([function(t,s,e){"use strict";e.r(s);var i={};var n=class{constructor(t,s,e,i){this.p5=t,this.x=s,this.y=e,this.diameter=i,this.age=0,this.collisionCount=0}iterate(){this.moveRandom(),this.age++}moveTowards(t,s){this.x,this.y}moveRandom(){let t=this.p5.random(-1,1),s=this.p5.random(-1,1);this.x+t>0&&this.x+t<window.innerWidth&&(this.x+=t),this.y+s>0&&this.y+s<window.innerHeight&&(this.y+=s)}touches(t){}dist(t){}draw(){this.p5.noStroke(),this.p5.fill(0),this.p5.ellipse(this.x,this.y,this.diameter/2)}},o={ShowWalkers:!0};class r{constructor(){this.collision=!1,this.a=null,this.b=null,this.a_in_b=!1,this.a_in_b=!1,this.overlap=0,this.overlap_x=0,this.overlap_y=0}}function l(t,s,e=null,i=!0){const n=t._polygon,o=s._polygon;let r=!1;return e&&(e.a=t,e.b=s,e.a_in_b=!0,e.b_in_a=!0,e.overlap=null,e.overlap_x=0,e.overlap_y=0),n&&(t._dirty_coords||t.x!==t._x||t.y!==t._y||t.angle!==t._angle||t.scale_x!==t._scale_x||t.scale_y!==t._scale_y)&&t._calculateCoords(),o&&(s._dirty_coords||s.x!==s._x||s.y!==s._y||s.angle!==s._angle||s.scale_x!==s._scale_x||s.scale_y!==s._scale_y)&&s._calculateCoords(),i&&!function(t,s){const e=t._polygon,i=e?0:t.x,n=e?0:t.y,o=e?0:t.radius*t.scale,r=e?t._min_x:i-o,l=e?t._min_y:n-o,a=e?t._max_x:i+o,_=e?t._max_y:n+o,h=s._polygon,c=h?0:s.x,u=h?0:s.y,d=h?0:s.radius*s.scale,y=h?s._min_x:c-d,f=h?s._min_y:u-d,p=h?s._max_x:c+d,x=h?s._max_y:u+d;return r<p&&l<x&&a>y&&_>f}(t,s)||(n&&t._dirty_normals&&t._calculateNormals(),o&&s._dirty_normals&&s._calculateNormals(),r=n&&o?function(t,s,e=null){const i=t._coords.length,n=s._coords.length;if(2===i&&2===n){const i=t._coords,n=s._coords;return e&&(e.overlap=0),i[0]===n[0]&&i[1]===n[1]}const o=t._coords,r=s._coords,l=t._normals,a=s._normals;if(i>2)for(let t=0,s=1;t<i;t+=2,s+=2)if(_(o,r,l[t],l[s],e))return!1;if(n>2)for(let t=0,s=1;t<n;t+=2,s+=2)if(_(o,r,a[t],a[s],e))return!1;return!0}(t,s,e):n?a(t,s,e,!1):o?a(s,t,e,!0):function(t,s,e=null){const i=t.radius*t.scale,n=s.radius*s.scale,o=s.x-t.x,r=s.y-t.y,l=i+n,a=o*o+r*r;if(a>l*l)return!1;if(e){const t=Math.sqrt(a);e.a_in_b=i<=n&&t<=n-i,e.b_in_a=n<=i&&t<=i-n,e.overlap=l-t,e.overlap_x=o/t,e.overlap_y=r/t}return!0}(t,s,e)),e&&(e.collision=r),r}function a(t,s,e=null,i=!1){const n=t._coords,o=t._edges,r=t._normals,l=s.x,a=s.y,_=s.radius*s.scale,h=2*_,c=_*_,u=n.length;let d=!0,y=!0,f=null,p=0,x=0;if(2===u){const t=l-n[0],s=a-n[1],i=t*t+s*s;if(i>c)return!1;if(e){const e=Math.sqrt(i);f=_-e,p=t/e,x=s/e,y=!1}}else for(let t=0,s=1;t<u;t+=2,s+=2){const i=l-n[t],m=a-n[s],g=o[t],w=o[s],v=i*g+m*w,b=v<0?-1:v>g*g+w*w?1:0;let k=!1,M=0,W=0,P=0;if(e&&d&&i*i+m*m>c&&(d=!1),b){const s=-1===b,r=s?0===t?u-2:t-2:t===u-2?0:t+2,h=r+1,d=l-n[r],f=a-n[h],p=o[r],x=o[h],g=d*p+f*x;if((g<0?-1:g>p*p+x*x?1:0)===-b){const t=s?i:d,n=s?m:f,o=t*t+n*n;if(o>c)return!1;if(e){const s=Math.sqrt(o);k=!0,M=_-s,W=t/s,P=n/s,y=!1}}}else{const n=r[t],o=r[s],l=i*n+m*o,a=l<0?-l:l;if(l>0&&a>_)return!1;e&&(k=!0,M=_-l,W=n,P=o,(y&&l>=0||M<h)&&(y=!1))}k&&(null===f||f>M)&&(f=M,p=W,x=P)}return e&&(e.a_in_b=i?y:d,e.b_in_a=i?d:y,e.overlap=f,e.overlap_x=i?-p:p,e.overlap_y=i?-x:x),!0}function _(t,s,e,i,n=null){const o=t.length,r=s.length;if(!o||!r)return!0;let l=null,a=null,_=null,h=null;for(let s=0,n=1;s<o;s+=2,n+=2){const o=t[s]*e+t[n]*i;(null===l||l>o)&&(l=o),(null===a||a<o)&&(a=o)}for(let t=0,n=1;t<r;t+=2,n+=2){const o=s[t]*e+s[n]*i;(null===_||_>o)&&(_=o),(null===h||h<o)&&(h=o)}if(l>h||a<_)return!0;if(n){let t=0;if(l<_)if(n.a_in_b=!1,a<h)t=a-_,n.b_in_a=!1;else{const s=a-_,e=h-l;t=s<e?s:-e}else if(n.b_in_a=!1,a>h)t=l-h,n.a_in_b=!1;else{const s=a-_,e=h-l;t=s<e?s:-e}const s=n.overlap,o=t<0?-t:t;if(null===s||s>o){const s=t<0?-1:1;n.overlap=o,n.overlap_x=e*s,n.overlap_y=i*s}}return!1}class h{constructor(t=0,s=0,e=0){this.x=t,this.y=s,this.padding=e,this._circle=!1,this._polygon=!1,this._point=!1,this._bvh=null,this._bvh_parent=null,this._bvh_branch=!1,this._bvh_padding=e,this._bvh_min_x=0,this._bvh_min_y=0,this._bvh_max_x=0,this._bvh_max_y=0}collides(t,s=null,e=!0){return l(this,t,s,e)}potentials(){const t=this._bvh;if(null===t)throw new Error("Body does not belong to a collision system");return t.potentials(this)}remove(){const t=this._bvh;t&&t.remove(this,!1)}createResult(){return new r}static createResult(){return new r}}class c extends h{constructor(t=0,s=0,e=[],i=0,n=1,o=1,r=0){super(t,s,r),this.angle=i,this.scale_x=n,this.scale_y=o,this._polygon=!0,this._x=t,this._y=s,this._angle=i,this._scale_x=n,this._scale_y=o,this._min_x=0,this._min_y=0,this._max_x=0,this._max_y=0,this._points=null,this._coords=null,this._edges=null,this._normals=null,this._dirty_coords=!0,this._dirty_normals=!0,c.prototype.setPoints.call(this,e)}draw(t){(this._dirty_coords||this.x!==this._x||this.y!==this._y||this.angle!==this._angle||this.scale_x!==this._scale_x||this.scale_y!==this._scale_y)&&this._calculateCoords();const s=this._coords;if(2===s.length)t.moveTo(s[0],s[1]),t.arc(s[0],s[1],1,0,2*Math.PI);else{t.moveTo(s[0],s[1]);for(let e=2;e<s.length;e+=2)t.lineTo(s[e],s[e+1]);s.length>4&&t.lineTo(s[0],s[1])}}setPoints(t){const s=t.length;this._points=new Float64Array(2*s),this._coords=new Float64Array(2*s),this._edges=new Float64Array(2*s),this._normals=new Float64Array(2*s);const e=this._points;for(let i=0,n=0,o=1;i<s;++i,n+=2,o+=2){const s=t[i];e[n]=s[0],e[o]=s[1]}this._dirty_coords=!0}_calculateCoords(){const t=this.x,s=this.y,e=this.angle,i=this.scale_x,n=this.scale_y,o=this._points,r=this._coords,l=o.length;let a,_,h,c;for(let u=0,d=1;u<l;u+=2,d+=2){let l=o[u]*i,y=o[d]*n;if(e){const t=Math.cos(e),s=Math.sin(e),i=l;l=i*t-y*s,y=i*s+y*t}l+=t,y+=s,r[u]=l,r[d]=y,0===u?(a=_=l,h=c=y):(l<a?a=l:l>_&&(_=l),y<h?h=y:y>c&&(c=y))}this._x=t,this._y=s,this._angle=e,this._scale_x=i,this._scale_y=n,this._min_x=a,this._min_y=h,this._max_x=_,this._max_y=c,this._dirty_coords=!1,this._dirty_normals=!0}_calculateNormals(){const t=this._coords,s=this._edges,e=this._normals,i=t.length;for(let n=0,o=1;n<i;n+=2,o+=2){const r=n+2<i?n+2:0,l=t[r]-t[n],a=t[r+1]-t[o],_=l||a?Math.sqrt(l*l+a*a):0;s[n]=l,s[o]=a,e[n]=_?a/_:0,e[o]=_?-l/_:0}this._dirty_normals=!1}}class u extends c{constructor(t=0,s=0,e=0){super(t,s,[[0,0]],0,1,1,e),this._point=!0}}u.prototype.setPoints=void 0;var d=class{constructor(t,s){this.p5=t,this.settings=Object.assign({},o,s),this.paused=!1,this.cluster=[],this.walkers=[]}iterate(){if(!this.paused&&this.walkers.length>0)for(let t of this.walkers)t.iterate()}draw(){if(this.p5.background(255),this.walkers.length>0&&this.settings.ShowWalkers)for(let t of this.walkers)t.draw()}addWalker(t){this.walkers.push(t)}};let y;new p5(function(t){t.setup=function(){t.createCanvas(window.innerWidth,window.innerHeight),t.colorMode(t.HSB,255),t.ellipseMode(t.CENTER),(y=new d(t,i)).cluster=[new n(t,window.innerWidth/2,window.innerHeight/2,10)]},t.draw=function(){if(y.iterate(),y.draw(),y.walkers.length<5e3){let s=Math.round(t.random(1,4)),e=new n(t,0,0,10);switch(s){case 1:e.x=t.random(window.innerWidth),e.y=0;break;case 2:e.x=window.innerWidth,e.y=t.random(window.innerHeight);break;case 3:e.x=t.random(window.innerWidth),e.y=window.innerHeight;break;case 4:e.x=0,e.y=t.random(window.innerHeight)}y.addWalker(e)}},t.keyReleased=function(){t.key}})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,