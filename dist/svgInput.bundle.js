!function(t){var e={};function s(i){if(e[i])return e[i].exports;var r=e[i]={i:i,l:!1,exports:{}};return t[i].call(r.exports,r,r.exports,s),r.l=!0,r.exports}s.m=t,s.c=e,s.d=function(t,e,i){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},s.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(s.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)s.d(i,r,function(e){return t[e]}.bind(null,r));return i},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="",s(s.s=8)}([function(t,e,s){"use strict";var i={DefaultCircleDiameter:2,DefaultInitialClusterType:"Random",ShowClusters:!0,ShowWalkers:!0,ShowShapes:!0,MaxWalkers:2e4,WalkerSource:"Random",ReplenishWalkers:!1,Stickiness:.9,BiasTowards:"Center",BiasForce:1,UseFrame:!0,FrameSize:900,CaptureLines:!0,RenderMode:"Shapes",UseColors:!1,UseStroke:!1,BackgroundColor:{h:200,s:30,b:48},WalkerColor:{h:200,s:30,b:44},ClusterColor:{h:30,s:70,b:80},ShapeColor:{h:100,s:50,b:80},LineColor:{h:100,s:50,b:100},FrameColor:{h:0,s:100,b:100}};const r=[];class n{constructor(){this._bvh_parent=null,this._bvh_branch=!0,this._bvh_left=null,this._bvh_right=null,this._bvh_sort=0,this._bvh_min_x=0,this._bvh_min_y=0,this._bvh_max_x=0,this._bvh_max_y=0}static getBranch(){return r.length?r.pop():new n}static releaseBranch(t){r.push(t)}static sortBranches(t,e){return t.sort>e.sort?-1:1}}class o{constructor(){this._hierarchy=null,this._bodies=[],this._dirty_branches=[]}insert(t,e=!1){if(!e){const e=t._bvh;if(e&&e!==this)throw new Error("Body belongs to another collision system");t._bvh=this,this._bodies.push(t)}const s=t._polygon,i=t.x,r=t.y;s&&(t._dirty_coords||t.x!==t._x||t.y!==t._y||t.angle!==t._angle||t.scale_x!==t._scale_x||t.scale_y!==t._scale_y)&&t._calculateCoords();const o=t._bvh_padding,a=s?0:t.radius*t.scale,h=(s?t._min_x:i-a)-o,l=(s?t._min_y:r-a)-o,c=(s?t._max_x:i+a)+o,_=(s?t._max_y:r+a)+o;t._bvh_min_x=h,t._bvh_min_y=l,t._bvh_max_x=c,t._bvh_max_y=_;let u=this._hierarchy,p=0;if(u)for(;;){if(!u._bvh_branch){const e=u._bvh_parent,s=u._bvh_min_x,i=u._bvh_min_y,r=u._bvh_max_x,o=u._bvh_max_y,a=u._bvh_parent=t._bvh_parent=n.getBranch();a._bvh_parent=e,a._bvh_left=u,a._bvh_right=t,a._bvh_sort=p++,a._bvh_min_x=h<s?h:s,a._bvh_min_y=l<i?l:i,a._bvh_max_x=c>r?c:r,a._bvh_max_y=_>o?_:o,e?e._bvh_left===u?e._bvh_left=a:e._bvh_right=a:this._hierarchy=a;break}{const t=u._bvh_left,e=t._bvh_min_y,s=t._bvh_max_x,i=t._bvh_max_y,r=h<t._bvh_min_x?h:t._bvh_min_x,n=l<e?l:e,o=c>s?c:s,a=_>i?_:i,d=(o-r)*(a-n)-(s-t._bvh_min_x)*(i-e),m=u._bvh_right,y=m._bvh_min_x,f=m._bvh_min_y,g=m._bvh_max_x,v=m._bvh_max_y,x=h<y?h:y,b=l<f?l:f,O=c>g?c:g,w=_>v?_:v,T=(O-x)*(w-b)-(g-y)*(v-f);u._bvh_sort=p++,u._bvh_min_x=r<x?r:x,u._bvh_min_y=n<b?n:b,u._bvh_max_x=o>O?o:O,u._bvh_max_y=a>w?a:w,u=d<=T?t:m}}else this._hierarchy=t}remove(t,e=!1){if(!e){const e=t._bvh;if(e&&e!==this)throw new Error("Body belongs to another collision system");t._bvh=null,this._bodies.splice(this._bodies.indexOf(t),1)}if(this._hierarchy===t)return void(this._hierarchy=null);const s=t._bvh_parent,i=s._bvh_parent,r=s._bvh_left,o=r===t?s._bvh_right:r;if(o._bvh_parent=i,o._bvh_branch&&(o._bvh_sort=s._bvh_sort),i){i._bvh_left===s?i._bvh_left=o:i._bvh_right=o;let t=i;for(;t;){const e=t._bvh_left,s=e._bvh_min_x,i=e._bvh_min_y,r=e._bvh_max_x,n=e._bvh_max_y,o=t._bvh_right,a=o._bvh_min_x,h=o._bvh_min_y,l=o._bvh_max_x,c=o._bvh_max_y;t._bvh_min_x=s<a?s:a,t._bvh_min_y=i<h?i:h,t._bvh_max_x=r>l?r:l,t._bvh_max_y=n>c?n:c,t=t._bvh_parent}}else this._hierarchy=o;n.releaseBranch(s)}update(){const t=this._bodies,e=t.length;for(let s=0;s<e;++s){const e=t[s];let i=!1;if(i||e.padding===e._bvh_padding||(e._bvh_padding=e.padding,i=!0),!i){const t=e._polygon;t&&(e._dirty_coords||e.x!==e._x||e.y!==e._y||e.angle!==e._angle||e.scale_x!==e._scale_x||e.scale_y!==e._scale_y)&&e._calculateCoords();const s=e.x,r=e.y,n=t?0:e.radius*e.scale,o=t?e._min_x:s-n,a=t?e._min_y:r-n,h=t?e._max_x:s+n,l=t?e._max_y:r+n;i=o<e._bvh_min_x||a<e._bvh_min_y||h>e._bvh_max_x||l>e._bvh_max_y}i&&(this.remove(e,!0),this.insert(e,!0))}}potentials(t){const e=[],s=t._bvh_min_x,i=t._bvh_min_y,r=t._bvh_max_x,n=t._bvh_max_y;let o=this._hierarchy,a=!0;if(!o||!o._bvh_branch)return e;for(;o;){if(a){a=!1;let t=o._bvh_branch?o._bvh_left:null;for(;t&&t._bvh_max_x>=s&&t._bvh_max_y>=i&&t._bvh_min_x<=r&&t._bvh_min_y<=n;)t=(o=t)._bvh_branch?o._bvh_left:null}const h=o._bvh_branch,l=h?o._bvh_right:null;if(l&&l._bvh_max_x>s&&l._bvh_max_y>i&&l._bvh_min_x<r&&l._bvh_min_y<n)o=l,a=!0;else{h||o===t||e.push(o);let s=o._bvh_parent;if(!s)break;for(;s&&s._bvh_right===o;)s=(o=s)._bvh_parent;o=s}}return e}draw(t){const e=this._bodies,s=e.length;for(let i=0;i<s;++i)e[i].draw(t)}drawBVH(t){let e=this._hierarchy,s=!0;for(;e;){if(s){s=!1;let t=e._bvh_branch?e._bvh_left:null;for(;t;)t=(e=t)._bvh_branch?e._bvh_left:null}const i=e._bvh_branch,r=e._bvh_min_x,n=e._bvh_min_y,o=e._bvh_max_x,a=e._bvh_max_y,h=i?e._bvh_right:null;if(t.moveTo(r,n),t.lineTo(o,n),t.lineTo(o,a),t.lineTo(r,a),t.lineTo(r,n),h)e=h,s=!0;else{let t=e._bvh_parent;if(!t)break;for(;t&&t._bvh_right===e;)t=(e=t)._bvh_parent;e=t}}}}class a{constructor(){this.collision=!1,this.a=null,this.b=null,this.a_in_b=!1,this.a_in_b=!1,this.overlap=0,this.overlap_x=0,this.overlap_y=0}}function h(t,e,s=null,i=!0){const r=t._polygon,n=e._polygon;let o=!1;return s&&(s.a=t,s.b=e,s.a_in_b=!0,s.b_in_a=!0,s.overlap=null,s.overlap_x=0,s.overlap_y=0),r&&(t._dirty_coords||t.x!==t._x||t.y!==t._y||t.angle!==t._angle||t.scale_x!==t._scale_x||t.scale_y!==t._scale_y)&&t._calculateCoords(),n&&(e._dirty_coords||e.x!==e._x||e.y!==e._y||e.angle!==e._angle||e.scale_x!==e._scale_x||e.scale_y!==e._scale_y)&&e._calculateCoords(),i&&!function(t,e){const s=t._polygon,i=s?0:t.x,r=s?0:t.y,n=s?0:t.radius*t.scale,o=s?t._min_x:i-n,a=s?t._min_y:r-n,h=s?t._max_x:i+n,l=s?t._max_y:r+n,c=e._polygon,_=c?0:e.x,u=c?0:e.y,p=c?0:e.radius*e.scale,d=c?e._min_x:_-p,m=c?e._min_y:u-p,y=c?e._max_x:_+p,f=c?e._max_y:u+p;return o<y&&a<f&&h>d&&l>m}(t,e)||(r&&t._dirty_normals&&t._calculateNormals(),n&&e._dirty_normals&&e._calculateNormals(),o=r&&n?function(t,e,s=null){const i=t._coords.length,r=e._coords.length;if(2===i&&2===r){const i=t._coords,r=e._coords;return s&&(s.overlap=0),i[0]===r[0]&&i[1]===r[1]}const n=t._coords,o=e._coords,a=t._normals,h=e._normals;if(i>2)for(let t=0,e=1;t<i;t+=2,e+=2)if(c(n,o,a[t],a[e],s))return!1;if(r>2)for(let t=0,e=1;t<r;t+=2,e+=2)if(c(n,o,h[t],h[e],s))return!1;return!0}(t,e,s):r?l(t,e,s,!1):n?l(e,t,s,!0):function(t,e,s=null){const i=t.radius*t.scale,r=e.radius*e.scale,n=e.x-t.x,o=e.y-t.y,a=i+r,h=n*n+o*o;if(h>a*a)return!1;if(s){const t=Math.sqrt(h);s.a_in_b=i<=r&&t<=r-i,s.b_in_a=r<=i&&t<=i-r,s.overlap=a-t,s.overlap_x=n/t,s.overlap_y=o/t}return!0}(t,e,s)),s&&(s.collision=o),o}function l(t,e,s=null,i=!1){const r=t._coords,n=t._edges,o=t._normals,a=e.x,h=e.y,l=e.radius*e.scale,c=2*l,_=l*l,u=r.length;let p=!0,d=!0,m=null,y=0,f=0;if(2===u){const t=a-r[0],e=h-r[1],i=t*t+e*e;if(i>_)return!1;if(s){const s=Math.sqrt(i);m=l-s,y=t/s,f=e/s,d=!1}}else for(let t=0,e=1;t<u;t+=2,e+=2){const i=a-r[t],g=h-r[e],v=n[t],x=n[e],b=i*v+g*x,O=b<0?-1:b>v*v+x*x?1:0;let w=!1,T=0,C=0,M=0;if(s&&p&&i*i+g*g>_&&(p=!1),O){const e=-1===O,o=e?0===t?u-2:t-2:t===u-2?0:t+2,c=o+1,p=a-r[o],m=h-r[c],y=n[o],f=n[c],v=p*y+m*f;if((v<0?-1:v>y*y+f*f?1:0)===-O){const t=e?i:p,r=e?g:m,n=t*t+r*r;if(n>_)return!1;if(s){const e=Math.sqrt(n);w=!0,T=l-e,C=t/e,M=r/e,d=!1}}}else{const r=o[t],n=o[e],a=i*r+g*n,h=a<0?-a:a;if(a>0&&h>l)return!1;s&&(w=!0,T=l-a,C=r,M=n,(d&&a>=0||T<c)&&(d=!1))}w&&(null===m||m>T)&&(m=T,y=C,f=M)}return s&&(s.a_in_b=i?d:p,s.b_in_a=i?p:d,s.overlap=m,s.overlap_x=i?-y:y,s.overlap_y=i?-f:f),!0}function c(t,e,s,i,r=null){const n=t.length,o=e.length;if(!n||!o)return!0;let a=null,h=null,l=null,c=null;for(let e=0,r=1;e<n;e+=2,r+=2){const n=t[e]*s+t[r]*i;(null===a||a>n)&&(a=n),(null===h||h<n)&&(h=n)}for(let t=0,r=1;t<o;t+=2,r+=2){const n=e[t]*s+e[r]*i;(null===l||l>n)&&(l=n),(null===c||c<n)&&(c=n)}if(a>c||h<l)return!0;if(r){let t=0;if(a<l)if(r.a_in_b=!1,h<c)t=h-l,r.b_in_a=!1;else{const e=h-l,s=c-a;t=e<s?e:-s}else if(r.b_in_a=!1,h>c)t=a-c,r.a_in_b=!1;else{const e=h-l,s=c-a;t=e<s?e:-s}const e=r.overlap,n=t<0?-t:t;if(null===e||e>n){const e=t<0?-1:1;r.overlap=n,r.overlap_x=s*e,r.overlap_y=i*e}}return!1}class _{constructor(t=0,e=0,s=0){this.x=t,this.y=e,this.padding=s,this._circle=!1,this._polygon=!1,this._point=!1,this._bvh=null,this._bvh_parent=null,this._bvh_branch=!1,this._bvh_padding=s,this._bvh_min_x=0,this._bvh_min_y=0,this._bvh_max_x=0,this._bvh_max_y=0}collides(t,e=null,s=!0){return h(this,t,e,s)}potentials(){const t=this._bvh;if(null===t)throw new Error("Body does not belong to a collision system");return t.potentials(this)}remove(){const t=this._bvh;t&&t.remove(this,!1)}createResult(){return new a}static createResult(){return new a}}class u extends _{constructor(t=0,e=0,s=0,i=1,r=0){super(t,e,r),this.radius=s,this.scale=i}draw(t){const e=this.x,s=this.y,i=this.radius*this.scale;t.moveTo(e+i,s),t.arc(e,s,i,0,2*Math.PI)}}class p extends _{constructor(t=0,e=0,s=[],i=0,r=1,n=1,o=0){super(t,e,o),this.angle=i,this.scale_x=r,this.scale_y=n,this._polygon=!0,this._x=t,this._y=e,this._angle=i,this._scale_x=r,this._scale_y=n,this._min_x=0,this._min_y=0,this._max_x=0,this._max_y=0,this._points=null,this._coords=null,this._edges=null,this._normals=null,this._dirty_coords=!0,this._dirty_normals=!0,p.prototype.setPoints.call(this,s)}draw(t){(this._dirty_coords||this.x!==this._x||this.y!==this._y||this.angle!==this._angle||this.scale_x!==this._scale_x||this.scale_y!==this._scale_y)&&this._calculateCoords();const e=this._coords;if(2===e.length)t.moveTo(e[0],e[1]),t.arc(e[0],e[1],1,0,2*Math.PI);else{t.moveTo(e[0],e[1]);for(let s=2;s<e.length;s+=2)t.lineTo(e[s],e[s+1]);e.length>4&&t.lineTo(e[0],e[1])}}setPoints(t){const e=t.length;this._points=new Float64Array(2*e),this._coords=new Float64Array(2*e),this._edges=new Float64Array(2*e),this._normals=new Float64Array(2*e);const s=this._points;for(let i=0,r=0,n=1;i<e;++i,r+=2,n+=2){const e=t[i];s[r]=e[0],s[n]=e[1]}this._dirty_coords=!0}_calculateCoords(){const t=this.x,e=this.y,s=this.angle,i=this.scale_x,r=this.scale_y,n=this._points,o=this._coords,a=n.length;let h,l,c,_;for(let u=0,p=1;u<a;u+=2,p+=2){let a=n[u]*i,d=n[p]*r;if(s){const t=Math.cos(s),e=Math.sin(s),i=a;a=i*t-d*e,d=i*e+d*t}a+=t,d+=e,o[u]=a,o[p]=d,0===u?(h=l=a,c=_=d):(a<h?h=a:a>l&&(l=a),d<c?c=d:d>_&&(_=d))}this._x=t,this._y=e,this._angle=s,this._scale_x=i,this._scale_y=r,this._min_x=h,this._min_y=c,this._max_x=l,this._max_y=_,this._dirty_coords=!1,this._dirty_normals=!0}_calculateNormals(){const t=this._coords,e=this._edges,s=this._normals,i=t.length;for(let r=0,n=1;r<i;r+=2,n+=2){const o=r+2<i?r+2:0,a=t[o]-t[r],h=t[o+1]-t[n],l=a||h?Math.sqrt(a*a+h*h):0;e[r]=a,e[n]=h,s[r]=l?h/l:0,s[n]=l?-a/l:0}this._dirty_normals=!1}}class d extends p{constructor(t=0,e=0,s=0){super(t,e,[[0,0]],0,1,1,s),this._point=!0}}d.prototype.setPoints=void 0;class m{constructor(){this._bvh=new o}createCircle(t=0,e=0,s=0,i=1,r=0){const n=new u(t,e,s,i,r);return this._bvh.insert(n),n}createPolygon(t=0,e=0,s=[[0,0]],i=0,r=1,n=1,o=0){const a=new p(t,e,s,i,r,n,o);return this._bvh.insert(a),a}createPoint(t=0,e=0,s=0){const i=new d(t,e,s);return this._bvh.insert(i),i}createResult(){return new a}static createResult(){return new a}insert(...t){for(const e of t)this._bvh.insert(e,!1);return this}remove(...t){for(const e of t)this._bvh.remove(e,!1);return this}update(){return this._bvh.update(),this}draw(t){return this._bvh.draw(t)}drawBVH(t){return this._bvh.drawBVH(t)}potentials(t){return this._bvh.potentials(t)}collides(t,e,s=null,i=!0){return h(t,e,s,i)}}s.d(e,"a",function(){return y});class y{constructor(t,e){this.p5=t,this.settings=Object.assign({},i,e),this.paused=!1,this.showWalkers=this.settings.ShowWalkers,this.showClusters=this.settings.ShowClusters,this.showShapes=this.settings.ShowShapes,this.useFrame=this.settings.UseFrame,this.renderMode=this.settings.RenderMode,this.numWalkers=0,this.edgeMargin=this.settings.hasOwnProperty("EdgeMargin")?this.settings.EdgeMargin:0,this.edges={},this.frame={},"number"==typeof this.settings.FrameSize?(this.frame.left=window.innerWidth/2-this.settings.FrameSize/2,this.frame.right=window.innerWidth/2+this.settings.FrameSize/2,this.frame.top=window.innerHeight/2-this.settings.FrameSize/2,this.frame.bottom=window.innerHeight/2+this.settings.FrameSize/2):"object"==typeof this.settings.FrameSize&&(this.frame.left=window.innerWidth/2-this.settings.FrameSize[0]/2,this.frame.right=window.innerWidth/2+this.settings.FrameSize[0]/2,this.frame.top=window.innerHeight/2-this.settings.FrameSize[1]/2,this.frame.bottom=window.innerHeight/2+this.settings.FrameSize[1]/2),this.resetEdges(),this.maxDistance=this.p5.dist(this.edges.left,this.edges.top,window.innerWidth/2,window.innerHeight/2),this.system=new m,this.bodies=[],this.shapes=[],this.lines=[]}iterate(){this.paused||(this.settings.ReplenishWalkers&&this.numWalkers<this.settings.MaxWalkers&&this.createDefaultWalkers(this.settings.MaxWalkers-this.numWalkers,this.settings.ReplenishmentSource),this.moveWalkers(),this.system.update(),this.handleCollisions())}draw(){if(this.settings.UseColors?this.p5.background(this.getColorStringFromObject(this.settings.BackgroundColor)):this.p5.background(255),this.showShapes)for(let t of this.shapes){this.settings.UseColors?(this.p5.fill(this.getColorStringFromObject(this.settings.ShapeColor)),this.p5.stroke(this.getColorStringFromObject(this.settings.ShapeColor))):(this.p5.noFill(),this.p5.stroke(100)),this.p5.beginShape();for(let e=0;e<t._coords.length;e+=2)this.p5.vertex(t._coords[e],t._coords[e+1]);this.p5.endShape()}if("Lines"==this.renderMode){if(this.settings.UseColors?this.p5.stroke(this.getColorStringFromObject(this.settings.LineColor)):this.p5.stroke(75),this.lines.length>0)for(let t of this.lines)this.p5.line(t.p1.x,t.p1.y,t.p2.x,t.p2.y)}else for(let t of this.bodies)if(t._point)this.p5.noFill(),t.stuck&&this.showClusters?(this.p5.noStroke(),this.settings.UseColors?this.p5.fill(this.getColorStringFromObject(this.settings.ClusterColor)):this.p5.fill(200),this.p5.ellipse(t.x,t.y,5)):!t.stuck&&this.showWalkers?this.settings.UseColors?this.p5.stroke(this.getColorStringFromObject(this.settings.WalkerColor)):this.p5.stroke(0):this.p5.noStroke(),this.p5.point(t.x,t.y);else if(t._circle)this.settings.UseStroke?this.settings.UseColors?this.p5.stroke(this.getColorStringFromObject(this.settings.BackgroundColor)):this.p5.stroke(255):this.p5.noStroke(),t.stuck&&this.showClusters?this.settings.UseColors?this.p5.fill(this.getColorStringFromObject(this.settings.ClusterColor)):this.p5.fill(120):!t.stuck&&this.showWalkers?this.settings.UseColors?this.p5.fill(this.getColorStringFromObject(this.settings.WalkerColor)):this.p5.fill(230):this.p5.noFill(),this.p5.ellipse(t.x,t.y,2*t.radius);else if(t._polygon){this.settings.UseStroke?this.settings.UseColors?this.p5.stroke(this.getColorStringFromObject(this.settings.BackgroundColor)):this.p5.stroke(255):this.p5.noStroke(),t.stuck&&this.showClusters?this.settings.UseColors?this.p5.fill(this.getColorStringFromObject(this.settings.ClusterColor)):this.p5.fill(120):!t.stuck&&this.showWalkers?this.settings.UseColors?this.p5.fill(this.getColorStringFromObject(this.settings.WalkerColor)):this.p5.fill(230):this.p5.noFill(),this.p5.beginShape();for(let e=0;e<t._coords.length-1;e+=2)this.p5.vertex(t._coords[e],t._coords[e+1]);this.p5.endShape()}this.useFrame&&this.drawFrame()}drawFrame(){this.p5.noFill(),this.settings.UseColors?this.p5.stroke(this.getColorStringFromObject(this.settings.FrameColor)):this.p5.stroke(0),"number"==typeof this.settings.FrameSize?this.p5.rect(window.innerWidth/2-this.settings.FrameSize/2-1,window.innerHeight/2-this.settings.FrameSize/2-1,this.settings.FrameSize+2,this.settings.FrameSize+2):"object"==typeof this.settings.FrameSize&&this.p5.rect(window.innerWidth/2-this.settings.FrameSize[0]/2-1,window.innerHeight/2-this.settings.FrameSize[1]/2-1,this.settings.FrameSize[0]+2,this.settings.FrameSize[1]+2)}resetEdges(){this.edges.left=this.useFrame?this.frame.left:0,this.edges.right=this.useFrame?this.frame.right:window.innerWidth,this.edges.top=this.useFrame?this.frame.top:0,this.edges.bottom=this.useFrame?this.frame.bottom:window.innerHeight}moveWalkers(){if(this.bodies.length>0)for(let t of this.bodies)if(!t.stuck){let e,s=this.p5.random(-1,1),i=this.p5.random(-1,1);switch(this.settings.BiasTowards){case"Top":i-=this.settings.BiasForce;break;case"Bottom":i+=this.settings.BiasForce;break;case"Left":s-=this.settings.BiasForce;break;case"Right":s+=this.settings.BiasForce;break;case"Center":s+=(e=this.getDeltasTowards(t.x,t.y,window.innerWidth/2,window.innerHeight/2)).x,i+=e.y;break;case"Edges":s-=(e=this.getDeltasTowards(t.x,t.y,window.innerWidth/2,window.innerHeight/2)).x,i-=e.y;break;case"Equator":t.y<window.innerHeight/2?i+=this.settings.BiasForce:i-=this.settings.BiasForce;break;case"Meridian":t.x<window.innerWidth/2?s+=this.settings.BiasForce:s-=this.settings.BiasForce}t._point&&(s=Math.round(s),i=Math.round(i)),t.x+s>this.edges.left&&t.x+s<this.edges.right&&(t.x+=s),t.y+i>this.edges.top&&t.y+i<this.edges.bottom&&(t.y+=i),t.age++}}getDeltasTowards(t,e,s,i){let r=Math.atan2(i-e,s-t);return{x:Math.cos(r)*this.settings.BiasForce,y:Math.sin(r)*this.settings.BiasForce}}handleCollisions(){for(let t of this.shapes){const e=t.potentials();for(let s of e)t.collides(s)&&(s.stuck=!0,this.numWalkers--)}for(let t of this.bodies){if(t.stuck)continue;const e=t.potentials();for(let s of e)t._point?s.stuck&&(t.stuck=!0,this.numWalkers--):s.stuck&&t.collides(s)&&(t.stuck=!0,this.numWalkers--,this.settings.CaptureLines&&this.lines.push({p1:{x:t.x,y:t.y},p2:{x:s.x,y:s.y}}))}}createParticle(t){if(void 0===t||"object"!=typeof t)return;let e;if(t.hasOwnProperty("type"))switch(t.type){case"Point":(e=this.system.createPoint(Math.round(t.x),Math.round(t.y)))._point=!0;break;case"Circle":default:(e=this.system.createCircle(t.x,t.y,t.diameter/2))._circle=!0;break;case"Polygon":(e=this.system.createPolygon(t.x,t.y,t.polygon,t.hasOwnProperty("rotation")?this.p5.radians(t.rotation):0))._polygon=!0}else{const s=this.settings.hasOwnProperty("CircleDiameter")?this.settings.CircleDiameter:this.settings.DefaultCircleDiameter,i=t.hasOwnProperty("diameter")?t.diameter:s;(e=this.system.createCircle(t.x,t.y,i/2))._circle=!0}e.stuck=!!t.hasOwnProperty("stuck")&&t.stuck,e.age=0,this.bodies.push(e)}createWalker(t){this.createParticle(t),this.numWalkers++}createDefaultWalkers(t=this.settings.MaxWalkers,e=this.settings.WalkerSource){for(let s=0;s<t;s++){let t={};switch(e){case"Edges":switch(Math.round(this.p5.random(1,4))){case 1:t.x=this.p5.random(this.edges.left+this.edgeMargin,this.edges.right-this.edgeMargin),t.y=this.p5.random(this.edges.top,this.edges.top+this.edgeMargin);break;case 3:t.x=this.p5.random(this.edges.left+this.edgeMargin,this.edges.right-this.edgeMargin),t.y=this.p5.random(this.edges.bottom-this.edgeMargin,this.edges.bottom);break;case 4:t.x=this.p5.random(this.edges.left,this.edges.left+this.edgeMargin),t.y=this.p5.random(this.edges.top,this.edges.bottom);break;case 2:t.x=this.p5.random(this.edges.right-this.edgeMargin,this.edges.right),t.y=this.p5.random(this.edges.top,this.edges.bottom)}break;case"Circle":let s=50,i=this.p5.random(360);t.x=window.innerWidth/2+s*Math.cos(i*Math.PI/180),t.y=window.innerHeight/2+s*Math.sin(i*Math.PI/180);break;case"Random":t.x=this.p5.random(this.edges.left,this.edges.right),t.y=this.p5.random(this.edges.top,this.edges.bottom);break;case"Random-Circle":let r=this.p5.random(360),n=this.p5.random(5,430);t.x=window.innerWidth/2+n*Math.cos(r*Math.PI/180),t.y=window.innerHeight/2+n*Math.sin(r*Math.PI/180);break;case"Center":t.x=window.innerWidth/2,t.y=window.innerHeight/2}if(this.settings.VaryDiameterByDistance){let e=this.p5.dist(t.x,t.y,window.innerWidth/2,window.innerHeight/2);t.diameter=this.p5.map(e,0,this.maxDistance,this.settings.CircleDiameterRange[0],this.settings.CircleDiameterRange[1])}this.createWalker(t)}}createDefaultClusters(t=this.settings.DefaultInitialClusterType){let e=[];switch(t){case"Point":e.push({x:window.innerWidth/2,y:window.innerHeight/2,diameter:this.settings.DefaultCircleDiameter});break;case"Ring":let s=100,i=20;for(let t=0;t<i;t++)e.push({x:window.innerWidth/2+s*Math.cos(360/i*t*Math.PI/180),y:window.innerHeight/2+s*Math.sin(360/i*t*Math.PI/180),diameter:this.settings.DefaultCircleDiameter});break;case"Random":for(let t=0;t<40;t++)e.push({x:this.p5.random(this.edges.left,this.edges.right),y:this.p5.random(this.edges.top,this.edges.bottom),diameter:this.settings.DefaultCircleDiameter});break;case"Wall":switch(this.settings.BiasTowards){case"Top":e=this.createHorizontalClusterWall(this.edges.top);break;case"Bottom":e=this.createHorizontalClusterWall(this.edges.bottom);break;case"Left":e=this.createVerticalClusterWall(this.edges.left);break;case"Right":e=this.createVerticalClusterWall(this.edges.right);break;case"Edges":e=(e=(e=(e=e.concat(this.createHorizontalClusterWall(this.edges.top))).concat(this.createHorizontalClusterWall(this.edges.bottom))).concat(this.createVerticalClusterWall(this.edges.left))).concat(this.createVerticalClusterWall(this.edges.right));break;case"Equator":e=e.concat(this.createHorizontalClusterWall(window.innerHeight/2));break;case"Meridian":e=e.concat(this.createVerticalClusterWall(window.innerWidth/2))}}this.createClusterFromParams(e)}createHorizontalClusterWall(t){let e=[],s=this.useFrame?900:window.innerWidth;for(let i=0;i<=s/this.settings.CircleDiameter;i++)e.push({x:this.edges.left+i*this.settings.CircleDiameter,y:t,diameter:this.settings.CircleDiameter});return e}createVerticalClusterWall(t){let e=[],s=this.useFrame?900:window.innerHeight;for(let i=0;i<=s/this.settings.CircleDiameter;i++)e.push({x:t,y:this.edges.top+i*this.settings.CircleDiameter,diameter:this.settings.CircleDiameter});return e}createClusterFromParams(t){if(t.length>0)for(let e of t)e.stuck=!0,this.createParticle(e)}createShapesFromPaths(t){if(t.hasOwnProperty("points")||0!=t.length)for(let e of t)if(e.solid){let t=this.system.createPolygon(e.x,e.y,e.points);t.solid=e.solid,t.closed=e.closed,this.shapes.push(t)}else for(let t=1;t<e.points.length;t++){let s=this.system.createPolygon(e.x,e.y,[[e.points[t-1][0],e.points[t-1][1]],[e.points[t][0],e.points[t][1]]]);s.solid=!1,s.closed=!1,this.shapes.push(s)}else console.error("Unable to create shapes. Paths must have an array of points [[x,y],...]")}removeAll(){for(let t of this.bodies)this.system.remove(t);for(let t of this.shapes)this.system.remove(t);this.bodies=[],this.shapes=[],this.lines=[],this.numWalkers=0}togglePause(){this.paused=!this.paused}toggleShowWalkers(){this.showWalkers=!this.showWalkers}toggleShowClusters(){this.showClusters=!this.showClusters}toggleShowShapes(){this.showShapes=!this.showShapes}toggleUseFrame(){this.useFrame=!this.useFrame,this.resetEdges()}toggleLineRenderingMode(){"Lines"!=this.renderMode?this.settings.CaptureLines?this.renderMode="Lines":console.error("Line rendering mode only allowed when CaptureLines is set."):this.renderMode="Shapes"}pause(){this.paused=!0}unpause(){this.paused=!1}getColorStringFromObject(t){return"hsl("+t.h+", "+t.s+"%, "+t.b+"%)"}}},function(t,e,s){"use strict";var i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var s in e)e.hasOwnProperty(s)&&(t[s]=e[s])};function r(t,e){function s(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(s.prototype=e.prototype,new s)}function n(t,e){var s=t[0],i=t[1];return[s*Math.cos(e)-i*Math.sin(e),s*Math.sin(e)+i*Math.cos(e)]}function o(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];for(var s=0;s<t.length;s++)if("number"!=typeof t[s])throw new Error("assertNumbers arguments["+s+"] is not a number. "+typeof t[s]+" == typeof "+t[s]);return!0}var a=Math.PI;function h(t,e,s){t.lArcFlag=0===t.lArcFlag?0:1,t.sweepFlag=0===t.sweepFlag?0:1;var i=t.rX,r=t.rY,o=t.x,h=t.y;i=Math.abs(t.rX),r=Math.abs(t.rY);var l=n([(e-o)/2,(s-h)/2],-t.xRot/180*a),c=l[0],_=l[1],u=Math.pow(c,2)/Math.pow(i,2)+Math.pow(_,2)/Math.pow(r,2);1<u&&(i*=Math.sqrt(u),r*=Math.sqrt(u)),t.rX=i,t.rY=r;var p=Math.pow(i,2)*Math.pow(_,2)+Math.pow(r,2)*Math.pow(c,2),d=(t.lArcFlag!==t.sweepFlag?1:-1)*Math.sqrt(Math.max(0,(Math.pow(i,2)*Math.pow(r,2)-p)/p)),m=i*_/r*d,y=-r*c/i*d,f=n([m,y],t.xRot/180*a);t.cX=f[0]+(e+o)/2,t.cY=f[1]+(s+h)/2,t.phi1=Math.atan2((_-y)/r,(c-m)/i),t.phi2=Math.atan2((-_-y)/r,(-c-m)/i),0===t.sweepFlag&&t.phi2>t.phi1&&(t.phi2-=2*a),1===t.sweepFlag&&t.phi2<t.phi1&&(t.phi2+=2*a),t.phi1*=180/a,t.phi2*=180/a}function l(t,e,s){o(t,e,s);var i=t*t+e*e-s*s;if(0>i)return[];if(0===i)return[[t*s/(t*t+e*e),e*s/(t*t+e*e)]];var r=Math.sqrt(i);return[[(t*s+e*r)/(t*t+e*e),(e*s-t*r)/(t*t+e*e)],[(t*s-e*r)/(t*t+e*e),(e*s+t*r)/(t*t+e*e)]]}var c,_=Math.PI/180;function u(t,e,s){return(1-s)*t+s*e}function p(t,e,s,i){return t+Math.cos(i/180*a)*e+Math.sin(i/180*a)*s}function d(t,e,s,i){var r=e-t,n=s-e,o=3*r+3*(i-s)-6*n,a=6*(n-r),h=3*r;return Math.abs(o)<1e-6?[-h/a]:function(t,e,s){void 0===s&&(s=1e-6);var i=t*t/4-e;if(i<-s)return[];if(i<=s)return[-t/2];var r=Math.sqrt(i);return[-t/2-r,-t/2+r]}(a/o,h/o,1e-6)}function m(t,e,s,i,r){var n=1-r;return t*(n*n*n)+e*(3*n*n*r)+s*(3*n*r*r)+i*(r*r*r)}!function(t){function e(){return r(function(t,e,s){return t.relative&&(void 0!==t.x1&&(t.x1+=e),void 0!==t.y1&&(t.y1+=s),void 0!==t.x2&&(t.x2+=e),void 0!==t.y2&&(t.y2+=s),void 0!==t.x&&(t.x+=e),void 0!==t.y&&(t.y+=s),t.relative=!1),t})}function s(){var t=NaN,e=NaN,s=NaN,i=NaN;return r(function(r,n,o){return r.type&O.SMOOTH_CURVE_TO&&(r.type=O.CURVE_TO,t=isNaN(t)?n:t,e=isNaN(e)?o:e,r.x1=r.relative?n-t:2*n-t,r.y1=r.relative?o-e:2*o-e),r.type&O.CURVE_TO?(t=r.relative?n+r.x2:r.x2,e=r.relative?o+r.y2:r.y2):(t=NaN,e=NaN),r.type&O.SMOOTH_QUAD_TO&&(r.type=O.QUAD_TO,s=isNaN(s)?n:s,i=isNaN(i)?o:i,r.x1=r.relative?n-s:2*n-s,r.y1=r.relative?o-i:2*o-i),r.type&O.QUAD_TO?(s=r.relative?n+r.x1:r.x1,i=r.relative?o+r.y1:r.y1):(s=NaN,i=NaN),r})}function i(){var t=NaN,e=NaN;return r(function(s,i,r){if(s.type&O.SMOOTH_QUAD_TO&&(s.type=O.QUAD_TO,t=isNaN(t)?i:t,e=isNaN(e)?r:e,s.x1=s.relative?i-t:2*i-t,s.y1=s.relative?r-e:2*r-e),s.type&O.QUAD_TO){t=s.relative?i+s.x1:s.x1,e=s.relative?r+s.y1:s.y1;var n=s.x1,o=s.y1;s.type=O.CURVE_TO,s.x1=((s.relative?0:i)+2*n)/3,s.y1=((s.relative?0:r)+2*o)/3,s.x2=(s.x+2*n)/3,s.y2=(s.y+2*o)/3}else t=NaN,e=NaN;return s})}function r(t){var e=0,s=0,i=NaN,r=NaN;return function(n){if(isNaN(i)&&!(n.type&O.MOVE_TO))throw new Error("path must start with moveto");var o=t(n,e,s,i,r);return n.type&O.CLOSE_PATH&&(e=i,s=r),void 0!==n.x&&(e=n.relative?e+n.x:n.x),void 0!==n.y&&(s=n.relative?s+n.y:n.y),n.type&O.MOVE_TO&&(i=e,r=s),o}}function a(t,e,s,i,n,a){return o(t,e,s,i,n,a),r(function(r,o,h,l){var c=r.x1,_=r.x2,u=r.relative&&!isNaN(l),p=void 0!==r.x?r.x:u?0:o,d=void 0!==r.y?r.y:u?0:h;function m(t){return t*t}r.type&O.HORIZ_LINE_TO&&0!==e&&(r.type=O.LINE_TO,r.y=r.relative?0:h),r.type&O.VERT_LINE_TO&&0!==s&&(r.type=O.LINE_TO,r.x=r.relative?0:o),void 0!==r.x&&(r.x=r.x*t+d*s+(u?0:n)),void 0!==r.y&&(r.y=p*e+r.y*i+(u?0:a)),void 0!==r.x1&&(r.x1=r.x1*t+r.y1*s+(u?0:n)),void 0!==r.y1&&(r.y1=c*e+r.y1*i+(u?0:a)),void 0!==r.x2&&(r.x2=r.x2*t+r.y2*s+(u?0:n)),void 0!==r.y2&&(r.y2=_*e+r.y2*i+(u?0:a));var y=t*i-e*s;if(void 0!==r.xRot&&(1!==t||0!==e||0!==s||1!==i))if(0===y)delete r.rX,delete r.rY,delete r.xRot,delete r.lArcFlag,delete r.sweepFlag,r.type=O.LINE_TO;else{var f=r.xRot*Math.PI/180,g=Math.sin(f),v=Math.cos(f),x=1/m(r.rX),b=1/m(r.rY),w=m(v)*x+m(g)*b,T=2*g*v*(x-b),C=m(g)*x+m(v)*b,M=w*i*i-T*e*i+C*e*e,E=T*(t*i+e*s)-2*(w*s*i+C*t*e),N=w*s*s-T*t*s+C*t*t,k=(Math.atan2(E,M-N)+Math.PI)%Math.PI/2,S=Math.sin(k),A=Math.cos(k);r.rX=Math.abs(y)/Math.sqrt(M*m(A)+E*S*A+N*m(S)),r.rY=Math.abs(y)/Math.sqrt(M*m(S)-E*S*A+N*m(A)),r.xRot=180*k/Math.PI}return void 0!==r.sweepFlag&&0>y&&(r.sweepFlag=+!r.sweepFlag),r})}t.ROUND=function(t){function e(e){return Math.round(e*t)/t}return void 0===t&&(t=1e13),o(t),function(t){return void 0!==t.x1&&(t.x1=e(t.x1)),void 0!==t.y1&&(t.y1=e(t.y1)),void 0!==t.x2&&(t.x2=e(t.x2)),void 0!==t.y2&&(t.y2=e(t.y2)),void 0!==t.x&&(t.x=e(t.x)),void 0!==t.y&&(t.y=e(t.y)),t}},t.TO_ABS=e,t.TO_REL=function(){return r(function(t,e,s){return t.relative||(void 0!==t.x1&&(t.x1-=e),void 0!==t.y1&&(t.y1-=s),void 0!==t.x2&&(t.x2-=e),void 0!==t.y2&&(t.y2-=s),void 0!==t.x&&(t.x-=e),void 0!==t.y&&(t.y-=s),t.relative=!0),t})},t.NORMALIZE_HVZ=function(t,e,s){return void 0===t&&(t=!0),void 0===e&&(e=!0),void 0===s&&(s=!0),r(function(i,r,n,o,a){if(isNaN(o)&&!(i.type&O.MOVE_TO))throw new Error("path must start with moveto");return e&&i.type&O.HORIZ_LINE_TO&&(i.type=O.LINE_TO,i.y=i.relative?0:n),s&&i.type&O.VERT_LINE_TO&&(i.type=O.LINE_TO,i.x=i.relative?0:r),t&&i.type&O.CLOSE_PATH&&(i.type=O.LINE_TO,i.x=i.relative?o-r:o,i.y=i.relative?a-n:a),i.type&O.ARC&&(0===i.rX||0===i.rY)&&(i.type=O.LINE_TO,delete i.rX,delete i.rY,delete i.xRot,delete i.lArcFlag,delete i.sweepFlag),i})},t.NORMALIZE_ST=s,t.QT_TO_C=i,t.INFO=r,t.SANITIZE=function(t){void 0===t&&(t=0),o(t);var e=NaN,s=NaN,i=NaN,n=NaN;return r(function(r,o,a,h,l){var c=Math.abs,_=!1,u=0,p=0;if(r.type&O.SMOOTH_CURVE_TO&&(u=isNaN(e)?0:o-e,p=isNaN(s)?0:a-s),r.type&(O.CURVE_TO|O.SMOOTH_CURVE_TO)?(e=r.relative?o+r.x2:r.x2,s=r.relative?a+r.y2:r.y2):(e=NaN,s=NaN),r.type&O.SMOOTH_QUAD_TO?(i=isNaN(i)?o:2*o-i,n=isNaN(n)?a:2*a-n):r.type&O.QUAD_TO?(i=r.relative?o+r.x1:r.x1,n=r.relative?a+r.y1:r.y2):(i=NaN,n=NaN),r.type&O.LINE_COMMANDS||r.type&O.ARC&&(0===r.rX||0===r.rY||!r.lArcFlag)||r.type&O.CURVE_TO||r.type&O.SMOOTH_CURVE_TO||r.type&O.QUAD_TO||r.type&O.SMOOTH_QUAD_TO){var d=void 0===r.x?0:r.relative?r.x:r.x-o,m=void 0===r.y?0:r.relative?r.y:r.y-a;u=isNaN(i)?void 0===r.x1?u:r.relative?r.x:r.x1-o:i-o,p=isNaN(n)?void 0===r.y1?p:r.relative?r.y:r.y1-a:n-a;var y=void 0===r.x2?0:r.relative?r.x:r.x2-o,f=void 0===r.y2?0:r.relative?r.y:r.y2-a;c(d)<=t&&c(m)<=t&&c(u)<=t&&c(p)<=t&&c(y)<=t&&c(f)<=t&&(_=!0)}return r.type&O.CLOSE_PATH&&c(o-h)<=t&&c(a-l)<=t&&(_=!0),_?[]:r})},t.MATRIX=a,t.ROTATE=function(t,e,s){void 0===e&&(e=0),void 0===s&&(s=0),o(t,e,s);var i=Math.sin(t),r=Math.cos(t);return a(r,i,-i,r,e-e*r+s*i,s-e*i-s*r)},t.TRANSLATE=function(t,e){return void 0===e&&(e=0),o(t,e),a(1,0,0,1,t,e)},t.SCALE=function(t,e){return void 0===e&&(e=t),o(t,e),a(t,0,0,e,0,0)},t.SKEW_X=function(t){return o(t),a(1,0,Math.atan(t),1,0,0)},t.SKEW_Y=function(t){return o(t),a(1,Math.atan(t),0,1,0,0)},t.X_AXIS_SYMMETRY=function(t){return void 0===t&&(t=0),o(t),a(-1,0,0,1,t,0)},t.Y_AXIS_SYMMETRY=function(t){return void 0===t&&(t=0),o(t),a(1,0,0,-1,0,t)},t.A_TO_C=function(){return r(function(t,e,s){return O.ARC===t.type?function(t,e,s){var i,r,o,a;t.cX||h(t,e,s);for(var l=Math.min(t.phi1,t.phi2),c=Math.max(t.phi1,t.phi2)-l,p=Math.ceil(c/90),d=new Array(p),m=e,y=s,f=0;f<p;f++){var g=u(t.phi1,t.phi2,f/p),v=u(t.phi1,t.phi2,(f+1)/p),x=v-g,b=4/3*Math.tan(x*_/4),w=[Math.cos(g*_)-b*Math.sin(g*_),Math.sin(g*_)+b*Math.cos(g*_)],T=w[0],C=w[1],M=[Math.cos(v*_),Math.sin(v*_)],E=M[0],N=M[1],k=[E+b*Math.sin(v*_),N-b*Math.cos(v*_)],S=k[0],A=k[1];d[f]={relative:t.relative,type:O.CURVE_TO};var R=function(e,s){var i=n([e*t.rX,s*t.rY],t.xRot),r=i[0],o=i[1];return[t.cX+r,t.cY+o]};i=R(T,C),d[f].x1=i[0],d[f].y1=i[1],r=R(S,A),d[f].x2=r[0],d[f].y2=r[1],o=R(E,N),d[f].x=o[0],d[f].y=o[1],t.relative&&(d[f].x1-=m,d[f].y1-=y,d[f].x2-=m,d[f].y2-=y,d[f].x-=m,d[f].y-=y),m=(a=[d[f].x,d[f].y])[0],y=a[1]}return d}(t,t.relative?0:e,t.relative?0:s):t})},t.ANNOTATE_ARCS=function(){return r(function(t,e,s){return t.relative&&(e=0,s=0),O.ARC===t.type&&h(t,e,s),t})},t.CLONE=function(){return function(t){var e={};for(var s in t)e[s]=t[s];return e}},t.CALCULATE_BOUNDS=function(){var t=e(),n=i(),o=s(),a=r(function(e,s,i){var r=o(n(t(function(t){var e={};for(var s in t)e[s]=t[s];return e}(e))));function c(t){t>a.maxX&&(a.maxX=t),t<a.minX&&(a.minX=t)}function _(t){t>a.maxY&&(a.maxY=t),t<a.minY&&(a.minY=t)}if(r.type&O.DRAWING_COMMANDS&&(c(s),_(i)),r.type&O.HORIZ_LINE_TO&&c(r.x),r.type&O.VERT_LINE_TO&&_(r.y),r.type&O.LINE_TO&&(c(r.x),_(r.y)),r.type&O.CURVE_TO){c(r.x),_(r.y);for(var u=0,y=d(s,r.x1,r.x2,r.x);u<y.length;u++)0<(H=y[u])&&1>H&&c(m(s,r.x1,r.x2,r.x,H));for(var f=0,g=d(i,r.y1,r.y2,r.y);f<g.length;f++)0<(H=g[f])&&1>H&&_(m(i,r.y1,r.y2,r.y,H))}if(r.type&O.ARC){c(r.x),_(r.y),h(r,s,i);for(var v=r.xRot/180*Math.PI,x=Math.cos(v)*r.rX,b=Math.sin(v)*r.rX,w=-Math.sin(v)*r.rY,T=Math.cos(v)*r.rY,C=r.phi1<r.phi2?[r.phi1,r.phi2]:-180>r.phi2?[r.phi2+360,r.phi1+360]:[r.phi2,r.phi1],M=C[0],E=C[1],N=function(t){var e=t[0],s=t[1],i=180*Math.atan2(s,e)/Math.PI;return i<M?i+360:i},k=0,S=l(w,-x,0).map(N);k<S.length;k++)(H=S[k])>M&&H<E&&c(p(r.cX,x,w,H));for(var A=0,R=l(T,-b,0).map(N);A<R.length;A++){var H;(H=R[A])>M&&H<E&&_(p(r.cY,b,T,H))}}return e});return a.minX=1/0,a.maxX=-1/0,a.minY=1/0,a.maxY=-1/0,a}}(c||(c={}));var y,f,g=function(){function t(){}return t.prototype.round=function(t){return this.transform(c.ROUND(t))},t.prototype.toAbs=function(){return this.transform(c.TO_ABS())},t.prototype.toRel=function(){return this.transform(c.TO_REL())},t.prototype.normalizeHVZ=function(t,e,s){return this.transform(c.NORMALIZE_HVZ(t,e,s))},t.prototype.normalizeST=function(){return this.transform(c.NORMALIZE_ST())},t.prototype.qtToC=function(){return this.transform(c.QT_TO_C())},t.prototype.aToC=function(){return this.transform(c.A_TO_C())},t.prototype.sanitize=function(t){return this.transform(c.SANITIZE(t))},t.prototype.translate=function(t,e){return this.transform(c.TRANSLATE(t,e))},t.prototype.scale=function(t,e){return this.transform(c.SCALE(t,e))},t.prototype.rotate=function(t,e,s){return this.transform(c.ROTATE(t,e,s))},t.prototype.matrix=function(t,e,s,i,r,n){return this.transform(c.MATRIX(t,e,s,i,r,n))},t.prototype.skewX=function(t){return this.transform(c.SKEW_X(t))},t.prototype.skewY=function(t){return this.transform(c.SKEW_Y(t))},t.prototype.xSymmetry=function(t){return this.transform(c.X_AXIS_SYMMETRY(t))},t.prototype.ySymmetry=function(t){return this.transform(c.Y_AXIS_SYMMETRY(t))},t.prototype.annotateArcs=function(){return this.transform(c.ANNOTATE_ARCS())},t}(),v=function(t){return" "===t||"\t"===t||"\r"===t||"\n"===t},x=function(t){return"0".charCodeAt(0)<=t.charCodeAt(0)&&t.charCodeAt(0)<="9".charCodeAt(0)},b=function(t){function e(){var e=t.call(this)||this;return e.curNumber="",e.curCommandType=-1,e.curCommandRelative=!1,e.canParseCommandOrComma=!0,e.curNumberHasExp=!1,e.curNumberHasExpDigits=!1,e.curNumberHasDecimal=!1,e.curArgs=[],e}return r(e,t),e.prototype.finish=function(t){if(void 0===t&&(t=[]),this.parse(" ",t),0!==this.curArgs.length||!this.canParseCommandOrComma)throw new SyntaxError("Unterminated command at the path end.");return t},e.prototype.parse=function(t,e){var s=this;void 0===e&&(e=[]);for(var i=function(t){e.push(t),s.curArgs.length=0,s.canParseCommandOrComma=!0},r=0;r<t.length;r++){var n=t[r];if(x(n))this.curNumber+=n,this.curNumberHasExpDigits=this.curNumberHasExp;else if("e"!==n&&"E"!==n)if("-"!==n&&"+"!==n||!this.curNumberHasExp||this.curNumberHasExpDigits)if("."!==n||this.curNumberHasExp||this.curNumberHasDecimal){if(this.curNumber&&-1!==this.curCommandType){var o=Number(this.curNumber);if(isNaN(o))throw new SyntaxError("Invalid number ending at "+r);if(this.curCommandType===O.ARC)if(0===this.curArgs.length||1===this.curArgs.length){if(0>o)throw new SyntaxError('Expected positive number, got "'+o+'" at index "'+r+'"')}else if((3===this.curArgs.length||4===this.curArgs.length)&&"0"!==this.curNumber&&"1"!==this.curNumber)throw new SyntaxError('Expected a flag, got "'+this.curNumber+'" at index "'+r+'"');this.curArgs.push(o),this.curArgs.length===w[this.curCommandType]&&(O.HORIZ_LINE_TO===this.curCommandType?i({type:O.HORIZ_LINE_TO,relative:this.curCommandRelative,x:o}):O.VERT_LINE_TO===this.curCommandType?i({type:O.VERT_LINE_TO,relative:this.curCommandRelative,y:o}):this.curCommandType===O.MOVE_TO||this.curCommandType===O.LINE_TO||this.curCommandType===O.SMOOTH_QUAD_TO?(i({type:this.curCommandType,relative:this.curCommandRelative,x:this.curArgs[0],y:this.curArgs[1]}),O.MOVE_TO===this.curCommandType&&(this.curCommandType=O.LINE_TO)):this.curCommandType===O.CURVE_TO?i({type:O.CURVE_TO,relative:this.curCommandRelative,x1:this.curArgs[0],y1:this.curArgs[1],x2:this.curArgs[2],y2:this.curArgs[3],x:this.curArgs[4],y:this.curArgs[5]}):this.curCommandType===O.SMOOTH_CURVE_TO?i({type:O.SMOOTH_CURVE_TO,relative:this.curCommandRelative,x2:this.curArgs[0],y2:this.curArgs[1],x:this.curArgs[2],y:this.curArgs[3]}):this.curCommandType===O.QUAD_TO?i({type:O.QUAD_TO,relative:this.curCommandRelative,x1:this.curArgs[0],y1:this.curArgs[1],x:this.curArgs[2],y:this.curArgs[3]}):this.curCommandType===O.ARC&&i({type:O.ARC,relative:this.curCommandRelative,rX:this.curArgs[0],rY:this.curArgs[1],xRot:this.curArgs[2],lArcFlag:this.curArgs[3],sweepFlag:this.curArgs[4],x:this.curArgs[5],y:this.curArgs[6]})),this.curNumber="",this.curNumberHasExpDigits=!1,this.curNumberHasExp=!1,this.curNumberHasDecimal=!1,this.canParseCommandOrComma=!0}if(!v(n))if(","===n&&this.canParseCommandOrComma)this.canParseCommandOrComma=!1;else if("+"!==n&&"-"!==n&&"."!==n){if(0!==this.curArgs.length)throw new SyntaxError("Unterminated command at index "+r+".");if(!this.canParseCommandOrComma)throw new SyntaxError('Unexpected character "'+n+'" at index '+r+". Command cannot follow comma");if(this.canParseCommandOrComma=!1,"z"!==n&&"Z"!==n)if("h"===n||"H"===n)this.curCommandType=O.HORIZ_LINE_TO,this.curCommandRelative="h"===n;else if("v"===n||"V"===n)this.curCommandType=O.VERT_LINE_TO,this.curCommandRelative="v"===n;else if("m"===n||"M"===n)this.curCommandType=O.MOVE_TO,this.curCommandRelative="m"===n;else if("l"===n||"L"===n)this.curCommandType=O.LINE_TO,this.curCommandRelative="l"===n;else if("c"===n||"C"===n)this.curCommandType=O.CURVE_TO,this.curCommandRelative="c"===n;else if("s"===n||"S"===n)this.curCommandType=O.SMOOTH_CURVE_TO,this.curCommandRelative="s"===n;else if("q"===n||"Q"===n)this.curCommandType=O.QUAD_TO,this.curCommandRelative="q"===n;else if("t"===n||"T"===n)this.curCommandType=O.SMOOTH_QUAD_TO,this.curCommandRelative="t"===n;else{if("a"!==n&&"A"!==n)throw new SyntaxError('Unexpected character "'+n+'" at index '+r+".");this.curCommandType=O.ARC,this.curCommandRelative="a"===n}else e.push({type:O.CLOSE_PATH}),this.canParseCommandOrComma=!0,this.curCommandType=-1}else this.curNumber=n,this.curNumberHasDecimal="."===n}else this.curNumber+=n,this.curNumberHasDecimal=!0;else this.curNumber+=n;else this.curNumber+=n,this.curNumberHasExp=!0}return e},e.prototype.transform=function(t){return Object.create(this,{parse:{value:function(e,s){void 0===s&&(s=[]);for(var i=0,r=Object.getPrototypeOf(this).parse.call(this,e);i<r.length;i++){var n=r[i],o=t(n);Array.isArray(o)?s.push.apply(s,o):s.push(o)}return s}}})},e}(g),O=function(t){function e(s){var i=t.call(this)||this;return i.commands="string"==typeof s?e.parse(s):s,i}return r(e,t),e.prototype.encode=function(){return e.encode(this.commands)},e.prototype.getBounds=function(){var t=c.CALCULATE_BOUNDS();return this.transform(t),t},e.prototype.transform=function(t){for(var e=[],s=0,i=this.commands;s<i.length;s++){var r=t(i[s]);Array.isArray(r)?e.push.apply(e,r):e.push(r)}return this.commands=e,this},e.encode=function(t){return C(t)},e.parse=function(t){var e=new b,s=[];return e.parse(t,s),e.finish(s),s},e.CLOSE_PATH=1,e.MOVE_TO=2,e.HORIZ_LINE_TO=4,e.VERT_LINE_TO=8,e.LINE_TO=16,e.CURVE_TO=32,e.SMOOTH_CURVE_TO=64,e.QUAD_TO=128,e.SMOOTH_QUAD_TO=256,e.ARC=512,e.LINE_COMMANDS=e.LINE_TO|e.HORIZ_LINE_TO|e.VERT_LINE_TO,e.DRAWING_COMMANDS=e.HORIZ_LINE_TO|e.VERT_LINE_TO|e.LINE_TO|e.CURVE_TO|e.SMOOTH_CURVE_TO|e.QUAD_TO|e.SMOOTH_QUAD_TO|e.ARC,e}(g),w=((y={})[O.MOVE_TO]=2,y[O.LINE_TO]=2,y[O.HORIZ_LINE_TO]=1,y[O.VERT_LINE_TO]=1,y[O.CLOSE_PATH]=0,y[O.QUAD_TO]=4,y[O.SMOOTH_QUAD_TO]=2,y[O.CURVE_TO]=6,y[O.SMOOTH_CURVE_TO]=4,y[O.ARC]=7,y),T=" ";function C(t){var e="";Array.isArray(t)||(t=[t]);for(var s=0;s<t.length;s++){var i=t[s];if(i.type===O.CLOSE_PATH)e+="z";else if(i.type===O.HORIZ_LINE_TO)e+=(i.relative?"h":"H")+i.x;else if(i.type===O.VERT_LINE_TO)e+=(i.relative?"v":"V")+i.y;else if(i.type===O.MOVE_TO)e+=(i.relative?"m":"M")+i.x+T+i.y;else if(i.type===O.LINE_TO)e+=(i.relative?"l":"L")+i.x+T+i.y;else if(i.type===O.CURVE_TO)e+=(i.relative?"c":"C")+i.x1+T+i.y1+T+i.x2+T+i.y2+T+i.x+T+i.y;else if(i.type===O.SMOOTH_CURVE_TO)e+=(i.relative?"s":"S")+i.x2+T+i.y2+T+i.x+T+i.y;else if(i.type===O.QUAD_TO)e+=(i.relative?"q":"Q")+i.x1+T+i.y1+T+i.x+T+i.y;else if(i.type===O.SMOOTH_QUAD_TO)e+=(i.relative?"t":"T")+i.x+T+i.y;else{if(i.type!==O.ARC)throw new Error('Unexpected command type "'+i.type+'" at index '+s+".");e+=(i.relative?"a":"A")+i.rX+T+i.rY+T+i.xRot+T+ +i.lArcFlag+T+ +i.sweepFlag+T+i.x+T+i.y}}return e}var M=function(t){function e(s){var i=t.call(this)||this;return i.commands="string"==typeof s?e.parse(s):s,i}return r(e,t),e.prototype.encode=function(){return e.encode(this.commands)},e.prototype.getBounds=function(){var t=c.CALCULATE_BOUNDS();return this.transform(t),t},e.prototype.transform=function(t){for(var e=[],s=0,i=this.commands;s<i.length;s++){var r=t(i[s]);Array.isArray(r)?e.push.apply(e,r):e.push(r)}return this.commands=e,this},e.encode=function(t){return C(t)},e.parse=function(t){var e=new b,s=[];return e.parse(t,s),e.finish(s),s},e.CLOSE_PATH=1,e.MOVE_TO=2,e.HORIZ_LINE_TO=4,e.VERT_LINE_TO=8,e.LINE_TO=16,e.CURVE_TO=32,e.SMOOTH_CURVE_TO=64,e.QUAD_TO=128,e.SMOOTH_QUAD_TO=256,e.ARC=512,e.LINE_COMMANDS=e.LINE_TO|e.HORIZ_LINE_TO|e.VERT_LINE_TO,e.DRAWING_COMMANDS=e.HORIZ_LINE_TO|e.VERT_LINE_TO|e.LINE_TO|e.CURVE_TO|e.SMOOTH_CURVE_TO|e.QUAD_TO|e.SMOOTH_QUAD_TO|e.ARC,e}(g);(f={})[M.MOVE_TO]=2,f[M.LINE_TO]=2,f[M.HORIZ_LINE_TO]=1,f[M.VERT_LINE_TO]=1,f[M.CLOSE_PATH]=0,f[M.QUAD_TO]=4,f[M.SMOOTH_QUAD_TO]=2,f[M.CURVE_TO]=6,f[M.SMOOTH_CURVE_TO]=4,f[M.ARC]=7;s.d(e,"a",function(){return E});class E{constructor(){}static loadFromFileContents(t){let e=(new DOMParser).parseFromString(t,"image/svg+xml");return this.load(e)}static load(t){let e=t.querySelectorAll("path"),s={},i=[];s.points=[];for(let t of e){let e=new M(t.getAttribute("d")),r={x:0,y:0};for(let[t,n]of e.commands.entries()){switch(n.type){case M.MOVE_TO:case M.LINE_TO:s.points.push([n.x,n.y]);break;case M.HORIZ_LINE_TO:s.points.push([n.x,r.y]);break;case M.VERT_LINE_TO:s.points.push([r.x,n.y]);break;case M.CLOSE_PATH:s.closed=!0,i.push(s),(s={}).points=[]}if(t==e.commands.length-1&&n.type!=M.CLOSE_PATH){let t=s.points[0],e=s.points[s.points.length-1];Math.hypot(e.x-t.x,e.y-t.y)<.1?s.closed=!0:s.closed=!1,i.push(s),(s={}).points=[]}n.hasOwnProperty("x")&&(r.x=n.x),n.hasOwnProperty("y")&&(r.y=n.y)}}for(let t of i){t.x=t.points[0][0],t.y=t.points[0][1],t.points.push([t.x,t.y]);for(let e of t.points)e[0]-=t.x,e[1]-=t.y}return i}}},,function(t,e){t.exports='<svg xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:cc="http://creativecommons.org/ns#" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:svg="http://www.w3.org/2000/svg" xmlns="http://www.w3.org/2000/svg" xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd" xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape" viewBox="0 0 900 900" version="1.1" id="svg8" sodipodi:docname="dla.svg" inkscape:version="0.92.3 (2405546, 2018-03-11)"><path style="font-style:normal;font-variant:normal;font-weight:bold;font-stretch:normal;font-size:medium;line-height:1.25;font-family:sans-serif;-inkscape-font-specification:&#x27;sans-serif Bold&#x27;;letter-spacing:0.81559914px;word-spacing:0px;fill:none;fill-opacity:1;stroke:#000000;stroke-width:1;stroke-opacity:1;stroke-miterlimit:4;stroke-dasharray:none" d="M 360.0972,430.72214 356.96812,456.71 347.58087,479.86521 333.41765,498.96906 315.96066,513.06641 300.90813,520.44447 284.47221,525.18747 265.76359,527.75662 243.89295,528.61302 H 209.30835 174.72376 V 430.52451 332.43599 H 210.29649 245.86922 L 268.20099,333.45707 287.23898,336.52027 303.24671,341.32917 316.48767,347.85084 334.60341,362.40932 348.37137,381.31556 357.16575,404.14142 360.0972,430.72214" id="path820"></path><path style="font-style:normal;font-variant:normal;font-weight:bold;font-stretch:normal;font-size:medium;line-height:1.25;font-family:sans-serif;-inkscape-font-specification:&#x27;sans-serif Bold&#x27;;letter-spacing:0.81559914px;word-spacing:0px;fill:none;fill-opacity:1;stroke:#000000;stroke-width:1;stroke-opacity:1;stroke-miterlimit:4;stroke-dasharray:none" d="M 307.79212,430.32687 306.01348,412.37583 300.67756,397.25741 291.61969,384.93871 278.41167,375.65026 270.53956,372.4553 262.46982,370.512 252.35794,369.42506 238.09592,369.06274 H 231.706 225.31609 V 430.45864 491.8545 H 231.706 238.09592 L 253.74133,491.45923 264.57783,490.27351 272.91108,487.90199 281.04669,484.21298 293.03602,474.99044 301.33632,463.13284 306.17817,448.27792 307.79212,430.32687" id="path819"></path><path inkscape:connector-curvature="0" id="path821" style="font-style:normal;font-variant:normal;font-weight:bold;font-stretch:normal;font-size:medium;line-height:1.25;font-family:sans-serif;-inkscape-font-specification:&#x27;sans-serif Bold&#x27;;letter-spacing:0.81559914px;word-spacing:0px;fill:none;fill-opacity:1;stroke:#000000;stroke-width:1;stroke-opacity:1;stroke-miterlimit:4;stroke-dasharray:none" d="M 517.15385,528.61302 H 375.65347 V 332.43599 H 426.24576 V 490.66878 H 517.15385 V 528.61302" sodipodi:nodetypes="ccccccc"></path><path style="font-style:normal;font-variant:normal;font-weight:bold;font-stretch:normal;font-size:medium;line-height:1.25;font-family:sans-serif;-inkscape-font-specification:&#x27;sans-serif Bold&#x27;;letter-spacing:0.81559914px;word-spacing:0px;fill:none;fill-opacity:1;stroke:#000000;stroke-width:1;stroke-opacity:1;stroke-miterlimit:4;stroke-dasharray:none" d="M 731.69898,528.61302 H 679.39389 L 665.82358,488.95599 H 593.09708 L 579.52676,528.61302 H 528.53917 L 601.00213,332.43599 H 659.23601 L 731.69898,528.61302" id="path824"></path><path style="font-style:normal;font-variant:normal;font-weight:bold;font-stretch:normal;font-size:medium;line-height:1.25;font-family:sans-serif;-inkscape-font-specification:&#x27;sans-serif Bold&#x27;;letter-spacing:0.81559914px;word-spacing:0px;fill:none;fill-opacity:1;stroke:#000000;stroke-width:1;stroke-opacity:1;stroke-miterlimit:4;stroke-dasharray:none" d="M 653.57075,452.988 629.46033,382.63306 605.34994,452.988 H 653.57075" id="path823"></path></svg>'},function(t,e){t.exports='<svg xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:cc="http://creativecommons.org/ns#" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:svg="http://www.w3.org/2000/svg" xmlns="http://www.w3.org/2000/svg" xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd" xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape" id="svg832" version="1.1" viewBox="0 0 900 900" sodipodi:docname="polygons.svg" inkscape:version="0.92.3 (2405546, 2018-03-11)"><path id="path1377" style="opacity:1;vector-effect:none;fill:none;fill-opacity:1;stroke:#000000;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1" d="M 637.95718,464.22103 584.33571,382.14098 530.71423,300.06092 486.44216,387.53824 465.30384,429.30364 437.48882,430.45616 403.17529,384.77031 427.64471,365.18499 414.35188,278.03524 332.23363,245.97365 263.40556,301.05921 276.69889,388.20739 358.81822,420.27107 362.71416,417.15172 354.63937,446.02414 264.54156,476.88822 343.8441,529.62956 345.35592,624.85561 420.02002,565.73219 511.05425,593.72124 477.89678,504.44013 500.8419,471.77963 540.06207,469.61781 637.95718,464.22103" inkscape:connector-curvature="0" sodipodi:nodetypes="cccccccccccccccccccccccc"></path></svg>'},,,,function(t,e,s){"use strict";s.r(e);var i={CircleDiameter:4,MaxWalkers:4e3,ShowWalkers:!1,BiasTowards:"Center",WalkerSource:"Edges",EdgeMargin:200},r=s(0),n=s(1);let o,a={dla:s(3),polygons:s(4)},h=a.polygons;new p5(function(t){function e(){o.removeAll(),s(h),o.createDefaultWalkers()}function s(t){let e=n.a.loadFromFileContents(t);for(let t of e)t.stuck=!0,t.solid=!1,t.x+=window.innerWidth/2-450,t.y+=window.innerHeight/2-450;o.createShapesFromPaths(e)}t.setup=function(){t.createCanvas(window.innerWidth,window.innerHeight),t.colorMode(t.HSB,255),t.ellipseMode(t.CENTER),(o=new r.a(t,i)).createDefaultWalkers(),s(h)},t.draw=function(){o.iterate(),o.draw()},t.keyReleased=function(){switch(t.key){case" ":o.togglePause();break;case"w":o.toggleShowWalkers();break;case"c":o.toggleShowClusters();break;case"r":e();break;case"f":o.toggleUseFrame(),e();break;case"s":o.toggleShowShapes(),restartWorld();break;case"l":o.toggleLineRenderingMode();break;case"1":h=a.dla,e();break;case"2":h=a.polygons,e()}}})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,